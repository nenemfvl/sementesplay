
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model CarteiraDigital
 * 
 */
export type CarteiraDigital = $Result.DefaultSelection<Prisma.$CarteiraDigitalPayload>
/**
 * Model MovimentacaoCarteira
 * 
 */
export type MovimentacaoCarteira = $Result.DefaultSelection<Prisma.$MovimentacaoCarteiraPayload>
/**
 * Model DadosBancarios
 * 
 */
export type DadosBancarios = $Result.DefaultSelection<Prisma.$DadosBancariosPayload>
/**
 * Model Saque
 * 
 */
export type Saque = $Result.DefaultSelection<Prisma.$SaquePayload>
/**
 * Model Pagamento
 * 
 */
export type Pagamento = $Result.DefaultSelection<Prisma.$PagamentoPayload>
/**
 * Model Criador
 * 
 */
export type Criador = $Result.DefaultSelection<Prisma.$CriadorPayload>
/**
 * Model CandidaturaCriador
 * 
 */
export type CandidaturaCriador = $Result.DefaultSelection<Prisma.$CandidaturaCriadorPayload>
/**
 * Model LogAuditoria
 * 
 */
export type LogAuditoria = $Result.DefaultSelection<Prisma.$LogAuditoriaPayload>
/**
 * Model Parceiro
 * 
 */
export type Parceiro = $Result.DefaultSelection<Prisma.$ParceiroPayload>
/**
 * Model Semente
 * 
 */
export type Semente = $Result.DefaultSelection<Prisma.$SementePayload>
/**
 * Model Doacao
 * 
 */
export type Doacao = $Result.DefaultSelection<Prisma.$DoacaoPayload>
/**
 * Model Transacao
 * 
 */
export type Transacao = $Result.DefaultSelection<Prisma.$TransacaoPayload>
/**
 * Model CodigoCashback
 * 
 */
export type CodigoCashback = $Result.DefaultSelection<Prisma.$CodigoCashbackPayload>
/**
 * Model Notificacao
 * 
 */
export type Notificacao = $Result.DefaultSelection<Prisma.$NotificacaoPayload>
/**
 * Model TokenRecuperacao
 * 
 */
export type TokenRecuperacao = $Result.DefaultSelection<Prisma.$TokenRecuperacaoPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs>;

  /**
   * `prisma.carteiraDigital`: Exposes CRUD operations for the **CarteiraDigital** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CarteiraDigitals
    * const carteiraDigitals = await prisma.carteiraDigital.findMany()
    * ```
    */
  get carteiraDigital(): Prisma.CarteiraDigitalDelegate<ExtArgs>;

  /**
   * `prisma.movimentacaoCarteira`: Exposes CRUD operations for the **MovimentacaoCarteira** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MovimentacaoCarteiras
    * const movimentacaoCarteiras = await prisma.movimentacaoCarteira.findMany()
    * ```
    */
  get movimentacaoCarteira(): Prisma.MovimentacaoCarteiraDelegate<ExtArgs>;

  /**
   * `prisma.dadosBancarios`: Exposes CRUD operations for the **DadosBancarios** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DadosBancarios
    * const dadosBancarios = await prisma.dadosBancarios.findMany()
    * ```
    */
  get dadosBancarios(): Prisma.DadosBancariosDelegate<ExtArgs>;

  /**
   * `prisma.saque`: Exposes CRUD operations for the **Saque** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Saques
    * const saques = await prisma.saque.findMany()
    * ```
    */
  get saque(): Prisma.SaqueDelegate<ExtArgs>;

  /**
   * `prisma.pagamento`: Exposes CRUD operations for the **Pagamento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pagamentos
    * const pagamentos = await prisma.pagamento.findMany()
    * ```
    */
  get pagamento(): Prisma.PagamentoDelegate<ExtArgs>;

  /**
   * `prisma.criador`: Exposes CRUD operations for the **Criador** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Criadors
    * const criadors = await prisma.criador.findMany()
    * ```
    */
  get criador(): Prisma.CriadorDelegate<ExtArgs>;

  /**
   * `prisma.candidaturaCriador`: Exposes CRUD operations for the **CandidaturaCriador** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CandidaturaCriadors
    * const candidaturaCriadors = await prisma.candidaturaCriador.findMany()
    * ```
    */
  get candidaturaCriador(): Prisma.CandidaturaCriadorDelegate<ExtArgs>;

  /**
   * `prisma.logAuditoria`: Exposes CRUD operations for the **LogAuditoria** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LogAuditorias
    * const logAuditorias = await prisma.logAuditoria.findMany()
    * ```
    */
  get logAuditoria(): Prisma.LogAuditoriaDelegate<ExtArgs>;

  /**
   * `prisma.parceiro`: Exposes CRUD operations for the **Parceiro** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Parceiros
    * const parceiros = await prisma.parceiro.findMany()
    * ```
    */
  get parceiro(): Prisma.ParceiroDelegate<ExtArgs>;

  /**
   * `prisma.semente`: Exposes CRUD operations for the **Semente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sementes
    * const sementes = await prisma.semente.findMany()
    * ```
    */
  get semente(): Prisma.SementeDelegate<ExtArgs>;

  /**
   * `prisma.doacao`: Exposes CRUD operations for the **Doacao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Doacaos
    * const doacaos = await prisma.doacao.findMany()
    * ```
    */
  get doacao(): Prisma.DoacaoDelegate<ExtArgs>;

  /**
   * `prisma.transacao`: Exposes CRUD operations for the **Transacao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transacaos
    * const transacaos = await prisma.transacao.findMany()
    * ```
    */
  get transacao(): Prisma.TransacaoDelegate<ExtArgs>;

  /**
   * `prisma.codigoCashback`: Exposes CRUD operations for the **CodigoCashback** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CodigoCashbacks
    * const codigoCashbacks = await prisma.codigoCashback.findMany()
    * ```
    */
  get codigoCashback(): Prisma.CodigoCashbackDelegate<ExtArgs>;

  /**
   * `prisma.notificacao`: Exposes CRUD operations for the **Notificacao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notificacaos
    * const notificacaos = await prisma.notificacao.findMany()
    * ```
    */
  get notificacao(): Prisma.NotificacaoDelegate<ExtArgs>;

  /**
   * `prisma.tokenRecuperacao`: Exposes CRUD operations for the **TokenRecuperacao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TokenRecuperacaos
    * const tokenRecuperacaos = await prisma.tokenRecuperacao.findMany()
    * ```
    */
  get tokenRecuperacao(): Prisma.TokenRecuperacaoDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuario: 'Usuario',
    CarteiraDigital: 'CarteiraDigital',
    MovimentacaoCarteira: 'MovimentacaoCarteira',
    DadosBancarios: 'DadosBancarios',
    Saque: 'Saque',
    Pagamento: 'Pagamento',
    Criador: 'Criador',
    CandidaturaCriador: 'CandidaturaCriador',
    LogAuditoria: 'LogAuditoria',
    Parceiro: 'Parceiro',
    Semente: 'Semente',
    Doacao: 'Doacao',
    Transacao: 'Transacao',
    CodigoCashback: 'CodigoCashback',
    Notificacao: 'Notificacao',
    TokenRecuperacao: 'TokenRecuperacao'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "usuario" | "carteiraDigital" | "movimentacaoCarteira" | "dadosBancarios" | "saque" | "pagamento" | "criador" | "candidaturaCriador" | "logAuditoria" | "parceiro" | "semente" | "doacao" | "transacao" | "codigoCashback" | "notificacao" | "tokenRecuperacao"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsuarioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      CarteiraDigital: {
        payload: Prisma.$CarteiraDigitalPayload<ExtArgs>
        fields: Prisma.CarteiraDigitalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CarteiraDigitalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarteiraDigitalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CarteiraDigitalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarteiraDigitalPayload>
          }
          findFirst: {
            args: Prisma.CarteiraDigitalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarteiraDigitalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CarteiraDigitalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarteiraDigitalPayload>
          }
          findMany: {
            args: Prisma.CarteiraDigitalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarteiraDigitalPayload>[]
          }
          create: {
            args: Prisma.CarteiraDigitalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarteiraDigitalPayload>
          }
          createMany: {
            args: Prisma.CarteiraDigitalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CarteiraDigitalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarteiraDigitalPayload>[]
          }
          delete: {
            args: Prisma.CarteiraDigitalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarteiraDigitalPayload>
          }
          update: {
            args: Prisma.CarteiraDigitalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarteiraDigitalPayload>
          }
          deleteMany: {
            args: Prisma.CarteiraDigitalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CarteiraDigitalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CarteiraDigitalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarteiraDigitalPayload>
          }
          aggregate: {
            args: Prisma.CarteiraDigitalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCarteiraDigital>
          }
          groupBy: {
            args: Prisma.CarteiraDigitalGroupByArgs<ExtArgs>
            result: $Utils.Optional<CarteiraDigitalGroupByOutputType>[]
          }
          count: {
            args: Prisma.CarteiraDigitalCountArgs<ExtArgs>
            result: $Utils.Optional<CarteiraDigitalCountAggregateOutputType> | number
          }
        }
      }
      MovimentacaoCarteira: {
        payload: Prisma.$MovimentacaoCarteiraPayload<ExtArgs>
        fields: Prisma.MovimentacaoCarteiraFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MovimentacaoCarteiraFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovimentacaoCarteiraPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MovimentacaoCarteiraFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovimentacaoCarteiraPayload>
          }
          findFirst: {
            args: Prisma.MovimentacaoCarteiraFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovimentacaoCarteiraPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MovimentacaoCarteiraFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovimentacaoCarteiraPayload>
          }
          findMany: {
            args: Prisma.MovimentacaoCarteiraFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovimentacaoCarteiraPayload>[]
          }
          create: {
            args: Prisma.MovimentacaoCarteiraCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovimentacaoCarteiraPayload>
          }
          createMany: {
            args: Prisma.MovimentacaoCarteiraCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MovimentacaoCarteiraCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovimentacaoCarteiraPayload>[]
          }
          delete: {
            args: Prisma.MovimentacaoCarteiraDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovimentacaoCarteiraPayload>
          }
          update: {
            args: Prisma.MovimentacaoCarteiraUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovimentacaoCarteiraPayload>
          }
          deleteMany: {
            args: Prisma.MovimentacaoCarteiraDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MovimentacaoCarteiraUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MovimentacaoCarteiraUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovimentacaoCarteiraPayload>
          }
          aggregate: {
            args: Prisma.MovimentacaoCarteiraAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMovimentacaoCarteira>
          }
          groupBy: {
            args: Prisma.MovimentacaoCarteiraGroupByArgs<ExtArgs>
            result: $Utils.Optional<MovimentacaoCarteiraGroupByOutputType>[]
          }
          count: {
            args: Prisma.MovimentacaoCarteiraCountArgs<ExtArgs>
            result: $Utils.Optional<MovimentacaoCarteiraCountAggregateOutputType> | number
          }
        }
      }
      DadosBancarios: {
        payload: Prisma.$DadosBancariosPayload<ExtArgs>
        fields: Prisma.DadosBancariosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DadosBancariosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DadosBancariosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DadosBancariosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DadosBancariosPayload>
          }
          findFirst: {
            args: Prisma.DadosBancariosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DadosBancariosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DadosBancariosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DadosBancariosPayload>
          }
          findMany: {
            args: Prisma.DadosBancariosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DadosBancariosPayload>[]
          }
          create: {
            args: Prisma.DadosBancariosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DadosBancariosPayload>
          }
          createMany: {
            args: Prisma.DadosBancariosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DadosBancariosCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DadosBancariosPayload>[]
          }
          delete: {
            args: Prisma.DadosBancariosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DadosBancariosPayload>
          }
          update: {
            args: Prisma.DadosBancariosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DadosBancariosPayload>
          }
          deleteMany: {
            args: Prisma.DadosBancariosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DadosBancariosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DadosBancariosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DadosBancariosPayload>
          }
          aggregate: {
            args: Prisma.DadosBancariosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDadosBancarios>
          }
          groupBy: {
            args: Prisma.DadosBancariosGroupByArgs<ExtArgs>
            result: $Utils.Optional<DadosBancariosGroupByOutputType>[]
          }
          count: {
            args: Prisma.DadosBancariosCountArgs<ExtArgs>
            result: $Utils.Optional<DadosBancariosCountAggregateOutputType> | number
          }
        }
      }
      Saque: {
        payload: Prisma.$SaquePayload<ExtArgs>
        fields: Prisma.SaqueFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SaqueFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaquePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SaqueFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaquePayload>
          }
          findFirst: {
            args: Prisma.SaqueFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaquePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SaqueFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaquePayload>
          }
          findMany: {
            args: Prisma.SaqueFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaquePayload>[]
          }
          create: {
            args: Prisma.SaqueCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaquePayload>
          }
          createMany: {
            args: Prisma.SaqueCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SaqueCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaquePayload>[]
          }
          delete: {
            args: Prisma.SaqueDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaquePayload>
          }
          update: {
            args: Prisma.SaqueUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaquePayload>
          }
          deleteMany: {
            args: Prisma.SaqueDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SaqueUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SaqueUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaquePayload>
          }
          aggregate: {
            args: Prisma.SaqueAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSaque>
          }
          groupBy: {
            args: Prisma.SaqueGroupByArgs<ExtArgs>
            result: $Utils.Optional<SaqueGroupByOutputType>[]
          }
          count: {
            args: Prisma.SaqueCountArgs<ExtArgs>
            result: $Utils.Optional<SaqueCountAggregateOutputType> | number
          }
        }
      }
      Pagamento: {
        payload: Prisma.$PagamentoPayload<ExtArgs>
        fields: Prisma.PagamentoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PagamentoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagamentoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PagamentoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagamentoPayload>
          }
          findFirst: {
            args: Prisma.PagamentoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagamentoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PagamentoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagamentoPayload>
          }
          findMany: {
            args: Prisma.PagamentoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagamentoPayload>[]
          }
          create: {
            args: Prisma.PagamentoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagamentoPayload>
          }
          createMany: {
            args: Prisma.PagamentoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PagamentoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagamentoPayload>[]
          }
          delete: {
            args: Prisma.PagamentoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagamentoPayload>
          }
          update: {
            args: Prisma.PagamentoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagamentoPayload>
          }
          deleteMany: {
            args: Prisma.PagamentoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PagamentoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PagamentoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagamentoPayload>
          }
          aggregate: {
            args: Prisma.PagamentoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePagamento>
          }
          groupBy: {
            args: Prisma.PagamentoGroupByArgs<ExtArgs>
            result: $Utils.Optional<PagamentoGroupByOutputType>[]
          }
          count: {
            args: Prisma.PagamentoCountArgs<ExtArgs>
            result: $Utils.Optional<PagamentoCountAggregateOutputType> | number
          }
        }
      }
      Criador: {
        payload: Prisma.$CriadorPayload<ExtArgs>
        fields: Prisma.CriadorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CriadorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CriadorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CriadorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CriadorPayload>
          }
          findFirst: {
            args: Prisma.CriadorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CriadorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CriadorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CriadorPayload>
          }
          findMany: {
            args: Prisma.CriadorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CriadorPayload>[]
          }
          create: {
            args: Prisma.CriadorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CriadorPayload>
          }
          createMany: {
            args: Prisma.CriadorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CriadorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CriadorPayload>[]
          }
          delete: {
            args: Prisma.CriadorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CriadorPayload>
          }
          update: {
            args: Prisma.CriadorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CriadorPayload>
          }
          deleteMany: {
            args: Prisma.CriadorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CriadorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CriadorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CriadorPayload>
          }
          aggregate: {
            args: Prisma.CriadorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCriador>
          }
          groupBy: {
            args: Prisma.CriadorGroupByArgs<ExtArgs>
            result: $Utils.Optional<CriadorGroupByOutputType>[]
          }
          count: {
            args: Prisma.CriadorCountArgs<ExtArgs>
            result: $Utils.Optional<CriadorCountAggregateOutputType> | number
          }
        }
      }
      CandidaturaCriador: {
        payload: Prisma.$CandidaturaCriadorPayload<ExtArgs>
        fields: Prisma.CandidaturaCriadorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CandidaturaCriadorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidaturaCriadorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CandidaturaCriadorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidaturaCriadorPayload>
          }
          findFirst: {
            args: Prisma.CandidaturaCriadorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidaturaCriadorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CandidaturaCriadorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidaturaCriadorPayload>
          }
          findMany: {
            args: Prisma.CandidaturaCriadorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidaturaCriadorPayload>[]
          }
          create: {
            args: Prisma.CandidaturaCriadorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidaturaCriadorPayload>
          }
          createMany: {
            args: Prisma.CandidaturaCriadorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CandidaturaCriadorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidaturaCriadorPayload>[]
          }
          delete: {
            args: Prisma.CandidaturaCriadorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidaturaCriadorPayload>
          }
          update: {
            args: Prisma.CandidaturaCriadorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidaturaCriadorPayload>
          }
          deleteMany: {
            args: Prisma.CandidaturaCriadorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CandidaturaCriadorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CandidaturaCriadorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidaturaCriadorPayload>
          }
          aggregate: {
            args: Prisma.CandidaturaCriadorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCandidaturaCriador>
          }
          groupBy: {
            args: Prisma.CandidaturaCriadorGroupByArgs<ExtArgs>
            result: $Utils.Optional<CandidaturaCriadorGroupByOutputType>[]
          }
          count: {
            args: Prisma.CandidaturaCriadorCountArgs<ExtArgs>
            result: $Utils.Optional<CandidaturaCriadorCountAggregateOutputType> | number
          }
        }
      }
      LogAuditoria: {
        payload: Prisma.$LogAuditoriaPayload<ExtArgs>
        fields: Prisma.LogAuditoriaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LogAuditoriaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogAuditoriaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LogAuditoriaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogAuditoriaPayload>
          }
          findFirst: {
            args: Prisma.LogAuditoriaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogAuditoriaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LogAuditoriaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogAuditoriaPayload>
          }
          findMany: {
            args: Prisma.LogAuditoriaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogAuditoriaPayload>[]
          }
          create: {
            args: Prisma.LogAuditoriaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogAuditoriaPayload>
          }
          createMany: {
            args: Prisma.LogAuditoriaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LogAuditoriaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogAuditoriaPayload>[]
          }
          delete: {
            args: Prisma.LogAuditoriaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogAuditoriaPayload>
          }
          update: {
            args: Prisma.LogAuditoriaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogAuditoriaPayload>
          }
          deleteMany: {
            args: Prisma.LogAuditoriaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LogAuditoriaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LogAuditoriaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogAuditoriaPayload>
          }
          aggregate: {
            args: Prisma.LogAuditoriaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLogAuditoria>
          }
          groupBy: {
            args: Prisma.LogAuditoriaGroupByArgs<ExtArgs>
            result: $Utils.Optional<LogAuditoriaGroupByOutputType>[]
          }
          count: {
            args: Prisma.LogAuditoriaCountArgs<ExtArgs>
            result: $Utils.Optional<LogAuditoriaCountAggregateOutputType> | number
          }
        }
      }
      Parceiro: {
        payload: Prisma.$ParceiroPayload<ExtArgs>
        fields: Prisma.ParceiroFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ParceiroFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParceiroPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ParceiroFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParceiroPayload>
          }
          findFirst: {
            args: Prisma.ParceiroFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParceiroPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ParceiroFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParceiroPayload>
          }
          findMany: {
            args: Prisma.ParceiroFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParceiroPayload>[]
          }
          create: {
            args: Prisma.ParceiroCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParceiroPayload>
          }
          createMany: {
            args: Prisma.ParceiroCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ParceiroCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParceiroPayload>[]
          }
          delete: {
            args: Prisma.ParceiroDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParceiroPayload>
          }
          update: {
            args: Prisma.ParceiroUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParceiroPayload>
          }
          deleteMany: {
            args: Prisma.ParceiroDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ParceiroUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ParceiroUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParceiroPayload>
          }
          aggregate: {
            args: Prisma.ParceiroAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateParceiro>
          }
          groupBy: {
            args: Prisma.ParceiroGroupByArgs<ExtArgs>
            result: $Utils.Optional<ParceiroGroupByOutputType>[]
          }
          count: {
            args: Prisma.ParceiroCountArgs<ExtArgs>
            result: $Utils.Optional<ParceiroCountAggregateOutputType> | number
          }
        }
      }
      Semente: {
        payload: Prisma.$SementePayload<ExtArgs>
        fields: Prisma.SementeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SementeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SementePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SementeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SementePayload>
          }
          findFirst: {
            args: Prisma.SementeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SementePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SementeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SementePayload>
          }
          findMany: {
            args: Prisma.SementeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SementePayload>[]
          }
          create: {
            args: Prisma.SementeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SementePayload>
          }
          createMany: {
            args: Prisma.SementeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SementeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SementePayload>[]
          }
          delete: {
            args: Prisma.SementeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SementePayload>
          }
          update: {
            args: Prisma.SementeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SementePayload>
          }
          deleteMany: {
            args: Prisma.SementeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SementeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SementeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SementePayload>
          }
          aggregate: {
            args: Prisma.SementeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSemente>
          }
          groupBy: {
            args: Prisma.SementeGroupByArgs<ExtArgs>
            result: $Utils.Optional<SementeGroupByOutputType>[]
          }
          count: {
            args: Prisma.SementeCountArgs<ExtArgs>
            result: $Utils.Optional<SementeCountAggregateOutputType> | number
          }
        }
      }
      Doacao: {
        payload: Prisma.$DoacaoPayload<ExtArgs>
        fields: Prisma.DoacaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DoacaoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoacaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DoacaoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoacaoPayload>
          }
          findFirst: {
            args: Prisma.DoacaoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoacaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DoacaoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoacaoPayload>
          }
          findMany: {
            args: Prisma.DoacaoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoacaoPayload>[]
          }
          create: {
            args: Prisma.DoacaoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoacaoPayload>
          }
          createMany: {
            args: Prisma.DoacaoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DoacaoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoacaoPayload>[]
          }
          delete: {
            args: Prisma.DoacaoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoacaoPayload>
          }
          update: {
            args: Prisma.DoacaoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoacaoPayload>
          }
          deleteMany: {
            args: Prisma.DoacaoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DoacaoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DoacaoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoacaoPayload>
          }
          aggregate: {
            args: Prisma.DoacaoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDoacao>
          }
          groupBy: {
            args: Prisma.DoacaoGroupByArgs<ExtArgs>
            result: $Utils.Optional<DoacaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.DoacaoCountArgs<ExtArgs>
            result: $Utils.Optional<DoacaoCountAggregateOutputType> | number
          }
        }
      }
      Transacao: {
        payload: Prisma.$TransacaoPayload<ExtArgs>
        fields: Prisma.TransacaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransacaoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransacaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransacaoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransacaoPayload>
          }
          findFirst: {
            args: Prisma.TransacaoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransacaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransacaoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransacaoPayload>
          }
          findMany: {
            args: Prisma.TransacaoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransacaoPayload>[]
          }
          create: {
            args: Prisma.TransacaoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransacaoPayload>
          }
          createMany: {
            args: Prisma.TransacaoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TransacaoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransacaoPayload>[]
          }
          delete: {
            args: Prisma.TransacaoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransacaoPayload>
          }
          update: {
            args: Prisma.TransacaoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransacaoPayload>
          }
          deleteMany: {
            args: Prisma.TransacaoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransacaoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TransacaoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransacaoPayload>
          }
          aggregate: {
            args: Prisma.TransacaoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransacao>
          }
          groupBy: {
            args: Prisma.TransacaoGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransacaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransacaoCountArgs<ExtArgs>
            result: $Utils.Optional<TransacaoCountAggregateOutputType> | number
          }
        }
      }
      CodigoCashback: {
        payload: Prisma.$CodigoCashbackPayload<ExtArgs>
        fields: Prisma.CodigoCashbackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CodigoCashbackFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodigoCashbackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CodigoCashbackFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodigoCashbackPayload>
          }
          findFirst: {
            args: Prisma.CodigoCashbackFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodigoCashbackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CodigoCashbackFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodigoCashbackPayload>
          }
          findMany: {
            args: Prisma.CodigoCashbackFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodigoCashbackPayload>[]
          }
          create: {
            args: Prisma.CodigoCashbackCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodigoCashbackPayload>
          }
          createMany: {
            args: Prisma.CodigoCashbackCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CodigoCashbackCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodigoCashbackPayload>[]
          }
          delete: {
            args: Prisma.CodigoCashbackDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodigoCashbackPayload>
          }
          update: {
            args: Prisma.CodigoCashbackUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodigoCashbackPayload>
          }
          deleteMany: {
            args: Prisma.CodigoCashbackDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CodigoCashbackUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CodigoCashbackUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodigoCashbackPayload>
          }
          aggregate: {
            args: Prisma.CodigoCashbackAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCodigoCashback>
          }
          groupBy: {
            args: Prisma.CodigoCashbackGroupByArgs<ExtArgs>
            result: $Utils.Optional<CodigoCashbackGroupByOutputType>[]
          }
          count: {
            args: Prisma.CodigoCashbackCountArgs<ExtArgs>
            result: $Utils.Optional<CodigoCashbackCountAggregateOutputType> | number
          }
        }
      }
      Notificacao: {
        payload: Prisma.$NotificacaoPayload<ExtArgs>
        fields: Prisma.NotificacaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificacaoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificacaoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoPayload>
          }
          findFirst: {
            args: Prisma.NotificacaoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificacaoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoPayload>
          }
          findMany: {
            args: Prisma.NotificacaoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoPayload>[]
          }
          create: {
            args: Prisma.NotificacaoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoPayload>
          }
          createMany: {
            args: Prisma.NotificacaoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificacaoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoPayload>[]
          }
          delete: {
            args: Prisma.NotificacaoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoPayload>
          }
          update: {
            args: Prisma.NotificacaoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoPayload>
          }
          deleteMany: {
            args: Prisma.NotificacaoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificacaoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificacaoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoPayload>
          }
          aggregate: {
            args: Prisma.NotificacaoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotificacao>
          }
          groupBy: {
            args: Prisma.NotificacaoGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificacaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificacaoCountArgs<ExtArgs>
            result: $Utils.Optional<NotificacaoCountAggregateOutputType> | number
          }
        }
      }
      TokenRecuperacao: {
        payload: Prisma.$TokenRecuperacaoPayload<ExtArgs>
        fields: Prisma.TokenRecuperacaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TokenRecuperacaoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenRecuperacaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TokenRecuperacaoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenRecuperacaoPayload>
          }
          findFirst: {
            args: Prisma.TokenRecuperacaoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenRecuperacaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TokenRecuperacaoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenRecuperacaoPayload>
          }
          findMany: {
            args: Prisma.TokenRecuperacaoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenRecuperacaoPayload>[]
          }
          create: {
            args: Prisma.TokenRecuperacaoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenRecuperacaoPayload>
          }
          createMany: {
            args: Prisma.TokenRecuperacaoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TokenRecuperacaoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenRecuperacaoPayload>[]
          }
          delete: {
            args: Prisma.TokenRecuperacaoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenRecuperacaoPayload>
          }
          update: {
            args: Prisma.TokenRecuperacaoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenRecuperacaoPayload>
          }
          deleteMany: {
            args: Prisma.TokenRecuperacaoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TokenRecuperacaoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TokenRecuperacaoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenRecuperacaoPayload>
          }
          aggregate: {
            args: Prisma.TokenRecuperacaoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTokenRecuperacao>
          }
          groupBy: {
            args: Prisma.TokenRecuperacaoGroupByArgs<ExtArgs>
            result: $Utils.Optional<TokenRecuperacaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.TokenRecuperacaoCountArgs<ExtArgs>
            result: $Utils.Optional<TokenRecuperacaoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    sementesHistorico: number
    doacoesFeitas: number
    transacoes: number
    notificacoes: number
    candidaturas: number
    logsAuditoria: number
    saques: number
    pagamentos: number
    tokensRecuperacao: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sementesHistorico?: boolean | UsuarioCountOutputTypeCountSementesHistoricoArgs
    doacoesFeitas?: boolean | UsuarioCountOutputTypeCountDoacoesFeitasArgs
    transacoes?: boolean | UsuarioCountOutputTypeCountTransacoesArgs
    notificacoes?: boolean | UsuarioCountOutputTypeCountNotificacoesArgs
    candidaturas?: boolean | UsuarioCountOutputTypeCountCandidaturasArgs
    logsAuditoria?: boolean | UsuarioCountOutputTypeCountLogsAuditoriaArgs
    saques?: boolean | UsuarioCountOutputTypeCountSaquesArgs
    pagamentos?: boolean | UsuarioCountOutputTypeCountPagamentosArgs
    tokensRecuperacao?: boolean | UsuarioCountOutputTypeCountTokensRecuperacaoArgs
  }

  // Custom InputTypes
  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountSementesHistoricoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SementeWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountDoacoesFeitasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoacaoWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountTransacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransacaoWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountNotificacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificacaoWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountCandidaturasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidaturaCriadorWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountLogsAuditoriaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogAuditoriaWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountSaquesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SaqueWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountPagamentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PagamentoWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountTokensRecuperacaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TokenRecuperacaoWhereInput
  }


  /**
   * Count Type CarteiraDigitalCountOutputType
   */

  export type CarteiraDigitalCountOutputType = {
    movimentacoes: number
  }

  export type CarteiraDigitalCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    movimentacoes?: boolean | CarteiraDigitalCountOutputTypeCountMovimentacoesArgs
  }

  // Custom InputTypes
  /**
   * CarteiraDigitalCountOutputType without action
   */
  export type CarteiraDigitalCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarteiraDigitalCountOutputType
     */
    select?: CarteiraDigitalCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CarteiraDigitalCountOutputType without action
   */
  export type CarteiraDigitalCountOutputTypeCountMovimentacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MovimentacaoCarteiraWhereInput
  }


  /**
   * Count Type CriadorCountOutputType
   */

  export type CriadorCountOutputType = {
    doacoesRecebidas: number
  }

  export type CriadorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doacoesRecebidas?: boolean | CriadorCountOutputTypeCountDoacoesRecebidasArgs
  }

  // Custom InputTypes
  /**
   * CriadorCountOutputType without action
   */
  export type CriadorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CriadorCountOutputType
     */
    select?: CriadorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CriadorCountOutputType without action
   */
  export type CriadorCountOutputTypeCountDoacoesRecebidasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoacaoWhereInput
  }


  /**
   * Count Type ParceiroCountOutputType
   */

  export type ParceiroCountOutputType = {
    codigosCashback: number
  }

  export type ParceiroCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    codigosCashback?: boolean | ParceiroCountOutputTypeCountCodigosCashbackArgs
  }

  // Custom InputTypes
  /**
   * ParceiroCountOutputType without action
   */
  export type ParceiroCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParceiroCountOutputType
     */
    select?: ParceiroCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ParceiroCountOutputType without action
   */
  export type ParceiroCountOutputTypeCountCodigosCashbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CodigoCashbackWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    sementes: number | null
    pontuacao: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    sementes: number | null
    pontuacao: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: string | null
    nome: string | null
    email: string | null
    senha: string | null
    tipo: string | null
    sementes: number | null
    nivel: string | null
    pontuacao: number | null
    dataCriacao: Date | null
    dataAtualizacao: Date | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    email: string | null
    senha: string | null
    tipo: string | null
    sementes: number | null
    nivel: string | null
    pontuacao: number | null
    dataCriacao: Date | null
    dataAtualizacao: Date | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    senha: number
    tipo: number
    sementes: number
    nivel: number
    pontuacao: number
    dataCriacao: number
    dataAtualizacao: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    sementes?: true
    pontuacao?: true
  }

  export type UsuarioSumAggregateInputType = {
    sementes?: true
    pontuacao?: true
  }

  export type UsuarioMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    tipo?: true
    sementes?: true
    nivel?: true
    pontuacao?: true
    dataCriacao?: true
    dataAtualizacao?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    tipo?: true
    sementes?: true
    nivel?: true
    pontuacao?: true
    dataCriacao?: true
    dataAtualizacao?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    tipo?: true
    sementes?: true
    nivel?: true
    pontuacao?: true
    dataCriacao?: true
    dataAtualizacao?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: string
    nome: string
    email: string
    senha: string
    tipo: string
    sementes: number
    nivel: string
    pontuacao: number
    dataCriacao: Date
    dataAtualizacao: Date
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    tipo?: boolean
    sementes?: boolean
    nivel?: boolean
    pontuacao?: boolean
    dataCriacao?: boolean
    dataAtualizacao?: boolean
    criador?: boolean | Usuario$criadorArgs<ExtArgs>
    parceiro?: boolean | Usuario$parceiroArgs<ExtArgs>
    sementesHistorico?: boolean | Usuario$sementesHistoricoArgs<ExtArgs>
    doacoesFeitas?: boolean | Usuario$doacoesFeitasArgs<ExtArgs>
    transacoes?: boolean | Usuario$transacoesArgs<ExtArgs>
    notificacoes?: boolean | Usuario$notificacoesArgs<ExtArgs>
    candidaturas?: boolean | Usuario$candidaturasArgs<ExtArgs>
    logsAuditoria?: boolean | Usuario$logsAuditoriaArgs<ExtArgs>
    carteira?: boolean | Usuario$carteiraArgs<ExtArgs>
    dadosBancarios?: boolean | Usuario$dadosBancariosArgs<ExtArgs>
    saques?: boolean | Usuario$saquesArgs<ExtArgs>
    pagamentos?: boolean | Usuario$pagamentosArgs<ExtArgs>
    tokensRecuperacao?: boolean | Usuario$tokensRecuperacaoArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    tipo?: boolean
    sementes?: boolean
    nivel?: boolean
    pontuacao?: boolean
    dataCriacao?: boolean
    dataAtualizacao?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    tipo?: boolean
    sementes?: boolean
    nivel?: boolean
    pontuacao?: boolean
    dataCriacao?: boolean
    dataAtualizacao?: boolean
  }

  export type UsuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    criador?: boolean | Usuario$criadorArgs<ExtArgs>
    parceiro?: boolean | Usuario$parceiroArgs<ExtArgs>
    sementesHistorico?: boolean | Usuario$sementesHistoricoArgs<ExtArgs>
    doacoesFeitas?: boolean | Usuario$doacoesFeitasArgs<ExtArgs>
    transacoes?: boolean | Usuario$transacoesArgs<ExtArgs>
    notificacoes?: boolean | Usuario$notificacoesArgs<ExtArgs>
    candidaturas?: boolean | Usuario$candidaturasArgs<ExtArgs>
    logsAuditoria?: boolean | Usuario$logsAuditoriaArgs<ExtArgs>
    carteira?: boolean | Usuario$carteiraArgs<ExtArgs>
    dadosBancarios?: boolean | Usuario$dadosBancariosArgs<ExtArgs>
    saques?: boolean | Usuario$saquesArgs<ExtArgs>
    pagamentos?: boolean | Usuario$pagamentosArgs<ExtArgs>
    tokensRecuperacao?: boolean | Usuario$tokensRecuperacaoArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsuarioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {
      criador: Prisma.$CriadorPayload<ExtArgs> | null
      parceiro: Prisma.$ParceiroPayload<ExtArgs> | null
      sementesHistorico: Prisma.$SementePayload<ExtArgs>[]
      doacoesFeitas: Prisma.$DoacaoPayload<ExtArgs>[]
      transacoes: Prisma.$TransacaoPayload<ExtArgs>[]
      notificacoes: Prisma.$NotificacaoPayload<ExtArgs>[]
      candidaturas: Prisma.$CandidaturaCriadorPayload<ExtArgs>[]
      logsAuditoria: Prisma.$LogAuditoriaPayload<ExtArgs>[]
      carteira: Prisma.$CarteiraDigitalPayload<ExtArgs> | null
      dadosBancarios: Prisma.$DadosBancariosPayload<ExtArgs> | null
      saques: Prisma.$SaquePayload<ExtArgs>[]
      pagamentos: Prisma.$PagamentoPayload<ExtArgs>[]
      tokensRecuperacao: Prisma.$TokenRecuperacaoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
      email: string
      senha: string
      tipo: string
      sementes: number
      nivel: string
      pontuacao: number
      dataCriacao: Date
      dataAtualizacao: Date
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuarioFindUniqueArgs>(args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuarioFindFirstArgs>(args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsuarioFindManyArgs>(args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
     */
    create<T extends UsuarioCreateArgs>(args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Usuarios.
     * @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuarioCreateManyArgs>(args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usuarios and returns the data saved in the database.
     * @param {UsuarioCreateManyAndReturnArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsuarioCreateManyAndReturnArgs>(args?: SelectSubset<T, UsuarioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
     */
    delete<T extends UsuarioDeleteArgs>(args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuarioUpdateArgs>(args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuarioDeleteManyArgs>(args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuarioUpdateManyArgs>(args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
     */
    upsert<T extends UsuarioUpsertArgs>(args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    criador<T extends Usuario$criadorArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$criadorArgs<ExtArgs>>): Prisma__CriadorClient<$Result.GetResult<Prisma.$CriadorPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    parceiro<T extends Usuario$parceiroArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$parceiroArgs<ExtArgs>>): Prisma__ParceiroClient<$Result.GetResult<Prisma.$ParceiroPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    sementesHistorico<T extends Usuario$sementesHistoricoArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$sementesHistoricoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SementePayload<ExtArgs>, T, "findMany"> | Null>
    doacoesFeitas<T extends Usuario$doacoesFeitasArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$doacoesFeitasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoacaoPayload<ExtArgs>, T, "findMany"> | Null>
    transacoes<T extends Usuario$transacoesArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$transacoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransacaoPayload<ExtArgs>, T, "findMany"> | Null>
    notificacoes<T extends Usuario$notificacoesArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$notificacoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificacaoPayload<ExtArgs>, T, "findMany"> | Null>
    candidaturas<T extends Usuario$candidaturasArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$candidaturasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidaturaCriadorPayload<ExtArgs>, T, "findMany"> | Null>
    logsAuditoria<T extends Usuario$logsAuditoriaArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$logsAuditoriaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogAuditoriaPayload<ExtArgs>, T, "findMany"> | Null>
    carteira<T extends Usuario$carteiraArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$carteiraArgs<ExtArgs>>): Prisma__CarteiraDigitalClient<$Result.GetResult<Prisma.$CarteiraDigitalPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    dadosBancarios<T extends Usuario$dadosBancariosArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$dadosBancariosArgs<ExtArgs>>): Prisma__DadosBancariosClient<$Result.GetResult<Prisma.$DadosBancariosPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    saques<T extends Usuario$saquesArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$saquesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SaquePayload<ExtArgs>, T, "findMany"> | Null>
    pagamentos<T extends Usuario$pagamentosArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$pagamentosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PagamentoPayload<ExtArgs>, T, "findMany"> | Null>
    tokensRecuperacao<T extends Usuario$tokensRecuperacaoArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$tokensRecuperacaoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenRecuperacaoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuario model
   */ 
  interface UsuarioFieldRefs {
    readonly id: FieldRef<"Usuario", 'String'>
    readonly nome: FieldRef<"Usuario", 'String'>
    readonly email: FieldRef<"Usuario", 'String'>
    readonly senha: FieldRef<"Usuario", 'String'>
    readonly tipo: FieldRef<"Usuario", 'String'>
    readonly sementes: FieldRef<"Usuario", 'Int'>
    readonly nivel: FieldRef<"Usuario", 'String'>
    readonly pontuacao: FieldRef<"Usuario", 'Int'>
    readonly dataCriacao: FieldRef<"Usuario", 'DateTime'>
    readonly dataAtualizacao: FieldRef<"Usuario", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }

  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
  }

  /**
   * Usuario createManyAndReturn
   */
  export type UsuarioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
  }

  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
  }

  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }

  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
  }

  /**
   * Usuario.criador
   */
  export type Usuario$criadorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Criador
     */
    select?: CriadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CriadorInclude<ExtArgs> | null
    where?: CriadorWhereInput
  }

  /**
   * Usuario.parceiro
   */
  export type Usuario$parceiroArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parceiro
     */
    select?: ParceiroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParceiroInclude<ExtArgs> | null
    where?: ParceiroWhereInput
  }

  /**
   * Usuario.sementesHistorico
   */
  export type Usuario$sementesHistoricoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semente
     */
    select?: SementeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SementeInclude<ExtArgs> | null
    where?: SementeWhereInput
    orderBy?: SementeOrderByWithRelationInput | SementeOrderByWithRelationInput[]
    cursor?: SementeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SementeScalarFieldEnum | SementeScalarFieldEnum[]
  }

  /**
   * Usuario.doacoesFeitas
   */
  export type Usuario$doacoesFeitasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doacao
     */
    select?: DoacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoacaoInclude<ExtArgs> | null
    where?: DoacaoWhereInput
    orderBy?: DoacaoOrderByWithRelationInput | DoacaoOrderByWithRelationInput[]
    cursor?: DoacaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoacaoScalarFieldEnum | DoacaoScalarFieldEnum[]
  }

  /**
   * Usuario.transacoes
   */
  export type Usuario$transacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transacao
     */
    select?: TransacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransacaoInclude<ExtArgs> | null
    where?: TransacaoWhereInput
    orderBy?: TransacaoOrderByWithRelationInput | TransacaoOrderByWithRelationInput[]
    cursor?: TransacaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransacaoScalarFieldEnum | TransacaoScalarFieldEnum[]
  }

  /**
   * Usuario.notificacoes
   */
  export type Usuario$notificacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoInclude<ExtArgs> | null
    where?: NotificacaoWhereInput
    orderBy?: NotificacaoOrderByWithRelationInput | NotificacaoOrderByWithRelationInput[]
    cursor?: NotificacaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificacaoScalarFieldEnum | NotificacaoScalarFieldEnum[]
  }

  /**
   * Usuario.candidaturas
   */
  export type Usuario$candidaturasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidaturaCriador
     */
    select?: CandidaturaCriadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidaturaCriadorInclude<ExtArgs> | null
    where?: CandidaturaCriadorWhereInput
    orderBy?: CandidaturaCriadorOrderByWithRelationInput | CandidaturaCriadorOrderByWithRelationInput[]
    cursor?: CandidaturaCriadorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CandidaturaCriadorScalarFieldEnum | CandidaturaCriadorScalarFieldEnum[]
  }

  /**
   * Usuario.logsAuditoria
   */
  export type Usuario$logsAuditoriaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogAuditoria
     */
    select?: LogAuditoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogAuditoriaInclude<ExtArgs> | null
    where?: LogAuditoriaWhereInput
    orderBy?: LogAuditoriaOrderByWithRelationInput | LogAuditoriaOrderByWithRelationInput[]
    cursor?: LogAuditoriaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogAuditoriaScalarFieldEnum | LogAuditoriaScalarFieldEnum[]
  }

  /**
   * Usuario.carteira
   */
  export type Usuario$carteiraArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarteiraDigital
     */
    select?: CarteiraDigitalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarteiraDigitalInclude<ExtArgs> | null
    where?: CarteiraDigitalWhereInput
  }

  /**
   * Usuario.dadosBancarios
   */
  export type Usuario$dadosBancariosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DadosBancarios
     */
    select?: DadosBancariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DadosBancariosInclude<ExtArgs> | null
    where?: DadosBancariosWhereInput
  }

  /**
   * Usuario.saques
   */
  export type Usuario$saquesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Saque
     */
    select?: SaqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaqueInclude<ExtArgs> | null
    where?: SaqueWhereInput
    orderBy?: SaqueOrderByWithRelationInput | SaqueOrderByWithRelationInput[]
    cursor?: SaqueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SaqueScalarFieldEnum | SaqueScalarFieldEnum[]
  }

  /**
   * Usuario.pagamentos
   */
  export type Usuario$pagamentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagamentoInclude<ExtArgs> | null
    where?: PagamentoWhereInput
    orderBy?: PagamentoOrderByWithRelationInput | PagamentoOrderByWithRelationInput[]
    cursor?: PagamentoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PagamentoScalarFieldEnum | PagamentoScalarFieldEnum[]
  }

  /**
   * Usuario.tokensRecuperacao
   */
  export type Usuario$tokensRecuperacaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenRecuperacao
     */
    select?: TokenRecuperacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenRecuperacaoInclude<ExtArgs> | null
    where?: TokenRecuperacaoWhereInput
    orderBy?: TokenRecuperacaoOrderByWithRelationInput | TokenRecuperacaoOrderByWithRelationInput[]
    cursor?: TokenRecuperacaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TokenRecuperacaoScalarFieldEnum | TokenRecuperacaoScalarFieldEnum[]
  }

  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
  }


  /**
   * Model CarteiraDigital
   */

  export type AggregateCarteiraDigital = {
    _count: CarteiraDigitalCountAggregateOutputType | null
    _avg: CarteiraDigitalAvgAggregateOutputType | null
    _sum: CarteiraDigitalSumAggregateOutputType | null
    _min: CarteiraDigitalMinAggregateOutputType | null
    _max: CarteiraDigitalMaxAggregateOutputType | null
  }

  export type CarteiraDigitalAvgAggregateOutputType = {
    saldo: number | null
    saldoPendente: number | null
    totalRecebido: number | null
    totalSacado: number | null
  }

  export type CarteiraDigitalSumAggregateOutputType = {
    saldo: number | null
    saldoPendente: number | null
    totalRecebido: number | null
    totalSacado: number | null
  }

  export type CarteiraDigitalMinAggregateOutputType = {
    id: string | null
    usuarioId: string | null
    saldo: number | null
    saldoPendente: number | null
    totalRecebido: number | null
    totalSacado: number | null
    dataCriacao: Date | null
    dataAtualizacao: Date | null
  }

  export type CarteiraDigitalMaxAggregateOutputType = {
    id: string | null
    usuarioId: string | null
    saldo: number | null
    saldoPendente: number | null
    totalRecebido: number | null
    totalSacado: number | null
    dataCriacao: Date | null
    dataAtualizacao: Date | null
  }

  export type CarteiraDigitalCountAggregateOutputType = {
    id: number
    usuarioId: number
    saldo: number
    saldoPendente: number
    totalRecebido: number
    totalSacado: number
    dataCriacao: number
    dataAtualizacao: number
    _all: number
  }


  export type CarteiraDigitalAvgAggregateInputType = {
    saldo?: true
    saldoPendente?: true
    totalRecebido?: true
    totalSacado?: true
  }

  export type CarteiraDigitalSumAggregateInputType = {
    saldo?: true
    saldoPendente?: true
    totalRecebido?: true
    totalSacado?: true
  }

  export type CarteiraDigitalMinAggregateInputType = {
    id?: true
    usuarioId?: true
    saldo?: true
    saldoPendente?: true
    totalRecebido?: true
    totalSacado?: true
    dataCriacao?: true
    dataAtualizacao?: true
  }

  export type CarteiraDigitalMaxAggregateInputType = {
    id?: true
    usuarioId?: true
    saldo?: true
    saldoPendente?: true
    totalRecebido?: true
    totalSacado?: true
    dataCriacao?: true
    dataAtualizacao?: true
  }

  export type CarteiraDigitalCountAggregateInputType = {
    id?: true
    usuarioId?: true
    saldo?: true
    saldoPendente?: true
    totalRecebido?: true
    totalSacado?: true
    dataCriacao?: true
    dataAtualizacao?: true
    _all?: true
  }

  export type CarteiraDigitalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CarteiraDigital to aggregate.
     */
    where?: CarteiraDigitalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarteiraDigitals to fetch.
     */
    orderBy?: CarteiraDigitalOrderByWithRelationInput | CarteiraDigitalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CarteiraDigitalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarteiraDigitals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarteiraDigitals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CarteiraDigitals
    **/
    _count?: true | CarteiraDigitalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CarteiraDigitalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CarteiraDigitalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CarteiraDigitalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CarteiraDigitalMaxAggregateInputType
  }

  export type GetCarteiraDigitalAggregateType<T extends CarteiraDigitalAggregateArgs> = {
        [P in keyof T & keyof AggregateCarteiraDigital]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCarteiraDigital[P]>
      : GetScalarType<T[P], AggregateCarteiraDigital[P]>
  }




  export type CarteiraDigitalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CarteiraDigitalWhereInput
    orderBy?: CarteiraDigitalOrderByWithAggregationInput | CarteiraDigitalOrderByWithAggregationInput[]
    by: CarteiraDigitalScalarFieldEnum[] | CarteiraDigitalScalarFieldEnum
    having?: CarteiraDigitalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CarteiraDigitalCountAggregateInputType | true
    _avg?: CarteiraDigitalAvgAggregateInputType
    _sum?: CarteiraDigitalSumAggregateInputType
    _min?: CarteiraDigitalMinAggregateInputType
    _max?: CarteiraDigitalMaxAggregateInputType
  }

  export type CarteiraDigitalGroupByOutputType = {
    id: string
    usuarioId: string
    saldo: number
    saldoPendente: number
    totalRecebido: number
    totalSacado: number
    dataCriacao: Date
    dataAtualizacao: Date
    _count: CarteiraDigitalCountAggregateOutputType | null
    _avg: CarteiraDigitalAvgAggregateOutputType | null
    _sum: CarteiraDigitalSumAggregateOutputType | null
    _min: CarteiraDigitalMinAggregateOutputType | null
    _max: CarteiraDigitalMaxAggregateOutputType | null
  }

  type GetCarteiraDigitalGroupByPayload<T extends CarteiraDigitalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CarteiraDigitalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CarteiraDigitalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CarteiraDigitalGroupByOutputType[P]>
            : GetScalarType<T[P], CarteiraDigitalGroupByOutputType[P]>
        }
      >
    >


  export type CarteiraDigitalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    saldo?: boolean
    saldoPendente?: boolean
    totalRecebido?: boolean
    totalSacado?: boolean
    dataCriacao?: boolean
    dataAtualizacao?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    movimentacoes?: boolean | CarteiraDigital$movimentacoesArgs<ExtArgs>
    _count?: boolean | CarteiraDigitalCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["carteiraDigital"]>

  export type CarteiraDigitalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    saldo?: boolean
    saldoPendente?: boolean
    totalRecebido?: boolean
    totalSacado?: boolean
    dataCriacao?: boolean
    dataAtualizacao?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["carteiraDigital"]>

  export type CarteiraDigitalSelectScalar = {
    id?: boolean
    usuarioId?: boolean
    saldo?: boolean
    saldoPendente?: boolean
    totalRecebido?: boolean
    totalSacado?: boolean
    dataCriacao?: boolean
    dataAtualizacao?: boolean
  }

  export type CarteiraDigitalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    movimentacoes?: boolean | CarteiraDigital$movimentacoesArgs<ExtArgs>
    _count?: boolean | CarteiraDigitalCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CarteiraDigitalIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $CarteiraDigitalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CarteiraDigital"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
      movimentacoes: Prisma.$MovimentacaoCarteiraPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      usuarioId: string
      saldo: number
      saldoPendente: number
      totalRecebido: number
      totalSacado: number
      dataCriacao: Date
      dataAtualizacao: Date
    }, ExtArgs["result"]["carteiraDigital"]>
    composites: {}
  }

  type CarteiraDigitalGetPayload<S extends boolean | null | undefined | CarteiraDigitalDefaultArgs> = $Result.GetResult<Prisma.$CarteiraDigitalPayload, S>

  type CarteiraDigitalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CarteiraDigitalFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CarteiraDigitalCountAggregateInputType | true
    }

  export interface CarteiraDigitalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CarteiraDigital'], meta: { name: 'CarteiraDigital' } }
    /**
     * Find zero or one CarteiraDigital that matches the filter.
     * @param {CarteiraDigitalFindUniqueArgs} args - Arguments to find a CarteiraDigital
     * @example
     * // Get one CarteiraDigital
     * const carteiraDigital = await prisma.carteiraDigital.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CarteiraDigitalFindUniqueArgs>(args: SelectSubset<T, CarteiraDigitalFindUniqueArgs<ExtArgs>>): Prisma__CarteiraDigitalClient<$Result.GetResult<Prisma.$CarteiraDigitalPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CarteiraDigital that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CarteiraDigitalFindUniqueOrThrowArgs} args - Arguments to find a CarteiraDigital
     * @example
     * // Get one CarteiraDigital
     * const carteiraDigital = await prisma.carteiraDigital.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CarteiraDigitalFindUniqueOrThrowArgs>(args: SelectSubset<T, CarteiraDigitalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CarteiraDigitalClient<$Result.GetResult<Prisma.$CarteiraDigitalPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CarteiraDigital that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarteiraDigitalFindFirstArgs} args - Arguments to find a CarteiraDigital
     * @example
     * // Get one CarteiraDigital
     * const carteiraDigital = await prisma.carteiraDigital.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CarteiraDigitalFindFirstArgs>(args?: SelectSubset<T, CarteiraDigitalFindFirstArgs<ExtArgs>>): Prisma__CarteiraDigitalClient<$Result.GetResult<Prisma.$CarteiraDigitalPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CarteiraDigital that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarteiraDigitalFindFirstOrThrowArgs} args - Arguments to find a CarteiraDigital
     * @example
     * // Get one CarteiraDigital
     * const carteiraDigital = await prisma.carteiraDigital.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CarteiraDigitalFindFirstOrThrowArgs>(args?: SelectSubset<T, CarteiraDigitalFindFirstOrThrowArgs<ExtArgs>>): Prisma__CarteiraDigitalClient<$Result.GetResult<Prisma.$CarteiraDigitalPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CarteiraDigitals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarteiraDigitalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CarteiraDigitals
     * const carteiraDigitals = await prisma.carteiraDigital.findMany()
     * 
     * // Get first 10 CarteiraDigitals
     * const carteiraDigitals = await prisma.carteiraDigital.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const carteiraDigitalWithIdOnly = await prisma.carteiraDigital.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CarteiraDigitalFindManyArgs>(args?: SelectSubset<T, CarteiraDigitalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarteiraDigitalPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CarteiraDigital.
     * @param {CarteiraDigitalCreateArgs} args - Arguments to create a CarteiraDigital.
     * @example
     * // Create one CarteiraDigital
     * const CarteiraDigital = await prisma.carteiraDigital.create({
     *   data: {
     *     // ... data to create a CarteiraDigital
     *   }
     * })
     * 
     */
    create<T extends CarteiraDigitalCreateArgs>(args: SelectSubset<T, CarteiraDigitalCreateArgs<ExtArgs>>): Prisma__CarteiraDigitalClient<$Result.GetResult<Prisma.$CarteiraDigitalPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CarteiraDigitals.
     * @param {CarteiraDigitalCreateManyArgs} args - Arguments to create many CarteiraDigitals.
     * @example
     * // Create many CarteiraDigitals
     * const carteiraDigital = await prisma.carteiraDigital.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CarteiraDigitalCreateManyArgs>(args?: SelectSubset<T, CarteiraDigitalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CarteiraDigitals and returns the data saved in the database.
     * @param {CarteiraDigitalCreateManyAndReturnArgs} args - Arguments to create many CarteiraDigitals.
     * @example
     * // Create many CarteiraDigitals
     * const carteiraDigital = await prisma.carteiraDigital.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CarteiraDigitals and only return the `id`
     * const carteiraDigitalWithIdOnly = await prisma.carteiraDigital.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CarteiraDigitalCreateManyAndReturnArgs>(args?: SelectSubset<T, CarteiraDigitalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarteiraDigitalPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CarteiraDigital.
     * @param {CarteiraDigitalDeleteArgs} args - Arguments to delete one CarteiraDigital.
     * @example
     * // Delete one CarteiraDigital
     * const CarteiraDigital = await prisma.carteiraDigital.delete({
     *   where: {
     *     // ... filter to delete one CarteiraDigital
     *   }
     * })
     * 
     */
    delete<T extends CarteiraDigitalDeleteArgs>(args: SelectSubset<T, CarteiraDigitalDeleteArgs<ExtArgs>>): Prisma__CarteiraDigitalClient<$Result.GetResult<Prisma.$CarteiraDigitalPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CarteiraDigital.
     * @param {CarteiraDigitalUpdateArgs} args - Arguments to update one CarteiraDigital.
     * @example
     * // Update one CarteiraDigital
     * const carteiraDigital = await prisma.carteiraDigital.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CarteiraDigitalUpdateArgs>(args: SelectSubset<T, CarteiraDigitalUpdateArgs<ExtArgs>>): Prisma__CarteiraDigitalClient<$Result.GetResult<Prisma.$CarteiraDigitalPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CarteiraDigitals.
     * @param {CarteiraDigitalDeleteManyArgs} args - Arguments to filter CarteiraDigitals to delete.
     * @example
     * // Delete a few CarteiraDigitals
     * const { count } = await prisma.carteiraDigital.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CarteiraDigitalDeleteManyArgs>(args?: SelectSubset<T, CarteiraDigitalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CarteiraDigitals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarteiraDigitalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CarteiraDigitals
     * const carteiraDigital = await prisma.carteiraDigital.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CarteiraDigitalUpdateManyArgs>(args: SelectSubset<T, CarteiraDigitalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CarteiraDigital.
     * @param {CarteiraDigitalUpsertArgs} args - Arguments to update or create a CarteiraDigital.
     * @example
     * // Update or create a CarteiraDigital
     * const carteiraDigital = await prisma.carteiraDigital.upsert({
     *   create: {
     *     // ... data to create a CarteiraDigital
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CarteiraDigital we want to update
     *   }
     * })
     */
    upsert<T extends CarteiraDigitalUpsertArgs>(args: SelectSubset<T, CarteiraDigitalUpsertArgs<ExtArgs>>): Prisma__CarteiraDigitalClient<$Result.GetResult<Prisma.$CarteiraDigitalPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CarteiraDigitals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarteiraDigitalCountArgs} args - Arguments to filter CarteiraDigitals to count.
     * @example
     * // Count the number of CarteiraDigitals
     * const count = await prisma.carteiraDigital.count({
     *   where: {
     *     // ... the filter for the CarteiraDigitals we want to count
     *   }
     * })
    **/
    count<T extends CarteiraDigitalCountArgs>(
      args?: Subset<T, CarteiraDigitalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CarteiraDigitalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CarteiraDigital.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarteiraDigitalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CarteiraDigitalAggregateArgs>(args: Subset<T, CarteiraDigitalAggregateArgs>): Prisma.PrismaPromise<GetCarteiraDigitalAggregateType<T>>

    /**
     * Group by CarteiraDigital.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarteiraDigitalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CarteiraDigitalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CarteiraDigitalGroupByArgs['orderBy'] }
        : { orderBy?: CarteiraDigitalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CarteiraDigitalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarteiraDigitalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CarteiraDigital model
   */
  readonly fields: CarteiraDigitalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CarteiraDigital.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CarteiraDigitalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    movimentacoes<T extends CarteiraDigital$movimentacoesArgs<ExtArgs> = {}>(args?: Subset<T, CarteiraDigital$movimentacoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovimentacaoCarteiraPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CarteiraDigital model
   */ 
  interface CarteiraDigitalFieldRefs {
    readonly id: FieldRef<"CarteiraDigital", 'String'>
    readonly usuarioId: FieldRef<"CarteiraDigital", 'String'>
    readonly saldo: FieldRef<"CarteiraDigital", 'Float'>
    readonly saldoPendente: FieldRef<"CarteiraDigital", 'Float'>
    readonly totalRecebido: FieldRef<"CarteiraDigital", 'Float'>
    readonly totalSacado: FieldRef<"CarteiraDigital", 'Float'>
    readonly dataCriacao: FieldRef<"CarteiraDigital", 'DateTime'>
    readonly dataAtualizacao: FieldRef<"CarteiraDigital", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CarteiraDigital findUnique
   */
  export type CarteiraDigitalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarteiraDigital
     */
    select?: CarteiraDigitalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarteiraDigitalInclude<ExtArgs> | null
    /**
     * Filter, which CarteiraDigital to fetch.
     */
    where: CarteiraDigitalWhereUniqueInput
  }

  /**
   * CarteiraDigital findUniqueOrThrow
   */
  export type CarteiraDigitalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarteiraDigital
     */
    select?: CarteiraDigitalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarteiraDigitalInclude<ExtArgs> | null
    /**
     * Filter, which CarteiraDigital to fetch.
     */
    where: CarteiraDigitalWhereUniqueInput
  }

  /**
   * CarteiraDigital findFirst
   */
  export type CarteiraDigitalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarteiraDigital
     */
    select?: CarteiraDigitalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarteiraDigitalInclude<ExtArgs> | null
    /**
     * Filter, which CarteiraDigital to fetch.
     */
    where?: CarteiraDigitalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarteiraDigitals to fetch.
     */
    orderBy?: CarteiraDigitalOrderByWithRelationInput | CarteiraDigitalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CarteiraDigitals.
     */
    cursor?: CarteiraDigitalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarteiraDigitals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarteiraDigitals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CarteiraDigitals.
     */
    distinct?: CarteiraDigitalScalarFieldEnum | CarteiraDigitalScalarFieldEnum[]
  }

  /**
   * CarteiraDigital findFirstOrThrow
   */
  export type CarteiraDigitalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarteiraDigital
     */
    select?: CarteiraDigitalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarteiraDigitalInclude<ExtArgs> | null
    /**
     * Filter, which CarteiraDigital to fetch.
     */
    where?: CarteiraDigitalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarteiraDigitals to fetch.
     */
    orderBy?: CarteiraDigitalOrderByWithRelationInput | CarteiraDigitalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CarteiraDigitals.
     */
    cursor?: CarteiraDigitalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarteiraDigitals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarteiraDigitals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CarteiraDigitals.
     */
    distinct?: CarteiraDigitalScalarFieldEnum | CarteiraDigitalScalarFieldEnum[]
  }

  /**
   * CarteiraDigital findMany
   */
  export type CarteiraDigitalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarteiraDigital
     */
    select?: CarteiraDigitalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarteiraDigitalInclude<ExtArgs> | null
    /**
     * Filter, which CarteiraDigitals to fetch.
     */
    where?: CarteiraDigitalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarteiraDigitals to fetch.
     */
    orderBy?: CarteiraDigitalOrderByWithRelationInput | CarteiraDigitalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CarteiraDigitals.
     */
    cursor?: CarteiraDigitalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarteiraDigitals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarteiraDigitals.
     */
    skip?: number
    distinct?: CarteiraDigitalScalarFieldEnum | CarteiraDigitalScalarFieldEnum[]
  }

  /**
   * CarteiraDigital create
   */
  export type CarteiraDigitalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarteiraDigital
     */
    select?: CarteiraDigitalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarteiraDigitalInclude<ExtArgs> | null
    /**
     * The data needed to create a CarteiraDigital.
     */
    data: XOR<CarteiraDigitalCreateInput, CarteiraDigitalUncheckedCreateInput>
  }

  /**
   * CarteiraDigital createMany
   */
  export type CarteiraDigitalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CarteiraDigitals.
     */
    data: CarteiraDigitalCreateManyInput | CarteiraDigitalCreateManyInput[]
  }

  /**
   * CarteiraDigital createManyAndReturn
   */
  export type CarteiraDigitalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarteiraDigital
     */
    select?: CarteiraDigitalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CarteiraDigitals.
     */
    data: CarteiraDigitalCreateManyInput | CarteiraDigitalCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarteiraDigitalIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CarteiraDigital update
   */
  export type CarteiraDigitalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarteiraDigital
     */
    select?: CarteiraDigitalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarteiraDigitalInclude<ExtArgs> | null
    /**
     * The data needed to update a CarteiraDigital.
     */
    data: XOR<CarteiraDigitalUpdateInput, CarteiraDigitalUncheckedUpdateInput>
    /**
     * Choose, which CarteiraDigital to update.
     */
    where: CarteiraDigitalWhereUniqueInput
  }

  /**
   * CarteiraDigital updateMany
   */
  export type CarteiraDigitalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CarteiraDigitals.
     */
    data: XOR<CarteiraDigitalUpdateManyMutationInput, CarteiraDigitalUncheckedUpdateManyInput>
    /**
     * Filter which CarteiraDigitals to update
     */
    where?: CarteiraDigitalWhereInput
  }

  /**
   * CarteiraDigital upsert
   */
  export type CarteiraDigitalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarteiraDigital
     */
    select?: CarteiraDigitalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarteiraDigitalInclude<ExtArgs> | null
    /**
     * The filter to search for the CarteiraDigital to update in case it exists.
     */
    where: CarteiraDigitalWhereUniqueInput
    /**
     * In case the CarteiraDigital found by the `where` argument doesn't exist, create a new CarteiraDigital with this data.
     */
    create: XOR<CarteiraDigitalCreateInput, CarteiraDigitalUncheckedCreateInput>
    /**
     * In case the CarteiraDigital was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CarteiraDigitalUpdateInput, CarteiraDigitalUncheckedUpdateInput>
  }

  /**
   * CarteiraDigital delete
   */
  export type CarteiraDigitalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarteiraDigital
     */
    select?: CarteiraDigitalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarteiraDigitalInclude<ExtArgs> | null
    /**
     * Filter which CarteiraDigital to delete.
     */
    where: CarteiraDigitalWhereUniqueInput
  }

  /**
   * CarteiraDigital deleteMany
   */
  export type CarteiraDigitalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CarteiraDigitals to delete
     */
    where?: CarteiraDigitalWhereInput
  }

  /**
   * CarteiraDigital.movimentacoes
   */
  export type CarteiraDigital$movimentacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovimentacaoCarteira
     */
    select?: MovimentacaoCarteiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovimentacaoCarteiraInclude<ExtArgs> | null
    where?: MovimentacaoCarteiraWhereInput
    orderBy?: MovimentacaoCarteiraOrderByWithRelationInput | MovimentacaoCarteiraOrderByWithRelationInput[]
    cursor?: MovimentacaoCarteiraWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MovimentacaoCarteiraScalarFieldEnum | MovimentacaoCarteiraScalarFieldEnum[]
  }

  /**
   * CarteiraDigital without action
   */
  export type CarteiraDigitalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarteiraDigital
     */
    select?: CarteiraDigitalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarteiraDigitalInclude<ExtArgs> | null
  }


  /**
   * Model MovimentacaoCarteira
   */

  export type AggregateMovimentacaoCarteira = {
    _count: MovimentacaoCarteiraCountAggregateOutputType | null
    _avg: MovimentacaoCarteiraAvgAggregateOutputType | null
    _sum: MovimentacaoCarteiraSumAggregateOutputType | null
    _min: MovimentacaoCarteiraMinAggregateOutputType | null
    _max: MovimentacaoCarteiraMaxAggregateOutputType | null
  }

  export type MovimentacaoCarteiraAvgAggregateOutputType = {
    valor: number | null
    saldoAnterior: number | null
    saldoPosterior: number | null
  }

  export type MovimentacaoCarteiraSumAggregateOutputType = {
    valor: number | null
    saldoAnterior: number | null
    saldoPosterior: number | null
  }

  export type MovimentacaoCarteiraMinAggregateOutputType = {
    id: string | null
    carteiraId: string | null
    tipo: string | null
    valor: number | null
    saldoAnterior: number | null
    saldoPosterior: number | null
    descricao: string | null
    referencia: string | null
    status: string | null
    data: Date | null
  }

  export type MovimentacaoCarteiraMaxAggregateOutputType = {
    id: string | null
    carteiraId: string | null
    tipo: string | null
    valor: number | null
    saldoAnterior: number | null
    saldoPosterior: number | null
    descricao: string | null
    referencia: string | null
    status: string | null
    data: Date | null
  }

  export type MovimentacaoCarteiraCountAggregateOutputType = {
    id: number
    carteiraId: number
    tipo: number
    valor: number
    saldoAnterior: number
    saldoPosterior: number
    descricao: number
    referencia: number
    status: number
    data: number
    _all: number
  }


  export type MovimentacaoCarteiraAvgAggregateInputType = {
    valor?: true
    saldoAnterior?: true
    saldoPosterior?: true
  }

  export type MovimentacaoCarteiraSumAggregateInputType = {
    valor?: true
    saldoAnterior?: true
    saldoPosterior?: true
  }

  export type MovimentacaoCarteiraMinAggregateInputType = {
    id?: true
    carteiraId?: true
    tipo?: true
    valor?: true
    saldoAnterior?: true
    saldoPosterior?: true
    descricao?: true
    referencia?: true
    status?: true
    data?: true
  }

  export type MovimentacaoCarteiraMaxAggregateInputType = {
    id?: true
    carteiraId?: true
    tipo?: true
    valor?: true
    saldoAnterior?: true
    saldoPosterior?: true
    descricao?: true
    referencia?: true
    status?: true
    data?: true
  }

  export type MovimentacaoCarteiraCountAggregateInputType = {
    id?: true
    carteiraId?: true
    tipo?: true
    valor?: true
    saldoAnterior?: true
    saldoPosterior?: true
    descricao?: true
    referencia?: true
    status?: true
    data?: true
    _all?: true
  }

  export type MovimentacaoCarteiraAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MovimentacaoCarteira to aggregate.
     */
    where?: MovimentacaoCarteiraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MovimentacaoCarteiras to fetch.
     */
    orderBy?: MovimentacaoCarteiraOrderByWithRelationInput | MovimentacaoCarteiraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MovimentacaoCarteiraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MovimentacaoCarteiras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MovimentacaoCarteiras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MovimentacaoCarteiras
    **/
    _count?: true | MovimentacaoCarteiraCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MovimentacaoCarteiraAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MovimentacaoCarteiraSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MovimentacaoCarteiraMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MovimentacaoCarteiraMaxAggregateInputType
  }

  export type GetMovimentacaoCarteiraAggregateType<T extends MovimentacaoCarteiraAggregateArgs> = {
        [P in keyof T & keyof AggregateMovimentacaoCarteira]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMovimentacaoCarteira[P]>
      : GetScalarType<T[P], AggregateMovimentacaoCarteira[P]>
  }




  export type MovimentacaoCarteiraGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MovimentacaoCarteiraWhereInput
    orderBy?: MovimentacaoCarteiraOrderByWithAggregationInput | MovimentacaoCarteiraOrderByWithAggregationInput[]
    by: MovimentacaoCarteiraScalarFieldEnum[] | MovimentacaoCarteiraScalarFieldEnum
    having?: MovimentacaoCarteiraScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MovimentacaoCarteiraCountAggregateInputType | true
    _avg?: MovimentacaoCarteiraAvgAggregateInputType
    _sum?: MovimentacaoCarteiraSumAggregateInputType
    _min?: MovimentacaoCarteiraMinAggregateInputType
    _max?: MovimentacaoCarteiraMaxAggregateInputType
  }

  export type MovimentacaoCarteiraGroupByOutputType = {
    id: string
    carteiraId: string
    tipo: string
    valor: number
    saldoAnterior: number
    saldoPosterior: number
    descricao: string
    referencia: string | null
    status: string
    data: Date
    _count: MovimentacaoCarteiraCountAggregateOutputType | null
    _avg: MovimentacaoCarteiraAvgAggregateOutputType | null
    _sum: MovimentacaoCarteiraSumAggregateOutputType | null
    _min: MovimentacaoCarteiraMinAggregateOutputType | null
    _max: MovimentacaoCarteiraMaxAggregateOutputType | null
  }

  type GetMovimentacaoCarteiraGroupByPayload<T extends MovimentacaoCarteiraGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MovimentacaoCarteiraGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MovimentacaoCarteiraGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MovimentacaoCarteiraGroupByOutputType[P]>
            : GetScalarType<T[P], MovimentacaoCarteiraGroupByOutputType[P]>
        }
      >
    >


  export type MovimentacaoCarteiraSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    carteiraId?: boolean
    tipo?: boolean
    valor?: boolean
    saldoAnterior?: boolean
    saldoPosterior?: boolean
    descricao?: boolean
    referencia?: boolean
    status?: boolean
    data?: boolean
    carteira?: boolean | CarteiraDigitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["movimentacaoCarteira"]>

  export type MovimentacaoCarteiraSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    carteiraId?: boolean
    tipo?: boolean
    valor?: boolean
    saldoAnterior?: boolean
    saldoPosterior?: boolean
    descricao?: boolean
    referencia?: boolean
    status?: boolean
    data?: boolean
    carteira?: boolean | CarteiraDigitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["movimentacaoCarteira"]>

  export type MovimentacaoCarteiraSelectScalar = {
    id?: boolean
    carteiraId?: boolean
    tipo?: boolean
    valor?: boolean
    saldoAnterior?: boolean
    saldoPosterior?: boolean
    descricao?: boolean
    referencia?: boolean
    status?: boolean
    data?: boolean
  }

  export type MovimentacaoCarteiraInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    carteira?: boolean | CarteiraDigitalDefaultArgs<ExtArgs>
  }
  export type MovimentacaoCarteiraIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    carteira?: boolean | CarteiraDigitalDefaultArgs<ExtArgs>
  }

  export type $MovimentacaoCarteiraPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MovimentacaoCarteira"
    objects: {
      carteira: Prisma.$CarteiraDigitalPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      carteiraId: string
      tipo: string
      valor: number
      saldoAnterior: number
      saldoPosterior: number
      descricao: string
      referencia: string | null
      status: string
      data: Date
    }, ExtArgs["result"]["movimentacaoCarteira"]>
    composites: {}
  }

  type MovimentacaoCarteiraGetPayload<S extends boolean | null | undefined | MovimentacaoCarteiraDefaultArgs> = $Result.GetResult<Prisma.$MovimentacaoCarteiraPayload, S>

  type MovimentacaoCarteiraCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MovimentacaoCarteiraFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MovimentacaoCarteiraCountAggregateInputType | true
    }

  export interface MovimentacaoCarteiraDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MovimentacaoCarteira'], meta: { name: 'MovimentacaoCarteira' } }
    /**
     * Find zero or one MovimentacaoCarteira that matches the filter.
     * @param {MovimentacaoCarteiraFindUniqueArgs} args - Arguments to find a MovimentacaoCarteira
     * @example
     * // Get one MovimentacaoCarteira
     * const movimentacaoCarteira = await prisma.movimentacaoCarteira.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MovimentacaoCarteiraFindUniqueArgs>(args: SelectSubset<T, MovimentacaoCarteiraFindUniqueArgs<ExtArgs>>): Prisma__MovimentacaoCarteiraClient<$Result.GetResult<Prisma.$MovimentacaoCarteiraPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MovimentacaoCarteira that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MovimentacaoCarteiraFindUniqueOrThrowArgs} args - Arguments to find a MovimentacaoCarteira
     * @example
     * // Get one MovimentacaoCarteira
     * const movimentacaoCarteira = await prisma.movimentacaoCarteira.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MovimentacaoCarteiraFindUniqueOrThrowArgs>(args: SelectSubset<T, MovimentacaoCarteiraFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MovimentacaoCarteiraClient<$Result.GetResult<Prisma.$MovimentacaoCarteiraPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MovimentacaoCarteira that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovimentacaoCarteiraFindFirstArgs} args - Arguments to find a MovimentacaoCarteira
     * @example
     * // Get one MovimentacaoCarteira
     * const movimentacaoCarteira = await prisma.movimentacaoCarteira.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MovimentacaoCarteiraFindFirstArgs>(args?: SelectSubset<T, MovimentacaoCarteiraFindFirstArgs<ExtArgs>>): Prisma__MovimentacaoCarteiraClient<$Result.GetResult<Prisma.$MovimentacaoCarteiraPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MovimentacaoCarteira that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovimentacaoCarteiraFindFirstOrThrowArgs} args - Arguments to find a MovimentacaoCarteira
     * @example
     * // Get one MovimentacaoCarteira
     * const movimentacaoCarteira = await prisma.movimentacaoCarteira.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MovimentacaoCarteiraFindFirstOrThrowArgs>(args?: SelectSubset<T, MovimentacaoCarteiraFindFirstOrThrowArgs<ExtArgs>>): Prisma__MovimentacaoCarteiraClient<$Result.GetResult<Prisma.$MovimentacaoCarteiraPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MovimentacaoCarteiras that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovimentacaoCarteiraFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MovimentacaoCarteiras
     * const movimentacaoCarteiras = await prisma.movimentacaoCarteira.findMany()
     * 
     * // Get first 10 MovimentacaoCarteiras
     * const movimentacaoCarteiras = await prisma.movimentacaoCarteira.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const movimentacaoCarteiraWithIdOnly = await prisma.movimentacaoCarteira.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MovimentacaoCarteiraFindManyArgs>(args?: SelectSubset<T, MovimentacaoCarteiraFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovimentacaoCarteiraPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MovimentacaoCarteira.
     * @param {MovimentacaoCarteiraCreateArgs} args - Arguments to create a MovimentacaoCarteira.
     * @example
     * // Create one MovimentacaoCarteira
     * const MovimentacaoCarteira = await prisma.movimentacaoCarteira.create({
     *   data: {
     *     // ... data to create a MovimentacaoCarteira
     *   }
     * })
     * 
     */
    create<T extends MovimentacaoCarteiraCreateArgs>(args: SelectSubset<T, MovimentacaoCarteiraCreateArgs<ExtArgs>>): Prisma__MovimentacaoCarteiraClient<$Result.GetResult<Prisma.$MovimentacaoCarteiraPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MovimentacaoCarteiras.
     * @param {MovimentacaoCarteiraCreateManyArgs} args - Arguments to create many MovimentacaoCarteiras.
     * @example
     * // Create many MovimentacaoCarteiras
     * const movimentacaoCarteira = await prisma.movimentacaoCarteira.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MovimentacaoCarteiraCreateManyArgs>(args?: SelectSubset<T, MovimentacaoCarteiraCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MovimentacaoCarteiras and returns the data saved in the database.
     * @param {MovimentacaoCarteiraCreateManyAndReturnArgs} args - Arguments to create many MovimentacaoCarteiras.
     * @example
     * // Create many MovimentacaoCarteiras
     * const movimentacaoCarteira = await prisma.movimentacaoCarteira.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MovimentacaoCarteiras and only return the `id`
     * const movimentacaoCarteiraWithIdOnly = await prisma.movimentacaoCarteira.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MovimentacaoCarteiraCreateManyAndReturnArgs>(args?: SelectSubset<T, MovimentacaoCarteiraCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovimentacaoCarteiraPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MovimentacaoCarteira.
     * @param {MovimentacaoCarteiraDeleteArgs} args - Arguments to delete one MovimentacaoCarteira.
     * @example
     * // Delete one MovimentacaoCarteira
     * const MovimentacaoCarteira = await prisma.movimentacaoCarteira.delete({
     *   where: {
     *     // ... filter to delete one MovimentacaoCarteira
     *   }
     * })
     * 
     */
    delete<T extends MovimentacaoCarteiraDeleteArgs>(args: SelectSubset<T, MovimentacaoCarteiraDeleteArgs<ExtArgs>>): Prisma__MovimentacaoCarteiraClient<$Result.GetResult<Prisma.$MovimentacaoCarteiraPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MovimentacaoCarteira.
     * @param {MovimentacaoCarteiraUpdateArgs} args - Arguments to update one MovimentacaoCarteira.
     * @example
     * // Update one MovimentacaoCarteira
     * const movimentacaoCarteira = await prisma.movimentacaoCarteira.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MovimentacaoCarteiraUpdateArgs>(args: SelectSubset<T, MovimentacaoCarteiraUpdateArgs<ExtArgs>>): Prisma__MovimentacaoCarteiraClient<$Result.GetResult<Prisma.$MovimentacaoCarteiraPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MovimentacaoCarteiras.
     * @param {MovimentacaoCarteiraDeleteManyArgs} args - Arguments to filter MovimentacaoCarteiras to delete.
     * @example
     * // Delete a few MovimentacaoCarteiras
     * const { count } = await prisma.movimentacaoCarteira.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MovimentacaoCarteiraDeleteManyArgs>(args?: SelectSubset<T, MovimentacaoCarteiraDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MovimentacaoCarteiras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovimentacaoCarteiraUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MovimentacaoCarteiras
     * const movimentacaoCarteira = await prisma.movimentacaoCarteira.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MovimentacaoCarteiraUpdateManyArgs>(args: SelectSubset<T, MovimentacaoCarteiraUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MovimentacaoCarteira.
     * @param {MovimentacaoCarteiraUpsertArgs} args - Arguments to update or create a MovimentacaoCarteira.
     * @example
     * // Update or create a MovimentacaoCarteira
     * const movimentacaoCarteira = await prisma.movimentacaoCarteira.upsert({
     *   create: {
     *     // ... data to create a MovimentacaoCarteira
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MovimentacaoCarteira we want to update
     *   }
     * })
     */
    upsert<T extends MovimentacaoCarteiraUpsertArgs>(args: SelectSubset<T, MovimentacaoCarteiraUpsertArgs<ExtArgs>>): Prisma__MovimentacaoCarteiraClient<$Result.GetResult<Prisma.$MovimentacaoCarteiraPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MovimentacaoCarteiras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovimentacaoCarteiraCountArgs} args - Arguments to filter MovimentacaoCarteiras to count.
     * @example
     * // Count the number of MovimentacaoCarteiras
     * const count = await prisma.movimentacaoCarteira.count({
     *   where: {
     *     // ... the filter for the MovimentacaoCarteiras we want to count
     *   }
     * })
    **/
    count<T extends MovimentacaoCarteiraCountArgs>(
      args?: Subset<T, MovimentacaoCarteiraCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MovimentacaoCarteiraCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MovimentacaoCarteira.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovimentacaoCarteiraAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MovimentacaoCarteiraAggregateArgs>(args: Subset<T, MovimentacaoCarteiraAggregateArgs>): Prisma.PrismaPromise<GetMovimentacaoCarteiraAggregateType<T>>

    /**
     * Group by MovimentacaoCarteira.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovimentacaoCarteiraGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MovimentacaoCarteiraGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MovimentacaoCarteiraGroupByArgs['orderBy'] }
        : { orderBy?: MovimentacaoCarteiraGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MovimentacaoCarteiraGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMovimentacaoCarteiraGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MovimentacaoCarteira model
   */
  readonly fields: MovimentacaoCarteiraFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MovimentacaoCarteira.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MovimentacaoCarteiraClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    carteira<T extends CarteiraDigitalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CarteiraDigitalDefaultArgs<ExtArgs>>): Prisma__CarteiraDigitalClient<$Result.GetResult<Prisma.$CarteiraDigitalPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MovimentacaoCarteira model
   */ 
  interface MovimentacaoCarteiraFieldRefs {
    readonly id: FieldRef<"MovimentacaoCarteira", 'String'>
    readonly carteiraId: FieldRef<"MovimentacaoCarteira", 'String'>
    readonly tipo: FieldRef<"MovimentacaoCarteira", 'String'>
    readonly valor: FieldRef<"MovimentacaoCarteira", 'Float'>
    readonly saldoAnterior: FieldRef<"MovimentacaoCarteira", 'Float'>
    readonly saldoPosterior: FieldRef<"MovimentacaoCarteira", 'Float'>
    readonly descricao: FieldRef<"MovimentacaoCarteira", 'String'>
    readonly referencia: FieldRef<"MovimentacaoCarteira", 'String'>
    readonly status: FieldRef<"MovimentacaoCarteira", 'String'>
    readonly data: FieldRef<"MovimentacaoCarteira", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MovimentacaoCarteira findUnique
   */
  export type MovimentacaoCarteiraFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovimentacaoCarteira
     */
    select?: MovimentacaoCarteiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovimentacaoCarteiraInclude<ExtArgs> | null
    /**
     * Filter, which MovimentacaoCarteira to fetch.
     */
    where: MovimentacaoCarteiraWhereUniqueInput
  }

  /**
   * MovimentacaoCarteira findUniqueOrThrow
   */
  export type MovimentacaoCarteiraFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovimentacaoCarteira
     */
    select?: MovimentacaoCarteiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovimentacaoCarteiraInclude<ExtArgs> | null
    /**
     * Filter, which MovimentacaoCarteira to fetch.
     */
    where: MovimentacaoCarteiraWhereUniqueInput
  }

  /**
   * MovimentacaoCarteira findFirst
   */
  export type MovimentacaoCarteiraFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovimentacaoCarteira
     */
    select?: MovimentacaoCarteiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovimentacaoCarteiraInclude<ExtArgs> | null
    /**
     * Filter, which MovimentacaoCarteira to fetch.
     */
    where?: MovimentacaoCarteiraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MovimentacaoCarteiras to fetch.
     */
    orderBy?: MovimentacaoCarteiraOrderByWithRelationInput | MovimentacaoCarteiraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MovimentacaoCarteiras.
     */
    cursor?: MovimentacaoCarteiraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MovimentacaoCarteiras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MovimentacaoCarteiras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MovimentacaoCarteiras.
     */
    distinct?: MovimentacaoCarteiraScalarFieldEnum | MovimentacaoCarteiraScalarFieldEnum[]
  }

  /**
   * MovimentacaoCarteira findFirstOrThrow
   */
  export type MovimentacaoCarteiraFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovimentacaoCarteira
     */
    select?: MovimentacaoCarteiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovimentacaoCarteiraInclude<ExtArgs> | null
    /**
     * Filter, which MovimentacaoCarteira to fetch.
     */
    where?: MovimentacaoCarteiraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MovimentacaoCarteiras to fetch.
     */
    orderBy?: MovimentacaoCarteiraOrderByWithRelationInput | MovimentacaoCarteiraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MovimentacaoCarteiras.
     */
    cursor?: MovimentacaoCarteiraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MovimentacaoCarteiras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MovimentacaoCarteiras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MovimentacaoCarteiras.
     */
    distinct?: MovimentacaoCarteiraScalarFieldEnum | MovimentacaoCarteiraScalarFieldEnum[]
  }

  /**
   * MovimentacaoCarteira findMany
   */
  export type MovimentacaoCarteiraFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovimentacaoCarteira
     */
    select?: MovimentacaoCarteiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovimentacaoCarteiraInclude<ExtArgs> | null
    /**
     * Filter, which MovimentacaoCarteiras to fetch.
     */
    where?: MovimentacaoCarteiraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MovimentacaoCarteiras to fetch.
     */
    orderBy?: MovimentacaoCarteiraOrderByWithRelationInput | MovimentacaoCarteiraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MovimentacaoCarteiras.
     */
    cursor?: MovimentacaoCarteiraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MovimentacaoCarteiras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MovimentacaoCarteiras.
     */
    skip?: number
    distinct?: MovimentacaoCarteiraScalarFieldEnum | MovimentacaoCarteiraScalarFieldEnum[]
  }

  /**
   * MovimentacaoCarteira create
   */
  export type MovimentacaoCarteiraCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovimentacaoCarteira
     */
    select?: MovimentacaoCarteiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovimentacaoCarteiraInclude<ExtArgs> | null
    /**
     * The data needed to create a MovimentacaoCarteira.
     */
    data: XOR<MovimentacaoCarteiraCreateInput, MovimentacaoCarteiraUncheckedCreateInput>
  }

  /**
   * MovimentacaoCarteira createMany
   */
  export type MovimentacaoCarteiraCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MovimentacaoCarteiras.
     */
    data: MovimentacaoCarteiraCreateManyInput | MovimentacaoCarteiraCreateManyInput[]
  }

  /**
   * MovimentacaoCarteira createManyAndReturn
   */
  export type MovimentacaoCarteiraCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovimentacaoCarteira
     */
    select?: MovimentacaoCarteiraSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MovimentacaoCarteiras.
     */
    data: MovimentacaoCarteiraCreateManyInput | MovimentacaoCarteiraCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovimentacaoCarteiraIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MovimentacaoCarteira update
   */
  export type MovimentacaoCarteiraUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovimentacaoCarteira
     */
    select?: MovimentacaoCarteiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovimentacaoCarteiraInclude<ExtArgs> | null
    /**
     * The data needed to update a MovimentacaoCarteira.
     */
    data: XOR<MovimentacaoCarteiraUpdateInput, MovimentacaoCarteiraUncheckedUpdateInput>
    /**
     * Choose, which MovimentacaoCarteira to update.
     */
    where: MovimentacaoCarteiraWhereUniqueInput
  }

  /**
   * MovimentacaoCarteira updateMany
   */
  export type MovimentacaoCarteiraUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MovimentacaoCarteiras.
     */
    data: XOR<MovimentacaoCarteiraUpdateManyMutationInput, MovimentacaoCarteiraUncheckedUpdateManyInput>
    /**
     * Filter which MovimentacaoCarteiras to update
     */
    where?: MovimentacaoCarteiraWhereInput
  }

  /**
   * MovimentacaoCarteira upsert
   */
  export type MovimentacaoCarteiraUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovimentacaoCarteira
     */
    select?: MovimentacaoCarteiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovimentacaoCarteiraInclude<ExtArgs> | null
    /**
     * The filter to search for the MovimentacaoCarteira to update in case it exists.
     */
    where: MovimentacaoCarteiraWhereUniqueInput
    /**
     * In case the MovimentacaoCarteira found by the `where` argument doesn't exist, create a new MovimentacaoCarteira with this data.
     */
    create: XOR<MovimentacaoCarteiraCreateInput, MovimentacaoCarteiraUncheckedCreateInput>
    /**
     * In case the MovimentacaoCarteira was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MovimentacaoCarteiraUpdateInput, MovimentacaoCarteiraUncheckedUpdateInput>
  }

  /**
   * MovimentacaoCarteira delete
   */
  export type MovimentacaoCarteiraDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovimentacaoCarteira
     */
    select?: MovimentacaoCarteiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovimentacaoCarteiraInclude<ExtArgs> | null
    /**
     * Filter which MovimentacaoCarteira to delete.
     */
    where: MovimentacaoCarteiraWhereUniqueInput
  }

  /**
   * MovimentacaoCarteira deleteMany
   */
  export type MovimentacaoCarteiraDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MovimentacaoCarteiras to delete
     */
    where?: MovimentacaoCarteiraWhereInput
  }

  /**
   * MovimentacaoCarteira without action
   */
  export type MovimentacaoCarteiraDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovimentacaoCarteira
     */
    select?: MovimentacaoCarteiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovimentacaoCarteiraInclude<ExtArgs> | null
  }


  /**
   * Model DadosBancarios
   */

  export type AggregateDadosBancarios = {
    _count: DadosBancariosCountAggregateOutputType | null
    _min: DadosBancariosMinAggregateOutputType | null
    _max: DadosBancariosMaxAggregateOutputType | null
  }

  export type DadosBancariosMinAggregateOutputType = {
    id: string | null
    usuarioId: string | null
    banco: string | null
    agencia: string | null
    conta: string | null
    tipoConta: string | null
    cpfCnpj: string | null
    nomeTitular: string | null
    validado: boolean | null
    dataValidacao: Date | null
    dataCriacao: Date | null
    dataAtualizacao: Date | null
  }

  export type DadosBancariosMaxAggregateOutputType = {
    id: string | null
    usuarioId: string | null
    banco: string | null
    agencia: string | null
    conta: string | null
    tipoConta: string | null
    cpfCnpj: string | null
    nomeTitular: string | null
    validado: boolean | null
    dataValidacao: Date | null
    dataCriacao: Date | null
    dataAtualizacao: Date | null
  }

  export type DadosBancariosCountAggregateOutputType = {
    id: number
    usuarioId: number
    banco: number
    agencia: number
    conta: number
    tipoConta: number
    cpfCnpj: number
    nomeTitular: number
    validado: number
    dataValidacao: number
    dataCriacao: number
    dataAtualizacao: number
    _all: number
  }


  export type DadosBancariosMinAggregateInputType = {
    id?: true
    usuarioId?: true
    banco?: true
    agencia?: true
    conta?: true
    tipoConta?: true
    cpfCnpj?: true
    nomeTitular?: true
    validado?: true
    dataValidacao?: true
    dataCriacao?: true
    dataAtualizacao?: true
  }

  export type DadosBancariosMaxAggregateInputType = {
    id?: true
    usuarioId?: true
    banco?: true
    agencia?: true
    conta?: true
    tipoConta?: true
    cpfCnpj?: true
    nomeTitular?: true
    validado?: true
    dataValidacao?: true
    dataCriacao?: true
    dataAtualizacao?: true
  }

  export type DadosBancariosCountAggregateInputType = {
    id?: true
    usuarioId?: true
    banco?: true
    agencia?: true
    conta?: true
    tipoConta?: true
    cpfCnpj?: true
    nomeTitular?: true
    validado?: true
    dataValidacao?: true
    dataCriacao?: true
    dataAtualizacao?: true
    _all?: true
  }

  export type DadosBancariosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DadosBancarios to aggregate.
     */
    where?: DadosBancariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DadosBancarios to fetch.
     */
    orderBy?: DadosBancariosOrderByWithRelationInput | DadosBancariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DadosBancariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DadosBancarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DadosBancarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DadosBancarios
    **/
    _count?: true | DadosBancariosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DadosBancariosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DadosBancariosMaxAggregateInputType
  }

  export type GetDadosBancariosAggregateType<T extends DadosBancariosAggregateArgs> = {
        [P in keyof T & keyof AggregateDadosBancarios]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDadosBancarios[P]>
      : GetScalarType<T[P], AggregateDadosBancarios[P]>
  }




  export type DadosBancariosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DadosBancariosWhereInput
    orderBy?: DadosBancariosOrderByWithAggregationInput | DadosBancariosOrderByWithAggregationInput[]
    by: DadosBancariosScalarFieldEnum[] | DadosBancariosScalarFieldEnum
    having?: DadosBancariosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DadosBancariosCountAggregateInputType | true
    _min?: DadosBancariosMinAggregateInputType
    _max?: DadosBancariosMaxAggregateInputType
  }

  export type DadosBancariosGroupByOutputType = {
    id: string
    usuarioId: string
    banco: string
    agencia: string
    conta: string
    tipoConta: string
    cpfCnpj: string
    nomeTitular: string
    validado: boolean
    dataValidacao: Date | null
    dataCriacao: Date
    dataAtualizacao: Date
    _count: DadosBancariosCountAggregateOutputType | null
    _min: DadosBancariosMinAggregateOutputType | null
    _max: DadosBancariosMaxAggregateOutputType | null
  }

  type GetDadosBancariosGroupByPayload<T extends DadosBancariosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DadosBancariosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DadosBancariosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DadosBancariosGroupByOutputType[P]>
            : GetScalarType<T[P], DadosBancariosGroupByOutputType[P]>
        }
      >
    >


  export type DadosBancariosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    banco?: boolean
    agencia?: boolean
    conta?: boolean
    tipoConta?: boolean
    cpfCnpj?: boolean
    nomeTitular?: boolean
    validado?: boolean
    dataValidacao?: boolean
    dataCriacao?: boolean
    dataAtualizacao?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dadosBancarios"]>

  export type DadosBancariosSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    banco?: boolean
    agencia?: boolean
    conta?: boolean
    tipoConta?: boolean
    cpfCnpj?: boolean
    nomeTitular?: boolean
    validado?: boolean
    dataValidacao?: boolean
    dataCriacao?: boolean
    dataAtualizacao?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dadosBancarios"]>

  export type DadosBancariosSelectScalar = {
    id?: boolean
    usuarioId?: boolean
    banco?: boolean
    agencia?: boolean
    conta?: boolean
    tipoConta?: boolean
    cpfCnpj?: boolean
    nomeTitular?: boolean
    validado?: boolean
    dataValidacao?: boolean
    dataCriacao?: boolean
    dataAtualizacao?: boolean
  }

  export type DadosBancariosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type DadosBancariosIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $DadosBancariosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DadosBancarios"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      usuarioId: string
      banco: string
      agencia: string
      conta: string
      tipoConta: string
      cpfCnpj: string
      nomeTitular: string
      validado: boolean
      dataValidacao: Date | null
      dataCriacao: Date
      dataAtualizacao: Date
    }, ExtArgs["result"]["dadosBancarios"]>
    composites: {}
  }

  type DadosBancariosGetPayload<S extends boolean | null | undefined | DadosBancariosDefaultArgs> = $Result.GetResult<Prisma.$DadosBancariosPayload, S>

  type DadosBancariosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DadosBancariosFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DadosBancariosCountAggregateInputType | true
    }

  export interface DadosBancariosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DadosBancarios'], meta: { name: 'DadosBancarios' } }
    /**
     * Find zero or one DadosBancarios that matches the filter.
     * @param {DadosBancariosFindUniqueArgs} args - Arguments to find a DadosBancarios
     * @example
     * // Get one DadosBancarios
     * const dadosBancarios = await prisma.dadosBancarios.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DadosBancariosFindUniqueArgs>(args: SelectSubset<T, DadosBancariosFindUniqueArgs<ExtArgs>>): Prisma__DadosBancariosClient<$Result.GetResult<Prisma.$DadosBancariosPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DadosBancarios that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DadosBancariosFindUniqueOrThrowArgs} args - Arguments to find a DadosBancarios
     * @example
     * // Get one DadosBancarios
     * const dadosBancarios = await prisma.dadosBancarios.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DadosBancariosFindUniqueOrThrowArgs>(args: SelectSubset<T, DadosBancariosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DadosBancariosClient<$Result.GetResult<Prisma.$DadosBancariosPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DadosBancarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DadosBancariosFindFirstArgs} args - Arguments to find a DadosBancarios
     * @example
     * // Get one DadosBancarios
     * const dadosBancarios = await prisma.dadosBancarios.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DadosBancariosFindFirstArgs>(args?: SelectSubset<T, DadosBancariosFindFirstArgs<ExtArgs>>): Prisma__DadosBancariosClient<$Result.GetResult<Prisma.$DadosBancariosPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DadosBancarios that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DadosBancariosFindFirstOrThrowArgs} args - Arguments to find a DadosBancarios
     * @example
     * // Get one DadosBancarios
     * const dadosBancarios = await prisma.dadosBancarios.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DadosBancariosFindFirstOrThrowArgs>(args?: SelectSubset<T, DadosBancariosFindFirstOrThrowArgs<ExtArgs>>): Prisma__DadosBancariosClient<$Result.GetResult<Prisma.$DadosBancariosPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DadosBancarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DadosBancariosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DadosBancarios
     * const dadosBancarios = await prisma.dadosBancarios.findMany()
     * 
     * // Get first 10 DadosBancarios
     * const dadosBancarios = await prisma.dadosBancarios.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dadosBancariosWithIdOnly = await prisma.dadosBancarios.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DadosBancariosFindManyArgs>(args?: SelectSubset<T, DadosBancariosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DadosBancariosPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DadosBancarios.
     * @param {DadosBancariosCreateArgs} args - Arguments to create a DadosBancarios.
     * @example
     * // Create one DadosBancarios
     * const DadosBancarios = await prisma.dadosBancarios.create({
     *   data: {
     *     // ... data to create a DadosBancarios
     *   }
     * })
     * 
     */
    create<T extends DadosBancariosCreateArgs>(args: SelectSubset<T, DadosBancariosCreateArgs<ExtArgs>>): Prisma__DadosBancariosClient<$Result.GetResult<Prisma.$DadosBancariosPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DadosBancarios.
     * @param {DadosBancariosCreateManyArgs} args - Arguments to create many DadosBancarios.
     * @example
     * // Create many DadosBancarios
     * const dadosBancarios = await prisma.dadosBancarios.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DadosBancariosCreateManyArgs>(args?: SelectSubset<T, DadosBancariosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DadosBancarios and returns the data saved in the database.
     * @param {DadosBancariosCreateManyAndReturnArgs} args - Arguments to create many DadosBancarios.
     * @example
     * // Create many DadosBancarios
     * const dadosBancarios = await prisma.dadosBancarios.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DadosBancarios and only return the `id`
     * const dadosBancariosWithIdOnly = await prisma.dadosBancarios.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DadosBancariosCreateManyAndReturnArgs>(args?: SelectSubset<T, DadosBancariosCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DadosBancariosPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DadosBancarios.
     * @param {DadosBancariosDeleteArgs} args - Arguments to delete one DadosBancarios.
     * @example
     * // Delete one DadosBancarios
     * const DadosBancarios = await prisma.dadosBancarios.delete({
     *   where: {
     *     // ... filter to delete one DadosBancarios
     *   }
     * })
     * 
     */
    delete<T extends DadosBancariosDeleteArgs>(args: SelectSubset<T, DadosBancariosDeleteArgs<ExtArgs>>): Prisma__DadosBancariosClient<$Result.GetResult<Prisma.$DadosBancariosPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DadosBancarios.
     * @param {DadosBancariosUpdateArgs} args - Arguments to update one DadosBancarios.
     * @example
     * // Update one DadosBancarios
     * const dadosBancarios = await prisma.dadosBancarios.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DadosBancariosUpdateArgs>(args: SelectSubset<T, DadosBancariosUpdateArgs<ExtArgs>>): Prisma__DadosBancariosClient<$Result.GetResult<Prisma.$DadosBancariosPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DadosBancarios.
     * @param {DadosBancariosDeleteManyArgs} args - Arguments to filter DadosBancarios to delete.
     * @example
     * // Delete a few DadosBancarios
     * const { count } = await prisma.dadosBancarios.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DadosBancariosDeleteManyArgs>(args?: SelectSubset<T, DadosBancariosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DadosBancarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DadosBancariosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DadosBancarios
     * const dadosBancarios = await prisma.dadosBancarios.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DadosBancariosUpdateManyArgs>(args: SelectSubset<T, DadosBancariosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DadosBancarios.
     * @param {DadosBancariosUpsertArgs} args - Arguments to update or create a DadosBancarios.
     * @example
     * // Update or create a DadosBancarios
     * const dadosBancarios = await prisma.dadosBancarios.upsert({
     *   create: {
     *     // ... data to create a DadosBancarios
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DadosBancarios we want to update
     *   }
     * })
     */
    upsert<T extends DadosBancariosUpsertArgs>(args: SelectSubset<T, DadosBancariosUpsertArgs<ExtArgs>>): Prisma__DadosBancariosClient<$Result.GetResult<Prisma.$DadosBancariosPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DadosBancarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DadosBancariosCountArgs} args - Arguments to filter DadosBancarios to count.
     * @example
     * // Count the number of DadosBancarios
     * const count = await prisma.dadosBancarios.count({
     *   where: {
     *     // ... the filter for the DadosBancarios we want to count
     *   }
     * })
    **/
    count<T extends DadosBancariosCountArgs>(
      args?: Subset<T, DadosBancariosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DadosBancariosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DadosBancarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DadosBancariosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DadosBancariosAggregateArgs>(args: Subset<T, DadosBancariosAggregateArgs>): Prisma.PrismaPromise<GetDadosBancariosAggregateType<T>>

    /**
     * Group by DadosBancarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DadosBancariosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DadosBancariosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DadosBancariosGroupByArgs['orderBy'] }
        : { orderBy?: DadosBancariosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DadosBancariosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDadosBancariosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DadosBancarios model
   */
  readonly fields: DadosBancariosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DadosBancarios.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DadosBancariosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DadosBancarios model
   */ 
  interface DadosBancariosFieldRefs {
    readonly id: FieldRef<"DadosBancarios", 'String'>
    readonly usuarioId: FieldRef<"DadosBancarios", 'String'>
    readonly banco: FieldRef<"DadosBancarios", 'String'>
    readonly agencia: FieldRef<"DadosBancarios", 'String'>
    readonly conta: FieldRef<"DadosBancarios", 'String'>
    readonly tipoConta: FieldRef<"DadosBancarios", 'String'>
    readonly cpfCnpj: FieldRef<"DadosBancarios", 'String'>
    readonly nomeTitular: FieldRef<"DadosBancarios", 'String'>
    readonly validado: FieldRef<"DadosBancarios", 'Boolean'>
    readonly dataValidacao: FieldRef<"DadosBancarios", 'DateTime'>
    readonly dataCriacao: FieldRef<"DadosBancarios", 'DateTime'>
    readonly dataAtualizacao: FieldRef<"DadosBancarios", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DadosBancarios findUnique
   */
  export type DadosBancariosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DadosBancarios
     */
    select?: DadosBancariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DadosBancariosInclude<ExtArgs> | null
    /**
     * Filter, which DadosBancarios to fetch.
     */
    where: DadosBancariosWhereUniqueInput
  }

  /**
   * DadosBancarios findUniqueOrThrow
   */
  export type DadosBancariosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DadosBancarios
     */
    select?: DadosBancariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DadosBancariosInclude<ExtArgs> | null
    /**
     * Filter, which DadosBancarios to fetch.
     */
    where: DadosBancariosWhereUniqueInput
  }

  /**
   * DadosBancarios findFirst
   */
  export type DadosBancariosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DadosBancarios
     */
    select?: DadosBancariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DadosBancariosInclude<ExtArgs> | null
    /**
     * Filter, which DadosBancarios to fetch.
     */
    where?: DadosBancariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DadosBancarios to fetch.
     */
    orderBy?: DadosBancariosOrderByWithRelationInput | DadosBancariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DadosBancarios.
     */
    cursor?: DadosBancariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DadosBancarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DadosBancarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DadosBancarios.
     */
    distinct?: DadosBancariosScalarFieldEnum | DadosBancariosScalarFieldEnum[]
  }

  /**
   * DadosBancarios findFirstOrThrow
   */
  export type DadosBancariosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DadosBancarios
     */
    select?: DadosBancariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DadosBancariosInclude<ExtArgs> | null
    /**
     * Filter, which DadosBancarios to fetch.
     */
    where?: DadosBancariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DadosBancarios to fetch.
     */
    orderBy?: DadosBancariosOrderByWithRelationInput | DadosBancariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DadosBancarios.
     */
    cursor?: DadosBancariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DadosBancarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DadosBancarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DadosBancarios.
     */
    distinct?: DadosBancariosScalarFieldEnum | DadosBancariosScalarFieldEnum[]
  }

  /**
   * DadosBancarios findMany
   */
  export type DadosBancariosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DadosBancarios
     */
    select?: DadosBancariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DadosBancariosInclude<ExtArgs> | null
    /**
     * Filter, which DadosBancarios to fetch.
     */
    where?: DadosBancariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DadosBancarios to fetch.
     */
    orderBy?: DadosBancariosOrderByWithRelationInput | DadosBancariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DadosBancarios.
     */
    cursor?: DadosBancariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DadosBancarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DadosBancarios.
     */
    skip?: number
    distinct?: DadosBancariosScalarFieldEnum | DadosBancariosScalarFieldEnum[]
  }

  /**
   * DadosBancarios create
   */
  export type DadosBancariosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DadosBancarios
     */
    select?: DadosBancariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DadosBancariosInclude<ExtArgs> | null
    /**
     * The data needed to create a DadosBancarios.
     */
    data: XOR<DadosBancariosCreateInput, DadosBancariosUncheckedCreateInput>
  }

  /**
   * DadosBancarios createMany
   */
  export type DadosBancariosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DadosBancarios.
     */
    data: DadosBancariosCreateManyInput | DadosBancariosCreateManyInput[]
  }

  /**
   * DadosBancarios createManyAndReturn
   */
  export type DadosBancariosCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DadosBancarios
     */
    select?: DadosBancariosSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DadosBancarios.
     */
    data: DadosBancariosCreateManyInput | DadosBancariosCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DadosBancariosIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DadosBancarios update
   */
  export type DadosBancariosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DadosBancarios
     */
    select?: DadosBancariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DadosBancariosInclude<ExtArgs> | null
    /**
     * The data needed to update a DadosBancarios.
     */
    data: XOR<DadosBancariosUpdateInput, DadosBancariosUncheckedUpdateInput>
    /**
     * Choose, which DadosBancarios to update.
     */
    where: DadosBancariosWhereUniqueInput
  }

  /**
   * DadosBancarios updateMany
   */
  export type DadosBancariosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DadosBancarios.
     */
    data: XOR<DadosBancariosUpdateManyMutationInput, DadosBancariosUncheckedUpdateManyInput>
    /**
     * Filter which DadosBancarios to update
     */
    where?: DadosBancariosWhereInput
  }

  /**
   * DadosBancarios upsert
   */
  export type DadosBancariosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DadosBancarios
     */
    select?: DadosBancariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DadosBancariosInclude<ExtArgs> | null
    /**
     * The filter to search for the DadosBancarios to update in case it exists.
     */
    where: DadosBancariosWhereUniqueInput
    /**
     * In case the DadosBancarios found by the `where` argument doesn't exist, create a new DadosBancarios with this data.
     */
    create: XOR<DadosBancariosCreateInput, DadosBancariosUncheckedCreateInput>
    /**
     * In case the DadosBancarios was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DadosBancariosUpdateInput, DadosBancariosUncheckedUpdateInput>
  }

  /**
   * DadosBancarios delete
   */
  export type DadosBancariosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DadosBancarios
     */
    select?: DadosBancariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DadosBancariosInclude<ExtArgs> | null
    /**
     * Filter which DadosBancarios to delete.
     */
    where: DadosBancariosWhereUniqueInput
  }

  /**
   * DadosBancarios deleteMany
   */
  export type DadosBancariosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DadosBancarios to delete
     */
    where?: DadosBancariosWhereInput
  }

  /**
   * DadosBancarios without action
   */
  export type DadosBancariosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DadosBancarios
     */
    select?: DadosBancariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DadosBancariosInclude<ExtArgs> | null
  }


  /**
   * Model Saque
   */

  export type AggregateSaque = {
    _count: SaqueCountAggregateOutputType | null
    _avg: SaqueAvgAggregateOutputType | null
    _sum: SaqueSumAggregateOutputType | null
    _min: SaqueMinAggregateOutputType | null
    _max: SaqueMaxAggregateOutputType | null
  }

  export type SaqueAvgAggregateOutputType = {
    valor: number | null
    taxa: number | null
    valorLiquido: number | null
  }

  export type SaqueSumAggregateOutputType = {
    valor: number | null
    taxa: number | null
    valorLiquido: number | null
  }

  export type SaqueMinAggregateOutputType = {
    id: string | null
    usuarioId: string | null
    valor: number | null
    taxa: number | null
    valorLiquido: number | null
    dadosBancarios: string | null
    status: string | null
    motivoRejeicao: string | null
    dataSolicitacao: Date | null
    dataProcessamento: Date | null
    dataConclusao: Date | null
    comprovante: string | null
  }

  export type SaqueMaxAggregateOutputType = {
    id: string | null
    usuarioId: string | null
    valor: number | null
    taxa: number | null
    valorLiquido: number | null
    dadosBancarios: string | null
    status: string | null
    motivoRejeicao: string | null
    dataSolicitacao: Date | null
    dataProcessamento: Date | null
    dataConclusao: Date | null
    comprovante: string | null
  }

  export type SaqueCountAggregateOutputType = {
    id: number
    usuarioId: number
    valor: number
    taxa: number
    valorLiquido: number
    dadosBancarios: number
    status: number
    motivoRejeicao: number
    dataSolicitacao: number
    dataProcessamento: number
    dataConclusao: number
    comprovante: number
    _all: number
  }


  export type SaqueAvgAggregateInputType = {
    valor?: true
    taxa?: true
    valorLiquido?: true
  }

  export type SaqueSumAggregateInputType = {
    valor?: true
    taxa?: true
    valorLiquido?: true
  }

  export type SaqueMinAggregateInputType = {
    id?: true
    usuarioId?: true
    valor?: true
    taxa?: true
    valorLiquido?: true
    dadosBancarios?: true
    status?: true
    motivoRejeicao?: true
    dataSolicitacao?: true
    dataProcessamento?: true
    dataConclusao?: true
    comprovante?: true
  }

  export type SaqueMaxAggregateInputType = {
    id?: true
    usuarioId?: true
    valor?: true
    taxa?: true
    valorLiquido?: true
    dadosBancarios?: true
    status?: true
    motivoRejeicao?: true
    dataSolicitacao?: true
    dataProcessamento?: true
    dataConclusao?: true
    comprovante?: true
  }

  export type SaqueCountAggregateInputType = {
    id?: true
    usuarioId?: true
    valor?: true
    taxa?: true
    valorLiquido?: true
    dadosBancarios?: true
    status?: true
    motivoRejeicao?: true
    dataSolicitacao?: true
    dataProcessamento?: true
    dataConclusao?: true
    comprovante?: true
    _all?: true
  }

  export type SaqueAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Saque to aggregate.
     */
    where?: SaqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Saques to fetch.
     */
    orderBy?: SaqueOrderByWithRelationInput | SaqueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SaqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Saques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Saques.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Saques
    **/
    _count?: true | SaqueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SaqueAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SaqueSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SaqueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SaqueMaxAggregateInputType
  }

  export type GetSaqueAggregateType<T extends SaqueAggregateArgs> = {
        [P in keyof T & keyof AggregateSaque]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSaque[P]>
      : GetScalarType<T[P], AggregateSaque[P]>
  }




  export type SaqueGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SaqueWhereInput
    orderBy?: SaqueOrderByWithAggregationInput | SaqueOrderByWithAggregationInput[]
    by: SaqueScalarFieldEnum[] | SaqueScalarFieldEnum
    having?: SaqueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SaqueCountAggregateInputType | true
    _avg?: SaqueAvgAggregateInputType
    _sum?: SaqueSumAggregateInputType
    _min?: SaqueMinAggregateInputType
    _max?: SaqueMaxAggregateInputType
  }

  export type SaqueGroupByOutputType = {
    id: string
    usuarioId: string
    valor: number
    taxa: number
    valorLiquido: number
    dadosBancarios: string
    status: string
    motivoRejeicao: string | null
    dataSolicitacao: Date
    dataProcessamento: Date | null
    dataConclusao: Date | null
    comprovante: string | null
    _count: SaqueCountAggregateOutputType | null
    _avg: SaqueAvgAggregateOutputType | null
    _sum: SaqueSumAggregateOutputType | null
    _min: SaqueMinAggregateOutputType | null
    _max: SaqueMaxAggregateOutputType | null
  }

  type GetSaqueGroupByPayload<T extends SaqueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SaqueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SaqueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SaqueGroupByOutputType[P]>
            : GetScalarType<T[P], SaqueGroupByOutputType[P]>
        }
      >
    >


  export type SaqueSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    valor?: boolean
    taxa?: boolean
    valorLiquido?: boolean
    dadosBancarios?: boolean
    status?: boolean
    motivoRejeicao?: boolean
    dataSolicitacao?: boolean
    dataProcessamento?: boolean
    dataConclusao?: boolean
    comprovante?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["saque"]>

  export type SaqueSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    valor?: boolean
    taxa?: boolean
    valorLiquido?: boolean
    dadosBancarios?: boolean
    status?: boolean
    motivoRejeicao?: boolean
    dataSolicitacao?: boolean
    dataProcessamento?: boolean
    dataConclusao?: boolean
    comprovante?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["saque"]>

  export type SaqueSelectScalar = {
    id?: boolean
    usuarioId?: boolean
    valor?: boolean
    taxa?: boolean
    valorLiquido?: boolean
    dadosBancarios?: boolean
    status?: boolean
    motivoRejeicao?: boolean
    dataSolicitacao?: boolean
    dataProcessamento?: boolean
    dataConclusao?: boolean
    comprovante?: boolean
  }

  export type SaqueInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type SaqueIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $SaquePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Saque"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      usuarioId: string
      valor: number
      taxa: number
      valorLiquido: number
      dadosBancarios: string
      status: string
      motivoRejeicao: string | null
      dataSolicitacao: Date
      dataProcessamento: Date | null
      dataConclusao: Date | null
      comprovante: string | null
    }, ExtArgs["result"]["saque"]>
    composites: {}
  }

  type SaqueGetPayload<S extends boolean | null | undefined | SaqueDefaultArgs> = $Result.GetResult<Prisma.$SaquePayload, S>

  type SaqueCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SaqueFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SaqueCountAggregateInputType | true
    }

  export interface SaqueDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Saque'], meta: { name: 'Saque' } }
    /**
     * Find zero or one Saque that matches the filter.
     * @param {SaqueFindUniqueArgs} args - Arguments to find a Saque
     * @example
     * // Get one Saque
     * const saque = await prisma.saque.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SaqueFindUniqueArgs>(args: SelectSubset<T, SaqueFindUniqueArgs<ExtArgs>>): Prisma__SaqueClient<$Result.GetResult<Prisma.$SaquePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Saque that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SaqueFindUniqueOrThrowArgs} args - Arguments to find a Saque
     * @example
     * // Get one Saque
     * const saque = await prisma.saque.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SaqueFindUniqueOrThrowArgs>(args: SelectSubset<T, SaqueFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SaqueClient<$Result.GetResult<Prisma.$SaquePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Saque that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaqueFindFirstArgs} args - Arguments to find a Saque
     * @example
     * // Get one Saque
     * const saque = await prisma.saque.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SaqueFindFirstArgs>(args?: SelectSubset<T, SaqueFindFirstArgs<ExtArgs>>): Prisma__SaqueClient<$Result.GetResult<Prisma.$SaquePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Saque that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaqueFindFirstOrThrowArgs} args - Arguments to find a Saque
     * @example
     * // Get one Saque
     * const saque = await prisma.saque.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SaqueFindFirstOrThrowArgs>(args?: SelectSubset<T, SaqueFindFirstOrThrowArgs<ExtArgs>>): Prisma__SaqueClient<$Result.GetResult<Prisma.$SaquePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Saques that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaqueFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Saques
     * const saques = await prisma.saque.findMany()
     * 
     * // Get first 10 Saques
     * const saques = await prisma.saque.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const saqueWithIdOnly = await prisma.saque.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SaqueFindManyArgs>(args?: SelectSubset<T, SaqueFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SaquePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Saque.
     * @param {SaqueCreateArgs} args - Arguments to create a Saque.
     * @example
     * // Create one Saque
     * const Saque = await prisma.saque.create({
     *   data: {
     *     // ... data to create a Saque
     *   }
     * })
     * 
     */
    create<T extends SaqueCreateArgs>(args: SelectSubset<T, SaqueCreateArgs<ExtArgs>>): Prisma__SaqueClient<$Result.GetResult<Prisma.$SaquePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Saques.
     * @param {SaqueCreateManyArgs} args - Arguments to create many Saques.
     * @example
     * // Create many Saques
     * const saque = await prisma.saque.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SaqueCreateManyArgs>(args?: SelectSubset<T, SaqueCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Saques and returns the data saved in the database.
     * @param {SaqueCreateManyAndReturnArgs} args - Arguments to create many Saques.
     * @example
     * // Create many Saques
     * const saque = await prisma.saque.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Saques and only return the `id`
     * const saqueWithIdOnly = await prisma.saque.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SaqueCreateManyAndReturnArgs>(args?: SelectSubset<T, SaqueCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SaquePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Saque.
     * @param {SaqueDeleteArgs} args - Arguments to delete one Saque.
     * @example
     * // Delete one Saque
     * const Saque = await prisma.saque.delete({
     *   where: {
     *     // ... filter to delete one Saque
     *   }
     * })
     * 
     */
    delete<T extends SaqueDeleteArgs>(args: SelectSubset<T, SaqueDeleteArgs<ExtArgs>>): Prisma__SaqueClient<$Result.GetResult<Prisma.$SaquePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Saque.
     * @param {SaqueUpdateArgs} args - Arguments to update one Saque.
     * @example
     * // Update one Saque
     * const saque = await prisma.saque.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SaqueUpdateArgs>(args: SelectSubset<T, SaqueUpdateArgs<ExtArgs>>): Prisma__SaqueClient<$Result.GetResult<Prisma.$SaquePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Saques.
     * @param {SaqueDeleteManyArgs} args - Arguments to filter Saques to delete.
     * @example
     * // Delete a few Saques
     * const { count } = await prisma.saque.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SaqueDeleteManyArgs>(args?: SelectSubset<T, SaqueDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Saques.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaqueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Saques
     * const saque = await prisma.saque.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SaqueUpdateManyArgs>(args: SelectSubset<T, SaqueUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Saque.
     * @param {SaqueUpsertArgs} args - Arguments to update or create a Saque.
     * @example
     * // Update or create a Saque
     * const saque = await prisma.saque.upsert({
     *   create: {
     *     // ... data to create a Saque
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Saque we want to update
     *   }
     * })
     */
    upsert<T extends SaqueUpsertArgs>(args: SelectSubset<T, SaqueUpsertArgs<ExtArgs>>): Prisma__SaqueClient<$Result.GetResult<Prisma.$SaquePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Saques.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaqueCountArgs} args - Arguments to filter Saques to count.
     * @example
     * // Count the number of Saques
     * const count = await prisma.saque.count({
     *   where: {
     *     // ... the filter for the Saques we want to count
     *   }
     * })
    **/
    count<T extends SaqueCountArgs>(
      args?: Subset<T, SaqueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SaqueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Saque.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaqueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SaqueAggregateArgs>(args: Subset<T, SaqueAggregateArgs>): Prisma.PrismaPromise<GetSaqueAggregateType<T>>

    /**
     * Group by Saque.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaqueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SaqueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SaqueGroupByArgs['orderBy'] }
        : { orderBy?: SaqueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SaqueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSaqueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Saque model
   */
  readonly fields: SaqueFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Saque.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SaqueClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Saque model
   */ 
  interface SaqueFieldRefs {
    readonly id: FieldRef<"Saque", 'String'>
    readonly usuarioId: FieldRef<"Saque", 'String'>
    readonly valor: FieldRef<"Saque", 'Float'>
    readonly taxa: FieldRef<"Saque", 'Float'>
    readonly valorLiquido: FieldRef<"Saque", 'Float'>
    readonly dadosBancarios: FieldRef<"Saque", 'String'>
    readonly status: FieldRef<"Saque", 'String'>
    readonly motivoRejeicao: FieldRef<"Saque", 'String'>
    readonly dataSolicitacao: FieldRef<"Saque", 'DateTime'>
    readonly dataProcessamento: FieldRef<"Saque", 'DateTime'>
    readonly dataConclusao: FieldRef<"Saque", 'DateTime'>
    readonly comprovante: FieldRef<"Saque", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Saque findUnique
   */
  export type SaqueFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Saque
     */
    select?: SaqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaqueInclude<ExtArgs> | null
    /**
     * Filter, which Saque to fetch.
     */
    where: SaqueWhereUniqueInput
  }

  /**
   * Saque findUniqueOrThrow
   */
  export type SaqueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Saque
     */
    select?: SaqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaqueInclude<ExtArgs> | null
    /**
     * Filter, which Saque to fetch.
     */
    where: SaqueWhereUniqueInput
  }

  /**
   * Saque findFirst
   */
  export type SaqueFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Saque
     */
    select?: SaqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaqueInclude<ExtArgs> | null
    /**
     * Filter, which Saque to fetch.
     */
    where?: SaqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Saques to fetch.
     */
    orderBy?: SaqueOrderByWithRelationInput | SaqueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Saques.
     */
    cursor?: SaqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Saques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Saques.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Saques.
     */
    distinct?: SaqueScalarFieldEnum | SaqueScalarFieldEnum[]
  }

  /**
   * Saque findFirstOrThrow
   */
  export type SaqueFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Saque
     */
    select?: SaqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaqueInclude<ExtArgs> | null
    /**
     * Filter, which Saque to fetch.
     */
    where?: SaqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Saques to fetch.
     */
    orderBy?: SaqueOrderByWithRelationInput | SaqueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Saques.
     */
    cursor?: SaqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Saques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Saques.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Saques.
     */
    distinct?: SaqueScalarFieldEnum | SaqueScalarFieldEnum[]
  }

  /**
   * Saque findMany
   */
  export type SaqueFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Saque
     */
    select?: SaqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaqueInclude<ExtArgs> | null
    /**
     * Filter, which Saques to fetch.
     */
    where?: SaqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Saques to fetch.
     */
    orderBy?: SaqueOrderByWithRelationInput | SaqueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Saques.
     */
    cursor?: SaqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Saques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Saques.
     */
    skip?: number
    distinct?: SaqueScalarFieldEnum | SaqueScalarFieldEnum[]
  }

  /**
   * Saque create
   */
  export type SaqueCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Saque
     */
    select?: SaqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaqueInclude<ExtArgs> | null
    /**
     * The data needed to create a Saque.
     */
    data: XOR<SaqueCreateInput, SaqueUncheckedCreateInput>
  }

  /**
   * Saque createMany
   */
  export type SaqueCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Saques.
     */
    data: SaqueCreateManyInput | SaqueCreateManyInput[]
  }

  /**
   * Saque createManyAndReturn
   */
  export type SaqueCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Saque
     */
    select?: SaqueSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Saques.
     */
    data: SaqueCreateManyInput | SaqueCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaqueIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Saque update
   */
  export type SaqueUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Saque
     */
    select?: SaqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaqueInclude<ExtArgs> | null
    /**
     * The data needed to update a Saque.
     */
    data: XOR<SaqueUpdateInput, SaqueUncheckedUpdateInput>
    /**
     * Choose, which Saque to update.
     */
    where: SaqueWhereUniqueInput
  }

  /**
   * Saque updateMany
   */
  export type SaqueUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Saques.
     */
    data: XOR<SaqueUpdateManyMutationInput, SaqueUncheckedUpdateManyInput>
    /**
     * Filter which Saques to update
     */
    where?: SaqueWhereInput
  }

  /**
   * Saque upsert
   */
  export type SaqueUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Saque
     */
    select?: SaqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaqueInclude<ExtArgs> | null
    /**
     * The filter to search for the Saque to update in case it exists.
     */
    where: SaqueWhereUniqueInput
    /**
     * In case the Saque found by the `where` argument doesn't exist, create a new Saque with this data.
     */
    create: XOR<SaqueCreateInput, SaqueUncheckedCreateInput>
    /**
     * In case the Saque was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SaqueUpdateInput, SaqueUncheckedUpdateInput>
  }

  /**
   * Saque delete
   */
  export type SaqueDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Saque
     */
    select?: SaqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaqueInclude<ExtArgs> | null
    /**
     * Filter which Saque to delete.
     */
    where: SaqueWhereUniqueInput
  }

  /**
   * Saque deleteMany
   */
  export type SaqueDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Saques to delete
     */
    where?: SaqueWhereInput
  }

  /**
   * Saque without action
   */
  export type SaqueDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Saque
     */
    select?: SaqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaqueInclude<ExtArgs> | null
  }


  /**
   * Model Pagamento
   */

  export type AggregatePagamento = {
    _count: PagamentoCountAggregateOutputType | null
    _avg: PagamentoAvgAggregateOutputType | null
    _sum: PagamentoSumAggregateOutputType | null
    _min: PagamentoMinAggregateOutputType | null
    _max: PagamentoMaxAggregateOutputType | null
  }

  export type PagamentoAvgAggregateOutputType = {
    valor: number | null
    sementesGeradas: number | null
  }

  export type PagamentoSumAggregateOutputType = {
    valor: number | null
    sementesGeradas: number | null
  }

  export type PagamentoMinAggregateOutputType = {
    id: string | null
    usuarioId: string | null
    tipo: string | null
    valor: number | null
    sementesGeradas: number | null
    gateway: string | null
    gatewayId: string | null
    status: string | null
    dadosPagamento: string | null
    dataPagamento: Date | null
    dataProcessamento: Date | null
  }

  export type PagamentoMaxAggregateOutputType = {
    id: string | null
    usuarioId: string | null
    tipo: string | null
    valor: number | null
    sementesGeradas: number | null
    gateway: string | null
    gatewayId: string | null
    status: string | null
    dadosPagamento: string | null
    dataPagamento: Date | null
    dataProcessamento: Date | null
  }

  export type PagamentoCountAggregateOutputType = {
    id: number
    usuarioId: number
    tipo: number
    valor: number
    sementesGeradas: number
    gateway: number
    gatewayId: number
    status: number
    dadosPagamento: number
    dataPagamento: number
    dataProcessamento: number
    _all: number
  }


  export type PagamentoAvgAggregateInputType = {
    valor?: true
    sementesGeradas?: true
  }

  export type PagamentoSumAggregateInputType = {
    valor?: true
    sementesGeradas?: true
  }

  export type PagamentoMinAggregateInputType = {
    id?: true
    usuarioId?: true
    tipo?: true
    valor?: true
    sementesGeradas?: true
    gateway?: true
    gatewayId?: true
    status?: true
    dadosPagamento?: true
    dataPagamento?: true
    dataProcessamento?: true
  }

  export type PagamentoMaxAggregateInputType = {
    id?: true
    usuarioId?: true
    tipo?: true
    valor?: true
    sementesGeradas?: true
    gateway?: true
    gatewayId?: true
    status?: true
    dadosPagamento?: true
    dataPagamento?: true
    dataProcessamento?: true
  }

  export type PagamentoCountAggregateInputType = {
    id?: true
    usuarioId?: true
    tipo?: true
    valor?: true
    sementesGeradas?: true
    gateway?: true
    gatewayId?: true
    status?: true
    dadosPagamento?: true
    dataPagamento?: true
    dataProcessamento?: true
    _all?: true
  }

  export type PagamentoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pagamento to aggregate.
     */
    where?: PagamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pagamentos to fetch.
     */
    orderBy?: PagamentoOrderByWithRelationInput | PagamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PagamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pagamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pagamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pagamentos
    **/
    _count?: true | PagamentoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PagamentoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PagamentoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PagamentoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PagamentoMaxAggregateInputType
  }

  export type GetPagamentoAggregateType<T extends PagamentoAggregateArgs> = {
        [P in keyof T & keyof AggregatePagamento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePagamento[P]>
      : GetScalarType<T[P], AggregatePagamento[P]>
  }




  export type PagamentoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PagamentoWhereInput
    orderBy?: PagamentoOrderByWithAggregationInput | PagamentoOrderByWithAggregationInput[]
    by: PagamentoScalarFieldEnum[] | PagamentoScalarFieldEnum
    having?: PagamentoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PagamentoCountAggregateInputType | true
    _avg?: PagamentoAvgAggregateInputType
    _sum?: PagamentoSumAggregateInputType
    _min?: PagamentoMinAggregateInputType
    _max?: PagamentoMaxAggregateInputType
  }

  export type PagamentoGroupByOutputType = {
    id: string
    usuarioId: string
    tipo: string
    valor: number
    sementesGeradas: number
    gateway: string
    gatewayId: string | null
    status: string
    dadosPagamento: string
    dataPagamento: Date
    dataProcessamento: Date | null
    _count: PagamentoCountAggregateOutputType | null
    _avg: PagamentoAvgAggregateOutputType | null
    _sum: PagamentoSumAggregateOutputType | null
    _min: PagamentoMinAggregateOutputType | null
    _max: PagamentoMaxAggregateOutputType | null
  }

  type GetPagamentoGroupByPayload<T extends PagamentoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PagamentoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PagamentoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PagamentoGroupByOutputType[P]>
            : GetScalarType<T[P], PagamentoGroupByOutputType[P]>
        }
      >
    >


  export type PagamentoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    tipo?: boolean
    valor?: boolean
    sementesGeradas?: boolean
    gateway?: boolean
    gatewayId?: boolean
    status?: boolean
    dadosPagamento?: boolean
    dataPagamento?: boolean
    dataProcessamento?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pagamento"]>

  export type PagamentoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    tipo?: boolean
    valor?: boolean
    sementesGeradas?: boolean
    gateway?: boolean
    gatewayId?: boolean
    status?: boolean
    dadosPagamento?: boolean
    dataPagamento?: boolean
    dataProcessamento?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pagamento"]>

  export type PagamentoSelectScalar = {
    id?: boolean
    usuarioId?: boolean
    tipo?: boolean
    valor?: boolean
    sementesGeradas?: boolean
    gateway?: boolean
    gatewayId?: boolean
    status?: boolean
    dadosPagamento?: boolean
    dataPagamento?: boolean
    dataProcessamento?: boolean
  }

  export type PagamentoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type PagamentoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $PagamentoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pagamento"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      usuarioId: string
      tipo: string
      valor: number
      sementesGeradas: number
      gateway: string
      gatewayId: string | null
      status: string
      dadosPagamento: string
      dataPagamento: Date
      dataProcessamento: Date | null
    }, ExtArgs["result"]["pagamento"]>
    composites: {}
  }

  type PagamentoGetPayload<S extends boolean | null | undefined | PagamentoDefaultArgs> = $Result.GetResult<Prisma.$PagamentoPayload, S>

  type PagamentoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PagamentoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PagamentoCountAggregateInputType | true
    }

  export interface PagamentoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pagamento'], meta: { name: 'Pagamento' } }
    /**
     * Find zero or one Pagamento that matches the filter.
     * @param {PagamentoFindUniqueArgs} args - Arguments to find a Pagamento
     * @example
     * // Get one Pagamento
     * const pagamento = await prisma.pagamento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PagamentoFindUniqueArgs>(args: SelectSubset<T, PagamentoFindUniqueArgs<ExtArgs>>): Prisma__PagamentoClient<$Result.GetResult<Prisma.$PagamentoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Pagamento that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PagamentoFindUniqueOrThrowArgs} args - Arguments to find a Pagamento
     * @example
     * // Get one Pagamento
     * const pagamento = await prisma.pagamento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PagamentoFindUniqueOrThrowArgs>(args: SelectSubset<T, PagamentoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PagamentoClient<$Result.GetResult<Prisma.$PagamentoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Pagamento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagamentoFindFirstArgs} args - Arguments to find a Pagamento
     * @example
     * // Get one Pagamento
     * const pagamento = await prisma.pagamento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PagamentoFindFirstArgs>(args?: SelectSubset<T, PagamentoFindFirstArgs<ExtArgs>>): Prisma__PagamentoClient<$Result.GetResult<Prisma.$PagamentoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Pagamento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagamentoFindFirstOrThrowArgs} args - Arguments to find a Pagamento
     * @example
     * // Get one Pagamento
     * const pagamento = await prisma.pagamento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PagamentoFindFirstOrThrowArgs>(args?: SelectSubset<T, PagamentoFindFirstOrThrowArgs<ExtArgs>>): Prisma__PagamentoClient<$Result.GetResult<Prisma.$PagamentoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Pagamentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagamentoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pagamentos
     * const pagamentos = await prisma.pagamento.findMany()
     * 
     * // Get first 10 Pagamentos
     * const pagamentos = await prisma.pagamento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pagamentoWithIdOnly = await prisma.pagamento.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PagamentoFindManyArgs>(args?: SelectSubset<T, PagamentoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PagamentoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Pagamento.
     * @param {PagamentoCreateArgs} args - Arguments to create a Pagamento.
     * @example
     * // Create one Pagamento
     * const Pagamento = await prisma.pagamento.create({
     *   data: {
     *     // ... data to create a Pagamento
     *   }
     * })
     * 
     */
    create<T extends PagamentoCreateArgs>(args: SelectSubset<T, PagamentoCreateArgs<ExtArgs>>): Prisma__PagamentoClient<$Result.GetResult<Prisma.$PagamentoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Pagamentos.
     * @param {PagamentoCreateManyArgs} args - Arguments to create many Pagamentos.
     * @example
     * // Create many Pagamentos
     * const pagamento = await prisma.pagamento.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PagamentoCreateManyArgs>(args?: SelectSubset<T, PagamentoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Pagamentos and returns the data saved in the database.
     * @param {PagamentoCreateManyAndReturnArgs} args - Arguments to create many Pagamentos.
     * @example
     * // Create many Pagamentos
     * const pagamento = await prisma.pagamento.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Pagamentos and only return the `id`
     * const pagamentoWithIdOnly = await prisma.pagamento.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PagamentoCreateManyAndReturnArgs>(args?: SelectSubset<T, PagamentoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PagamentoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Pagamento.
     * @param {PagamentoDeleteArgs} args - Arguments to delete one Pagamento.
     * @example
     * // Delete one Pagamento
     * const Pagamento = await prisma.pagamento.delete({
     *   where: {
     *     // ... filter to delete one Pagamento
     *   }
     * })
     * 
     */
    delete<T extends PagamentoDeleteArgs>(args: SelectSubset<T, PagamentoDeleteArgs<ExtArgs>>): Prisma__PagamentoClient<$Result.GetResult<Prisma.$PagamentoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Pagamento.
     * @param {PagamentoUpdateArgs} args - Arguments to update one Pagamento.
     * @example
     * // Update one Pagamento
     * const pagamento = await prisma.pagamento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PagamentoUpdateArgs>(args: SelectSubset<T, PagamentoUpdateArgs<ExtArgs>>): Prisma__PagamentoClient<$Result.GetResult<Prisma.$PagamentoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Pagamentos.
     * @param {PagamentoDeleteManyArgs} args - Arguments to filter Pagamentos to delete.
     * @example
     * // Delete a few Pagamentos
     * const { count } = await prisma.pagamento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PagamentoDeleteManyArgs>(args?: SelectSubset<T, PagamentoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pagamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagamentoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pagamentos
     * const pagamento = await prisma.pagamento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PagamentoUpdateManyArgs>(args: SelectSubset<T, PagamentoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pagamento.
     * @param {PagamentoUpsertArgs} args - Arguments to update or create a Pagamento.
     * @example
     * // Update or create a Pagamento
     * const pagamento = await prisma.pagamento.upsert({
     *   create: {
     *     // ... data to create a Pagamento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pagamento we want to update
     *   }
     * })
     */
    upsert<T extends PagamentoUpsertArgs>(args: SelectSubset<T, PagamentoUpsertArgs<ExtArgs>>): Prisma__PagamentoClient<$Result.GetResult<Prisma.$PagamentoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Pagamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagamentoCountArgs} args - Arguments to filter Pagamentos to count.
     * @example
     * // Count the number of Pagamentos
     * const count = await prisma.pagamento.count({
     *   where: {
     *     // ... the filter for the Pagamentos we want to count
     *   }
     * })
    **/
    count<T extends PagamentoCountArgs>(
      args?: Subset<T, PagamentoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PagamentoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pagamento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagamentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PagamentoAggregateArgs>(args: Subset<T, PagamentoAggregateArgs>): Prisma.PrismaPromise<GetPagamentoAggregateType<T>>

    /**
     * Group by Pagamento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagamentoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PagamentoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PagamentoGroupByArgs['orderBy'] }
        : { orderBy?: PagamentoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PagamentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPagamentoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pagamento model
   */
  readonly fields: PagamentoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pagamento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PagamentoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Pagamento model
   */ 
  interface PagamentoFieldRefs {
    readonly id: FieldRef<"Pagamento", 'String'>
    readonly usuarioId: FieldRef<"Pagamento", 'String'>
    readonly tipo: FieldRef<"Pagamento", 'String'>
    readonly valor: FieldRef<"Pagamento", 'Float'>
    readonly sementesGeradas: FieldRef<"Pagamento", 'Int'>
    readonly gateway: FieldRef<"Pagamento", 'String'>
    readonly gatewayId: FieldRef<"Pagamento", 'String'>
    readonly status: FieldRef<"Pagamento", 'String'>
    readonly dadosPagamento: FieldRef<"Pagamento", 'String'>
    readonly dataPagamento: FieldRef<"Pagamento", 'DateTime'>
    readonly dataProcessamento: FieldRef<"Pagamento", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Pagamento findUnique
   */
  export type PagamentoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagamentoInclude<ExtArgs> | null
    /**
     * Filter, which Pagamento to fetch.
     */
    where: PagamentoWhereUniqueInput
  }

  /**
   * Pagamento findUniqueOrThrow
   */
  export type PagamentoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagamentoInclude<ExtArgs> | null
    /**
     * Filter, which Pagamento to fetch.
     */
    where: PagamentoWhereUniqueInput
  }

  /**
   * Pagamento findFirst
   */
  export type PagamentoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagamentoInclude<ExtArgs> | null
    /**
     * Filter, which Pagamento to fetch.
     */
    where?: PagamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pagamentos to fetch.
     */
    orderBy?: PagamentoOrderByWithRelationInput | PagamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pagamentos.
     */
    cursor?: PagamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pagamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pagamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pagamentos.
     */
    distinct?: PagamentoScalarFieldEnum | PagamentoScalarFieldEnum[]
  }

  /**
   * Pagamento findFirstOrThrow
   */
  export type PagamentoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagamentoInclude<ExtArgs> | null
    /**
     * Filter, which Pagamento to fetch.
     */
    where?: PagamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pagamentos to fetch.
     */
    orderBy?: PagamentoOrderByWithRelationInput | PagamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pagamentos.
     */
    cursor?: PagamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pagamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pagamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pagamentos.
     */
    distinct?: PagamentoScalarFieldEnum | PagamentoScalarFieldEnum[]
  }

  /**
   * Pagamento findMany
   */
  export type PagamentoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagamentoInclude<ExtArgs> | null
    /**
     * Filter, which Pagamentos to fetch.
     */
    where?: PagamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pagamentos to fetch.
     */
    orderBy?: PagamentoOrderByWithRelationInput | PagamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pagamentos.
     */
    cursor?: PagamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pagamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pagamentos.
     */
    skip?: number
    distinct?: PagamentoScalarFieldEnum | PagamentoScalarFieldEnum[]
  }

  /**
   * Pagamento create
   */
  export type PagamentoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagamentoInclude<ExtArgs> | null
    /**
     * The data needed to create a Pagamento.
     */
    data: XOR<PagamentoCreateInput, PagamentoUncheckedCreateInput>
  }

  /**
   * Pagamento createMany
   */
  export type PagamentoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pagamentos.
     */
    data: PagamentoCreateManyInput | PagamentoCreateManyInput[]
  }

  /**
   * Pagamento createManyAndReturn
   */
  export type PagamentoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Pagamentos.
     */
    data: PagamentoCreateManyInput | PagamentoCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagamentoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Pagamento update
   */
  export type PagamentoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagamentoInclude<ExtArgs> | null
    /**
     * The data needed to update a Pagamento.
     */
    data: XOR<PagamentoUpdateInput, PagamentoUncheckedUpdateInput>
    /**
     * Choose, which Pagamento to update.
     */
    where: PagamentoWhereUniqueInput
  }

  /**
   * Pagamento updateMany
   */
  export type PagamentoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pagamentos.
     */
    data: XOR<PagamentoUpdateManyMutationInput, PagamentoUncheckedUpdateManyInput>
    /**
     * Filter which Pagamentos to update
     */
    where?: PagamentoWhereInput
  }

  /**
   * Pagamento upsert
   */
  export type PagamentoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagamentoInclude<ExtArgs> | null
    /**
     * The filter to search for the Pagamento to update in case it exists.
     */
    where: PagamentoWhereUniqueInput
    /**
     * In case the Pagamento found by the `where` argument doesn't exist, create a new Pagamento with this data.
     */
    create: XOR<PagamentoCreateInput, PagamentoUncheckedCreateInput>
    /**
     * In case the Pagamento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PagamentoUpdateInput, PagamentoUncheckedUpdateInput>
  }

  /**
   * Pagamento delete
   */
  export type PagamentoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagamentoInclude<ExtArgs> | null
    /**
     * Filter which Pagamento to delete.
     */
    where: PagamentoWhereUniqueInput
  }

  /**
   * Pagamento deleteMany
   */
  export type PagamentoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pagamentos to delete
     */
    where?: PagamentoWhereInput
  }

  /**
   * Pagamento without action
   */
  export type PagamentoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagamentoInclude<ExtArgs> | null
  }


  /**
   * Model Criador
   */

  export type AggregateCriador = {
    _count: CriadorCountAggregateOutputType | null
    _avg: CriadorAvgAggregateOutputType | null
    _sum: CriadorSumAggregateOutputType | null
    _min: CriadorMinAggregateOutputType | null
    _max: CriadorMaxAggregateOutputType | null
  }

  export type CriadorAvgAggregateOutputType = {
    sementes: number | null
    apoiadores: number | null
    doacoes: number | null
  }

  export type CriadorSumAggregateOutputType = {
    sementes: number | null
    apoiadores: number | null
    doacoes: number | null
  }

  export type CriadorMinAggregateOutputType = {
    id: string | null
    usuarioId: string | null
    nome: string | null
    bio: string | null
    categoria: string | null
    redesSociais: string | null
    portfolio: string | null
    nivel: string | null
    sementes: number | null
    apoiadores: number | null
    doacoes: number | null
    dataCriacao: Date | null
  }

  export type CriadorMaxAggregateOutputType = {
    id: string | null
    usuarioId: string | null
    nome: string | null
    bio: string | null
    categoria: string | null
    redesSociais: string | null
    portfolio: string | null
    nivel: string | null
    sementes: number | null
    apoiadores: number | null
    doacoes: number | null
    dataCriacao: Date | null
  }

  export type CriadorCountAggregateOutputType = {
    id: number
    usuarioId: number
    nome: number
    bio: number
    categoria: number
    redesSociais: number
    portfolio: number
    nivel: number
    sementes: number
    apoiadores: number
    doacoes: number
    dataCriacao: number
    _all: number
  }


  export type CriadorAvgAggregateInputType = {
    sementes?: true
    apoiadores?: true
    doacoes?: true
  }

  export type CriadorSumAggregateInputType = {
    sementes?: true
    apoiadores?: true
    doacoes?: true
  }

  export type CriadorMinAggregateInputType = {
    id?: true
    usuarioId?: true
    nome?: true
    bio?: true
    categoria?: true
    redesSociais?: true
    portfolio?: true
    nivel?: true
    sementes?: true
    apoiadores?: true
    doacoes?: true
    dataCriacao?: true
  }

  export type CriadorMaxAggregateInputType = {
    id?: true
    usuarioId?: true
    nome?: true
    bio?: true
    categoria?: true
    redesSociais?: true
    portfolio?: true
    nivel?: true
    sementes?: true
    apoiadores?: true
    doacoes?: true
    dataCriacao?: true
  }

  export type CriadorCountAggregateInputType = {
    id?: true
    usuarioId?: true
    nome?: true
    bio?: true
    categoria?: true
    redesSociais?: true
    portfolio?: true
    nivel?: true
    sementes?: true
    apoiadores?: true
    doacoes?: true
    dataCriacao?: true
    _all?: true
  }

  export type CriadorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Criador to aggregate.
     */
    where?: CriadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Criadors to fetch.
     */
    orderBy?: CriadorOrderByWithRelationInput | CriadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CriadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Criadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Criadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Criadors
    **/
    _count?: true | CriadorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CriadorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CriadorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CriadorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CriadorMaxAggregateInputType
  }

  export type GetCriadorAggregateType<T extends CriadorAggregateArgs> = {
        [P in keyof T & keyof AggregateCriador]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCriador[P]>
      : GetScalarType<T[P], AggregateCriador[P]>
  }




  export type CriadorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CriadorWhereInput
    orderBy?: CriadorOrderByWithAggregationInput | CriadorOrderByWithAggregationInput[]
    by: CriadorScalarFieldEnum[] | CriadorScalarFieldEnum
    having?: CriadorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CriadorCountAggregateInputType | true
    _avg?: CriadorAvgAggregateInputType
    _sum?: CriadorSumAggregateInputType
    _min?: CriadorMinAggregateInputType
    _max?: CriadorMaxAggregateInputType
  }

  export type CriadorGroupByOutputType = {
    id: string
    usuarioId: string
    nome: string
    bio: string
    categoria: string
    redesSociais: string
    portfolio: string
    nivel: string
    sementes: number
    apoiadores: number
    doacoes: number
    dataCriacao: Date
    _count: CriadorCountAggregateOutputType | null
    _avg: CriadorAvgAggregateOutputType | null
    _sum: CriadorSumAggregateOutputType | null
    _min: CriadorMinAggregateOutputType | null
    _max: CriadorMaxAggregateOutputType | null
  }

  type GetCriadorGroupByPayload<T extends CriadorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CriadorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CriadorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CriadorGroupByOutputType[P]>
            : GetScalarType<T[P], CriadorGroupByOutputType[P]>
        }
      >
    >


  export type CriadorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    nome?: boolean
    bio?: boolean
    categoria?: boolean
    redesSociais?: boolean
    portfolio?: boolean
    nivel?: boolean
    sementes?: boolean
    apoiadores?: boolean
    doacoes?: boolean
    dataCriacao?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    doacoesRecebidas?: boolean | Criador$doacoesRecebidasArgs<ExtArgs>
    _count?: boolean | CriadorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["criador"]>

  export type CriadorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    nome?: boolean
    bio?: boolean
    categoria?: boolean
    redesSociais?: boolean
    portfolio?: boolean
    nivel?: boolean
    sementes?: boolean
    apoiadores?: boolean
    doacoes?: boolean
    dataCriacao?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["criador"]>

  export type CriadorSelectScalar = {
    id?: boolean
    usuarioId?: boolean
    nome?: boolean
    bio?: boolean
    categoria?: boolean
    redesSociais?: boolean
    portfolio?: boolean
    nivel?: boolean
    sementes?: boolean
    apoiadores?: boolean
    doacoes?: boolean
    dataCriacao?: boolean
  }

  export type CriadorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    doacoesRecebidas?: boolean | Criador$doacoesRecebidasArgs<ExtArgs>
    _count?: boolean | CriadorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CriadorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $CriadorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Criador"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
      doacoesRecebidas: Prisma.$DoacaoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      usuarioId: string
      nome: string
      bio: string
      categoria: string
      redesSociais: string
      portfolio: string
      nivel: string
      sementes: number
      apoiadores: number
      doacoes: number
      dataCriacao: Date
    }, ExtArgs["result"]["criador"]>
    composites: {}
  }

  type CriadorGetPayload<S extends boolean | null | undefined | CriadorDefaultArgs> = $Result.GetResult<Prisma.$CriadorPayload, S>

  type CriadorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CriadorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CriadorCountAggregateInputType | true
    }

  export interface CriadorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Criador'], meta: { name: 'Criador' } }
    /**
     * Find zero or one Criador that matches the filter.
     * @param {CriadorFindUniqueArgs} args - Arguments to find a Criador
     * @example
     * // Get one Criador
     * const criador = await prisma.criador.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CriadorFindUniqueArgs>(args: SelectSubset<T, CriadorFindUniqueArgs<ExtArgs>>): Prisma__CriadorClient<$Result.GetResult<Prisma.$CriadorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Criador that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CriadorFindUniqueOrThrowArgs} args - Arguments to find a Criador
     * @example
     * // Get one Criador
     * const criador = await prisma.criador.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CriadorFindUniqueOrThrowArgs>(args: SelectSubset<T, CriadorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CriadorClient<$Result.GetResult<Prisma.$CriadorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Criador that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CriadorFindFirstArgs} args - Arguments to find a Criador
     * @example
     * // Get one Criador
     * const criador = await prisma.criador.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CriadorFindFirstArgs>(args?: SelectSubset<T, CriadorFindFirstArgs<ExtArgs>>): Prisma__CriadorClient<$Result.GetResult<Prisma.$CriadorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Criador that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CriadorFindFirstOrThrowArgs} args - Arguments to find a Criador
     * @example
     * // Get one Criador
     * const criador = await prisma.criador.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CriadorFindFirstOrThrowArgs>(args?: SelectSubset<T, CriadorFindFirstOrThrowArgs<ExtArgs>>): Prisma__CriadorClient<$Result.GetResult<Prisma.$CriadorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Criadors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CriadorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Criadors
     * const criadors = await prisma.criador.findMany()
     * 
     * // Get first 10 Criadors
     * const criadors = await prisma.criador.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const criadorWithIdOnly = await prisma.criador.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CriadorFindManyArgs>(args?: SelectSubset<T, CriadorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CriadorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Criador.
     * @param {CriadorCreateArgs} args - Arguments to create a Criador.
     * @example
     * // Create one Criador
     * const Criador = await prisma.criador.create({
     *   data: {
     *     // ... data to create a Criador
     *   }
     * })
     * 
     */
    create<T extends CriadorCreateArgs>(args: SelectSubset<T, CriadorCreateArgs<ExtArgs>>): Prisma__CriadorClient<$Result.GetResult<Prisma.$CriadorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Criadors.
     * @param {CriadorCreateManyArgs} args - Arguments to create many Criadors.
     * @example
     * // Create many Criadors
     * const criador = await prisma.criador.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CriadorCreateManyArgs>(args?: SelectSubset<T, CriadorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Criadors and returns the data saved in the database.
     * @param {CriadorCreateManyAndReturnArgs} args - Arguments to create many Criadors.
     * @example
     * // Create many Criadors
     * const criador = await prisma.criador.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Criadors and only return the `id`
     * const criadorWithIdOnly = await prisma.criador.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CriadorCreateManyAndReturnArgs>(args?: SelectSubset<T, CriadorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CriadorPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Criador.
     * @param {CriadorDeleteArgs} args - Arguments to delete one Criador.
     * @example
     * // Delete one Criador
     * const Criador = await prisma.criador.delete({
     *   where: {
     *     // ... filter to delete one Criador
     *   }
     * })
     * 
     */
    delete<T extends CriadorDeleteArgs>(args: SelectSubset<T, CriadorDeleteArgs<ExtArgs>>): Prisma__CriadorClient<$Result.GetResult<Prisma.$CriadorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Criador.
     * @param {CriadorUpdateArgs} args - Arguments to update one Criador.
     * @example
     * // Update one Criador
     * const criador = await prisma.criador.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CriadorUpdateArgs>(args: SelectSubset<T, CriadorUpdateArgs<ExtArgs>>): Prisma__CriadorClient<$Result.GetResult<Prisma.$CriadorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Criadors.
     * @param {CriadorDeleteManyArgs} args - Arguments to filter Criadors to delete.
     * @example
     * // Delete a few Criadors
     * const { count } = await prisma.criador.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CriadorDeleteManyArgs>(args?: SelectSubset<T, CriadorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Criadors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CriadorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Criadors
     * const criador = await prisma.criador.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CriadorUpdateManyArgs>(args: SelectSubset<T, CriadorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Criador.
     * @param {CriadorUpsertArgs} args - Arguments to update or create a Criador.
     * @example
     * // Update or create a Criador
     * const criador = await prisma.criador.upsert({
     *   create: {
     *     // ... data to create a Criador
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Criador we want to update
     *   }
     * })
     */
    upsert<T extends CriadorUpsertArgs>(args: SelectSubset<T, CriadorUpsertArgs<ExtArgs>>): Prisma__CriadorClient<$Result.GetResult<Prisma.$CriadorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Criadors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CriadorCountArgs} args - Arguments to filter Criadors to count.
     * @example
     * // Count the number of Criadors
     * const count = await prisma.criador.count({
     *   where: {
     *     // ... the filter for the Criadors we want to count
     *   }
     * })
    **/
    count<T extends CriadorCountArgs>(
      args?: Subset<T, CriadorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CriadorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Criador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CriadorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CriadorAggregateArgs>(args: Subset<T, CriadorAggregateArgs>): Prisma.PrismaPromise<GetCriadorAggregateType<T>>

    /**
     * Group by Criador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CriadorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CriadorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CriadorGroupByArgs['orderBy'] }
        : { orderBy?: CriadorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CriadorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCriadorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Criador model
   */
  readonly fields: CriadorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Criador.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CriadorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    doacoesRecebidas<T extends Criador$doacoesRecebidasArgs<ExtArgs> = {}>(args?: Subset<T, Criador$doacoesRecebidasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoacaoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Criador model
   */ 
  interface CriadorFieldRefs {
    readonly id: FieldRef<"Criador", 'String'>
    readonly usuarioId: FieldRef<"Criador", 'String'>
    readonly nome: FieldRef<"Criador", 'String'>
    readonly bio: FieldRef<"Criador", 'String'>
    readonly categoria: FieldRef<"Criador", 'String'>
    readonly redesSociais: FieldRef<"Criador", 'String'>
    readonly portfolio: FieldRef<"Criador", 'String'>
    readonly nivel: FieldRef<"Criador", 'String'>
    readonly sementes: FieldRef<"Criador", 'Int'>
    readonly apoiadores: FieldRef<"Criador", 'Int'>
    readonly doacoes: FieldRef<"Criador", 'Int'>
    readonly dataCriacao: FieldRef<"Criador", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Criador findUnique
   */
  export type CriadorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Criador
     */
    select?: CriadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CriadorInclude<ExtArgs> | null
    /**
     * Filter, which Criador to fetch.
     */
    where: CriadorWhereUniqueInput
  }

  /**
   * Criador findUniqueOrThrow
   */
  export type CriadorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Criador
     */
    select?: CriadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CriadorInclude<ExtArgs> | null
    /**
     * Filter, which Criador to fetch.
     */
    where: CriadorWhereUniqueInput
  }

  /**
   * Criador findFirst
   */
  export type CriadorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Criador
     */
    select?: CriadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CriadorInclude<ExtArgs> | null
    /**
     * Filter, which Criador to fetch.
     */
    where?: CriadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Criadors to fetch.
     */
    orderBy?: CriadorOrderByWithRelationInput | CriadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Criadors.
     */
    cursor?: CriadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Criadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Criadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Criadors.
     */
    distinct?: CriadorScalarFieldEnum | CriadorScalarFieldEnum[]
  }

  /**
   * Criador findFirstOrThrow
   */
  export type CriadorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Criador
     */
    select?: CriadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CriadorInclude<ExtArgs> | null
    /**
     * Filter, which Criador to fetch.
     */
    where?: CriadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Criadors to fetch.
     */
    orderBy?: CriadorOrderByWithRelationInput | CriadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Criadors.
     */
    cursor?: CriadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Criadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Criadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Criadors.
     */
    distinct?: CriadorScalarFieldEnum | CriadorScalarFieldEnum[]
  }

  /**
   * Criador findMany
   */
  export type CriadorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Criador
     */
    select?: CriadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CriadorInclude<ExtArgs> | null
    /**
     * Filter, which Criadors to fetch.
     */
    where?: CriadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Criadors to fetch.
     */
    orderBy?: CriadorOrderByWithRelationInput | CriadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Criadors.
     */
    cursor?: CriadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Criadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Criadors.
     */
    skip?: number
    distinct?: CriadorScalarFieldEnum | CriadorScalarFieldEnum[]
  }

  /**
   * Criador create
   */
  export type CriadorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Criador
     */
    select?: CriadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CriadorInclude<ExtArgs> | null
    /**
     * The data needed to create a Criador.
     */
    data: XOR<CriadorCreateInput, CriadorUncheckedCreateInput>
  }

  /**
   * Criador createMany
   */
  export type CriadorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Criadors.
     */
    data: CriadorCreateManyInput | CriadorCreateManyInput[]
  }

  /**
   * Criador createManyAndReturn
   */
  export type CriadorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Criador
     */
    select?: CriadorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Criadors.
     */
    data: CriadorCreateManyInput | CriadorCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CriadorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Criador update
   */
  export type CriadorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Criador
     */
    select?: CriadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CriadorInclude<ExtArgs> | null
    /**
     * The data needed to update a Criador.
     */
    data: XOR<CriadorUpdateInput, CriadorUncheckedUpdateInput>
    /**
     * Choose, which Criador to update.
     */
    where: CriadorWhereUniqueInput
  }

  /**
   * Criador updateMany
   */
  export type CriadorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Criadors.
     */
    data: XOR<CriadorUpdateManyMutationInput, CriadorUncheckedUpdateManyInput>
    /**
     * Filter which Criadors to update
     */
    where?: CriadorWhereInput
  }

  /**
   * Criador upsert
   */
  export type CriadorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Criador
     */
    select?: CriadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CriadorInclude<ExtArgs> | null
    /**
     * The filter to search for the Criador to update in case it exists.
     */
    where: CriadorWhereUniqueInput
    /**
     * In case the Criador found by the `where` argument doesn't exist, create a new Criador with this data.
     */
    create: XOR<CriadorCreateInput, CriadorUncheckedCreateInput>
    /**
     * In case the Criador was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CriadorUpdateInput, CriadorUncheckedUpdateInput>
  }

  /**
   * Criador delete
   */
  export type CriadorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Criador
     */
    select?: CriadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CriadorInclude<ExtArgs> | null
    /**
     * Filter which Criador to delete.
     */
    where: CriadorWhereUniqueInput
  }

  /**
   * Criador deleteMany
   */
  export type CriadorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Criadors to delete
     */
    where?: CriadorWhereInput
  }

  /**
   * Criador.doacoesRecebidas
   */
  export type Criador$doacoesRecebidasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doacao
     */
    select?: DoacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoacaoInclude<ExtArgs> | null
    where?: DoacaoWhereInput
    orderBy?: DoacaoOrderByWithRelationInput | DoacaoOrderByWithRelationInput[]
    cursor?: DoacaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoacaoScalarFieldEnum | DoacaoScalarFieldEnum[]
  }

  /**
   * Criador without action
   */
  export type CriadorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Criador
     */
    select?: CriadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CriadorInclude<ExtArgs> | null
  }


  /**
   * Model CandidaturaCriador
   */

  export type AggregateCandidaturaCriador = {
    _count: CandidaturaCriadorCountAggregateOutputType | null
    _min: CandidaturaCriadorMinAggregateOutputType | null
    _max: CandidaturaCriadorMaxAggregateOutputType | null
  }

  export type CandidaturaCriadorMinAggregateOutputType = {
    id: string | null
    usuarioId: string | null
    nome: string | null
    email: string | null
    bio: string | null
    categoria: string | null
    redesSociais: string | null
    portfolio: string | null
    experiencia: string | null
    motivacao: string | null
    metas: string | null
    disponibilidade: string | null
    status: string | null
    dataCandidatura: Date | null
    dataRevisao: Date | null
    observacoes: string | null
  }

  export type CandidaturaCriadorMaxAggregateOutputType = {
    id: string | null
    usuarioId: string | null
    nome: string | null
    email: string | null
    bio: string | null
    categoria: string | null
    redesSociais: string | null
    portfolio: string | null
    experiencia: string | null
    motivacao: string | null
    metas: string | null
    disponibilidade: string | null
    status: string | null
    dataCandidatura: Date | null
    dataRevisao: Date | null
    observacoes: string | null
  }

  export type CandidaturaCriadorCountAggregateOutputType = {
    id: number
    usuarioId: number
    nome: number
    email: number
    bio: number
    categoria: number
    redesSociais: number
    portfolio: number
    experiencia: number
    motivacao: number
    metas: number
    disponibilidade: number
    status: number
    dataCandidatura: number
    dataRevisao: number
    observacoes: number
    _all: number
  }


  export type CandidaturaCriadorMinAggregateInputType = {
    id?: true
    usuarioId?: true
    nome?: true
    email?: true
    bio?: true
    categoria?: true
    redesSociais?: true
    portfolio?: true
    experiencia?: true
    motivacao?: true
    metas?: true
    disponibilidade?: true
    status?: true
    dataCandidatura?: true
    dataRevisao?: true
    observacoes?: true
  }

  export type CandidaturaCriadorMaxAggregateInputType = {
    id?: true
    usuarioId?: true
    nome?: true
    email?: true
    bio?: true
    categoria?: true
    redesSociais?: true
    portfolio?: true
    experiencia?: true
    motivacao?: true
    metas?: true
    disponibilidade?: true
    status?: true
    dataCandidatura?: true
    dataRevisao?: true
    observacoes?: true
  }

  export type CandidaturaCriadorCountAggregateInputType = {
    id?: true
    usuarioId?: true
    nome?: true
    email?: true
    bio?: true
    categoria?: true
    redesSociais?: true
    portfolio?: true
    experiencia?: true
    motivacao?: true
    metas?: true
    disponibilidade?: true
    status?: true
    dataCandidatura?: true
    dataRevisao?: true
    observacoes?: true
    _all?: true
  }

  export type CandidaturaCriadorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CandidaturaCriador to aggregate.
     */
    where?: CandidaturaCriadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidaturaCriadors to fetch.
     */
    orderBy?: CandidaturaCriadorOrderByWithRelationInput | CandidaturaCriadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CandidaturaCriadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidaturaCriadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidaturaCriadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CandidaturaCriadors
    **/
    _count?: true | CandidaturaCriadorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CandidaturaCriadorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CandidaturaCriadorMaxAggregateInputType
  }

  export type GetCandidaturaCriadorAggregateType<T extends CandidaturaCriadorAggregateArgs> = {
        [P in keyof T & keyof AggregateCandidaturaCriador]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCandidaturaCriador[P]>
      : GetScalarType<T[P], AggregateCandidaturaCriador[P]>
  }




  export type CandidaturaCriadorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidaturaCriadorWhereInput
    orderBy?: CandidaturaCriadorOrderByWithAggregationInput | CandidaturaCriadorOrderByWithAggregationInput[]
    by: CandidaturaCriadorScalarFieldEnum[] | CandidaturaCriadorScalarFieldEnum
    having?: CandidaturaCriadorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CandidaturaCriadorCountAggregateInputType | true
    _min?: CandidaturaCriadorMinAggregateInputType
    _max?: CandidaturaCriadorMaxAggregateInputType
  }

  export type CandidaturaCriadorGroupByOutputType = {
    id: string
    usuarioId: string
    nome: string
    email: string
    bio: string
    categoria: string
    redesSociais: string
    portfolio: string
    experiencia: string
    motivacao: string
    metas: string
    disponibilidade: string
    status: string
    dataCandidatura: Date
    dataRevisao: Date | null
    observacoes: string | null
    _count: CandidaturaCriadorCountAggregateOutputType | null
    _min: CandidaturaCriadorMinAggregateOutputType | null
    _max: CandidaturaCriadorMaxAggregateOutputType | null
  }

  type GetCandidaturaCriadorGroupByPayload<T extends CandidaturaCriadorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CandidaturaCriadorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CandidaturaCriadorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CandidaturaCriadorGroupByOutputType[P]>
            : GetScalarType<T[P], CandidaturaCriadorGroupByOutputType[P]>
        }
      >
    >


  export type CandidaturaCriadorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    nome?: boolean
    email?: boolean
    bio?: boolean
    categoria?: boolean
    redesSociais?: boolean
    portfolio?: boolean
    experiencia?: boolean
    motivacao?: boolean
    metas?: boolean
    disponibilidade?: boolean
    status?: boolean
    dataCandidatura?: boolean
    dataRevisao?: boolean
    observacoes?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidaturaCriador"]>

  export type CandidaturaCriadorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    nome?: boolean
    email?: boolean
    bio?: boolean
    categoria?: boolean
    redesSociais?: boolean
    portfolio?: boolean
    experiencia?: boolean
    motivacao?: boolean
    metas?: boolean
    disponibilidade?: boolean
    status?: boolean
    dataCandidatura?: boolean
    dataRevisao?: boolean
    observacoes?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidaturaCriador"]>

  export type CandidaturaCriadorSelectScalar = {
    id?: boolean
    usuarioId?: boolean
    nome?: boolean
    email?: boolean
    bio?: boolean
    categoria?: boolean
    redesSociais?: boolean
    portfolio?: boolean
    experiencia?: boolean
    motivacao?: boolean
    metas?: boolean
    disponibilidade?: boolean
    status?: boolean
    dataCandidatura?: boolean
    dataRevisao?: boolean
    observacoes?: boolean
  }

  export type CandidaturaCriadorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type CandidaturaCriadorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $CandidaturaCriadorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CandidaturaCriador"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      usuarioId: string
      nome: string
      email: string
      bio: string
      categoria: string
      redesSociais: string
      portfolio: string
      experiencia: string
      motivacao: string
      metas: string
      disponibilidade: string
      status: string
      dataCandidatura: Date
      dataRevisao: Date | null
      observacoes: string | null
    }, ExtArgs["result"]["candidaturaCriador"]>
    composites: {}
  }

  type CandidaturaCriadorGetPayload<S extends boolean | null | undefined | CandidaturaCriadorDefaultArgs> = $Result.GetResult<Prisma.$CandidaturaCriadorPayload, S>

  type CandidaturaCriadorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CandidaturaCriadorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CandidaturaCriadorCountAggregateInputType | true
    }

  export interface CandidaturaCriadorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CandidaturaCriador'], meta: { name: 'CandidaturaCriador' } }
    /**
     * Find zero or one CandidaturaCriador that matches the filter.
     * @param {CandidaturaCriadorFindUniqueArgs} args - Arguments to find a CandidaturaCriador
     * @example
     * // Get one CandidaturaCriador
     * const candidaturaCriador = await prisma.candidaturaCriador.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CandidaturaCriadorFindUniqueArgs>(args: SelectSubset<T, CandidaturaCriadorFindUniqueArgs<ExtArgs>>): Prisma__CandidaturaCriadorClient<$Result.GetResult<Prisma.$CandidaturaCriadorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CandidaturaCriador that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CandidaturaCriadorFindUniqueOrThrowArgs} args - Arguments to find a CandidaturaCriador
     * @example
     * // Get one CandidaturaCriador
     * const candidaturaCriador = await prisma.candidaturaCriador.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CandidaturaCriadorFindUniqueOrThrowArgs>(args: SelectSubset<T, CandidaturaCriadorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CandidaturaCriadorClient<$Result.GetResult<Prisma.$CandidaturaCriadorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CandidaturaCriador that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidaturaCriadorFindFirstArgs} args - Arguments to find a CandidaturaCriador
     * @example
     * // Get one CandidaturaCriador
     * const candidaturaCriador = await prisma.candidaturaCriador.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CandidaturaCriadorFindFirstArgs>(args?: SelectSubset<T, CandidaturaCriadorFindFirstArgs<ExtArgs>>): Prisma__CandidaturaCriadorClient<$Result.GetResult<Prisma.$CandidaturaCriadorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CandidaturaCriador that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidaturaCriadorFindFirstOrThrowArgs} args - Arguments to find a CandidaturaCriador
     * @example
     * // Get one CandidaturaCriador
     * const candidaturaCriador = await prisma.candidaturaCriador.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CandidaturaCriadorFindFirstOrThrowArgs>(args?: SelectSubset<T, CandidaturaCriadorFindFirstOrThrowArgs<ExtArgs>>): Prisma__CandidaturaCriadorClient<$Result.GetResult<Prisma.$CandidaturaCriadorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CandidaturaCriadors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidaturaCriadorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CandidaturaCriadors
     * const candidaturaCriadors = await prisma.candidaturaCriador.findMany()
     * 
     * // Get first 10 CandidaturaCriadors
     * const candidaturaCriadors = await prisma.candidaturaCriador.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const candidaturaCriadorWithIdOnly = await prisma.candidaturaCriador.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CandidaturaCriadorFindManyArgs>(args?: SelectSubset<T, CandidaturaCriadorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidaturaCriadorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CandidaturaCriador.
     * @param {CandidaturaCriadorCreateArgs} args - Arguments to create a CandidaturaCriador.
     * @example
     * // Create one CandidaturaCriador
     * const CandidaturaCriador = await prisma.candidaturaCriador.create({
     *   data: {
     *     // ... data to create a CandidaturaCriador
     *   }
     * })
     * 
     */
    create<T extends CandidaturaCriadorCreateArgs>(args: SelectSubset<T, CandidaturaCriadorCreateArgs<ExtArgs>>): Prisma__CandidaturaCriadorClient<$Result.GetResult<Prisma.$CandidaturaCriadorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CandidaturaCriadors.
     * @param {CandidaturaCriadorCreateManyArgs} args - Arguments to create many CandidaturaCriadors.
     * @example
     * // Create many CandidaturaCriadors
     * const candidaturaCriador = await prisma.candidaturaCriador.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CandidaturaCriadorCreateManyArgs>(args?: SelectSubset<T, CandidaturaCriadorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CandidaturaCriadors and returns the data saved in the database.
     * @param {CandidaturaCriadorCreateManyAndReturnArgs} args - Arguments to create many CandidaturaCriadors.
     * @example
     * // Create many CandidaturaCriadors
     * const candidaturaCriador = await prisma.candidaturaCriador.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CandidaturaCriadors and only return the `id`
     * const candidaturaCriadorWithIdOnly = await prisma.candidaturaCriador.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CandidaturaCriadorCreateManyAndReturnArgs>(args?: SelectSubset<T, CandidaturaCriadorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidaturaCriadorPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CandidaturaCriador.
     * @param {CandidaturaCriadorDeleteArgs} args - Arguments to delete one CandidaturaCriador.
     * @example
     * // Delete one CandidaturaCriador
     * const CandidaturaCriador = await prisma.candidaturaCriador.delete({
     *   where: {
     *     // ... filter to delete one CandidaturaCriador
     *   }
     * })
     * 
     */
    delete<T extends CandidaturaCriadorDeleteArgs>(args: SelectSubset<T, CandidaturaCriadorDeleteArgs<ExtArgs>>): Prisma__CandidaturaCriadorClient<$Result.GetResult<Prisma.$CandidaturaCriadorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CandidaturaCriador.
     * @param {CandidaturaCriadorUpdateArgs} args - Arguments to update one CandidaturaCriador.
     * @example
     * // Update one CandidaturaCriador
     * const candidaturaCriador = await prisma.candidaturaCriador.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CandidaturaCriadorUpdateArgs>(args: SelectSubset<T, CandidaturaCriadorUpdateArgs<ExtArgs>>): Prisma__CandidaturaCriadorClient<$Result.GetResult<Prisma.$CandidaturaCriadorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CandidaturaCriadors.
     * @param {CandidaturaCriadorDeleteManyArgs} args - Arguments to filter CandidaturaCriadors to delete.
     * @example
     * // Delete a few CandidaturaCriadors
     * const { count } = await prisma.candidaturaCriador.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CandidaturaCriadorDeleteManyArgs>(args?: SelectSubset<T, CandidaturaCriadorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CandidaturaCriadors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidaturaCriadorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CandidaturaCriadors
     * const candidaturaCriador = await prisma.candidaturaCriador.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CandidaturaCriadorUpdateManyArgs>(args: SelectSubset<T, CandidaturaCriadorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CandidaturaCriador.
     * @param {CandidaturaCriadorUpsertArgs} args - Arguments to update or create a CandidaturaCriador.
     * @example
     * // Update or create a CandidaturaCriador
     * const candidaturaCriador = await prisma.candidaturaCriador.upsert({
     *   create: {
     *     // ... data to create a CandidaturaCriador
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CandidaturaCriador we want to update
     *   }
     * })
     */
    upsert<T extends CandidaturaCriadorUpsertArgs>(args: SelectSubset<T, CandidaturaCriadorUpsertArgs<ExtArgs>>): Prisma__CandidaturaCriadorClient<$Result.GetResult<Prisma.$CandidaturaCriadorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CandidaturaCriadors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidaturaCriadorCountArgs} args - Arguments to filter CandidaturaCriadors to count.
     * @example
     * // Count the number of CandidaturaCriadors
     * const count = await prisma.candidaturaCriador.count({
     *   where: {
     *     // ... the filter for the CandidaturaCriadors we want to count
     *   }
     * })
    **/
    count<T extends CandidaturaCriadorCountArgs>(
      args?: Subset<T, CandidaturaCriadorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CandidaturaCriadorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CandidaturaCriador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidaturaCriadorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CandidaturaCriadorAggregateArgs>(args: Subset<T, CandidaturaCriadorAggregateArgs>): Prisma.PrismaPromise<GetCandidaturaCriadorAggregateType<T>>

    /**
     * Group by CandidaturaCriador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidaturaCriadorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CandidaturaCriadorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CandidaturaCriadorGroupByArgs['orderBy'] }
        : { orderBy?: CandidaturaCriadorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CandidaturaCriadorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCandidaturaCriadorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CandidaturaCriador model
   */
  readonly fields: CandidaturaCriadorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CandidaturaCriador.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CandidaturaCriadorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CandidaturaCriador model
   */ 
  interface CandidaturaCriadorFieldRefs {
    readonly id: FieldRef<"CandidaturaCriador", 'String'>
    readonly usuarioId: FieldRef<"CandidaturaCriador", 'String'>
    readonly nome: FieldRef<"CandidaturaCriador", 'String'>
    readonly email: FieldRef<"CandidaturaCriador", 'String'>
    readonly bio: FieldRef<"CandidaturaCriador", 'String'>
    readonly categoria: FieldRef<"CandidaturaCriador", 'String'>
    readonly redesSociais: FieldRef<"CandidaturaCriador", 'String'>
    readonly portfolio: FieldRef<"CandidaturaCriador", 'String'>
    readonly experiencia: FieldRef<"CandidaturaCriador", 'String'>
    readonly motivacao: FieldRef<"CandidaturaCriador", 'String'>
    readonly metas: FieldRef<"CandidaturaCriador", 'String'>
    readonly disponibilidade: FieldRef<"CandidaturaCriador", 'String'>
    readonly status: FieldRef<"CandidaturaCriador", 'String'>
    readonly dataCandidatura: FieldRef<"CandidaturaCriador", 'DateTime'>
    readonly dataRevisao: FieldRef<"CandidaturaCriador", 'DateTime'>
    readonly observacoes: FieldRef<"CandidaturaCriador", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CandidaturaCriador findUnique
   */
  export type CandidaturaCriadorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidaturaCriador
     */
    select?: CandidaturaCriadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidaturaCriadorInclude<ExtArgs> | null
    /**
     * Filter, which CandidaturaCriador to fetch.
     */
    where: CandidaturaCriadorWhereUniqueInput
  }

  /**
   * CandidaturaCriador findUniqueOrThrow
   */
  export type CandidaturaCriadorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidaturaCriador
     */
    select?: CandidaturaCriadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidaturaCriadorInclude<ExtArgs> | null
    /**
     * Filter, which CandidaturaCriador to fetch.
     */
    where: CandidaturaCriadorWhereUniqueInput
  }

  /**
   * CandidaturaCriador findFirst
   */
  export type CandidaturaCriadorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidaturaCriador
     */
    select?: CandidaturaCriadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidaturaCriadorInclude<ExtArgs> | null
    /**
     * Filter, which CandidaturaCriador to fetch.
     */
    where?: CandidaturaCriadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidaturaCriadors to fetch.
     */
    orderBy?: CandidaturaCriadorOrderByWithRelationInput | CandidaturaCriadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CandidaturaCriadors.
     */
    cursor?: CandidaturaCriadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidaturaCriadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidaturaCriadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CandidaturaCriadors.
     */
    distinct?: CandidaturaCriadorScalarFieldEnum | CandidaturaCriadorScalarFieldEnum[]
  }

  /**
   * CandidaturaCriador findFirstOrThrow
   */
  export type CandidaturaCriadorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidaturaCriador
     */
    select?: CandidaturaCriadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidaturaCriadorInclude<ExtArgs> | null
    /**
     * Filter, which CandidaturaCriador to fetch.
     */
    where?: CandidaturaCriadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidaturaCriadors to fetch.
     */
    orderBy?: CandidaturaCriadorOrderByWithRelationInput | CandidaturaCriadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CandidaturaCriadors.
     */
    cursor?: CandidaturaCriadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidaturaCriadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidaturaCriadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CandidaturaCriadors.
     */
    distinct?: CandidaturaCriadorScalarFieldEnum | CandidaturaCriadorScalarFieldEnum[]
  }

  /**
   * CandidaturaCriador findMany
   */
  export type CandidaturaCriadorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidaturaCriador
     */
    select?: CandidaturaCriadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidaturaCriadorInclude<ExtArgs> | null
    /**
     * Filter, which CandidaturaCriadors to fetch.
     */
    where?: CandidaturaCriadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidaturaCriadors to fetch.
     */
    orderBy?: CandidaturaCriadorOrderByWithRelationInput | CandidaturaCriadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CandidaturaCriadors.
     */
    cursor?: CandidaturaCriadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidaturaCriadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidaturaCriadors.
     */
    skip?: number
    distinct?: CandidaturaCriadorScalarFieldEnum | CandidaturaCriadorScalarFieldEnum[]
  }

  /**
   * CandidaturaCriador create
   */
  export type CandidaturaCriadorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidaturaCriador
     */
    select?: CandidaturaCriadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidaturaCriadorInclude<ExtArgs> | null
    /**
     * The data needed to create a CandidaturaCriador.
     */
    data: XOR<CandidaturaCriadorCreateInput, CandidaturaCriadorUncheckedCreateInput>
  }

  /**
   * CandidaturaCriador createMany
   */
  export type CandidaturaCriadorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CandidaturaCriadors.
     */
    data: CandidaturaCriadorCreateManyInput | CandidaturaCriadorCreateManyInput[]
  }

  /**
   * CandidaturaCriador createManyAndReturn
   */
  export type CandidaturaCriadorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidaturaCriador
     */
    select?: CandidaturaCriadorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CandidaturaCriadors.
     */
    data: CandidaturaCriadorCreateManyInput | CandidaturaCriadorCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidaturaCriadorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CandidaturaCriador update
   */
  export type CandidaturaCriadorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidaturaCriador
     */
    select?: CandidaturaCriadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidaturaCriadorInclude<ExtArgs> | null
    /**
     * The data needed to update a CandidaturaCriador.
     */
    data: XOR<CandidaturaCriadorUpdateInput, CandidaturaCriadorUncheckedUpdateInput>
    /**
     * Choose, which CandidaturaCriador to update.
     */
    where: CandidaturaCriadorWhereUniqueInput
  }

  /**
   * CandidaturaCriador updateMany
   */
  export type CandidaturaCriadorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CandidaturaCriadors.
     */
    data: XOR<CandidaturaCriadorUpdateManyMutationInput, CandidaturaCriadorUncheckedUpdateManyInput>
    /**
     * Filter which CandidaturaCriadors to update
     */
    where?: CandidaturaCriadorWhereInput
  }

  /**
   * CandidaturaCriador upsert
   */
  export type CandidaturaCriadorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidaturaCriador
     */
    select?: CandidaturaCriadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidaturaCriadorInclude<ExtArgs> | null
    /**
     * The filter to search for the CandidaturaCriador to update in case it exists.
     */
    where: CandidaturaCriadorWhereUniqueInput
    /**
     * In case the CandidaturaCriador found by the `where` argument doesn't exist, create a new CandidaturaCriador with this data.
     */
    create: XOR<CandidaturaCriadorCreateInput, CandidaturaCriadorUncheckedCreateInput>
    /**
     * In case the CandidaturaCriador was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CandidaturaCriadorUpdateInput, CandidaturaCriadorUncheckedUpdateInput>
  }

  /**
   * CandidaturaCriador delete
   */
  export type CandidaturaCriadorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidaturaCriador
     */
    select?: CandidaturaCriadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidaturaCriadorInclude<ExtArgs> | null
    /**
     * Filter which CandidaturaCriador to delete.
     */
    where: CandidaturaCriadorWhereUniqueInput
  }

  /**
   * CandidaturaCriador deleteMany
   */
  export type CandidaturaCriadorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CandidaturaCriadors to delete
     */
    where?: CandidaturaCriadorWhereInput
  }

  /**
   * CandidaturaCriador without action
   */
  export type CandidaturaCriadorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidaturaCriador
     */
    select?: CandidaturaCriadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidaturaCriadorInclude<ExtArgs> | null
  }


  /**
   * Model LogAuditoria
   */

  export type AggregateLogAuditoria = {
    _count: LogAuditoriaCountAggregateOutputType | null
    _min: LogAuditoriaMinAggregateOutputType | null
    _max: LogAuditoriaMaxAggregateOutputType | null
  }

  export type LogAuditoriaMinAggregateOutputType = {
    id: string | null
    usuarioId: string | null
    acao: string | null
    detalhes: string | null
    ip: string | null
    userAgent: string | null
    timestamp: Date | null
    nivel: string | null
  }

  export type LogAuditoriaMaxAggregateOutputType = {
    id: string | null
    usuarioId: string | null
    acao: string | null
    detalhes: string | null
    ip: string | null
    userAgent: string | null
    timestamp: Date | null
    nivel: string | null
  }

  export type LogAuditoriaCountAggregateOutputType = {
    id: number
    usuarioId: number
    acao: number
    detalhes: number
    ip: number
    userAgent: number
    timestamp: number
    nivel: number
    _all: number
  }


  export type LogAuditoriaMinAggregateInputType = {
    id?: true
    usuarioId?: true
    acao?: true
    detalhes?: true
    ip?: true
    userAgent?: true
    timestamp?: true
    nivel?: true
  }

  export type LogAuditoriaMaxAggregateInputType = {
    id?: true
    usuarioId?: true
    acao?: true
    detalhes?: true
    ip?: true
    userAgent?: true
    timestamp?: true
    nivel?: true
  }

  export type LogAuditoriaCountAggregateInputType = {
    id?: true
    usuarioId?: true
    acao?: true
    detalhes?: true
    ip?: true
    userAgent?: true
    timestamp?: true
    nivel?: true
    _all?: true
  }

  export type LogAuditoriaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LogAuditoria to aggregate.
     */
    where?: LogAuditoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LogAuditorias to fetch.
     */
    orderBy?: LogAuditoriaOrderByWithRelationInput | LogAuditoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LogAuditoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LogAuditorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LogAuditorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LogAuditorias
    **/
    _count?: true | LogAuditoriaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LogAuditoriaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LogAuditoriaMaxAggregateInputType
  }

  export type GetLogAuditoriaAggregateType<T extends LogAuditoriaAggregateArgs> = {
        [P in keyof T & keyof AggregateLogAuditoria]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLogAuditoria[P]>
      : GetScalarType<T[P], AggregateLogAuditoria[P]>
  }




  export type LogAuditoriaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogAuditoriaWhereInput
    orderBy?: LogAuditoriaOrderByWithAggregationInput | LogAuditoriaOrderByWithAggregationInput[]
    by: LogAuditoriaScalarFieldEnum[] | LogAuditoriaScalarFieldEnum
    having?: LogAuditoriaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LogAuditoriaCountAggregateInputType | true
    _min?: LogAuditoriaMinAggregateInputType
    _max?: LogAuditoriaMaxAggregateInputType
  }

  export type LogAuditoriaGroupByOutputType = {
    id: string
    usuarioId: string
    acao: string
    detalhes: string
    ip: string | null
    userAgent: string | null
    timestamp: Date
    nivel: string
    _count: LogAuditoriaCountAggregateOutputType | null
    _min: LogAuditoriaMinAggregateOutputType | null
    _max: LogAuditoriaMaxAggregateOutputType | null
  }

  type GetLogAuditoriaGroupByPayload<T extends LogAuditoriaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LogAuditoriaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LogAuditoriaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LogAuditoriaGroupByOutputType[P]>
            : GetScalarType<T[P], LogAuditoriaGroupByOutputType[P]>
        }
      >
    >


  export type LogAuditoriaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    acao?: boolean
    detalhes?: boolean
    ip?: boolean
    userAgent?: boolean
    timestamp?: boolean
    nivel?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["logAuditoria"]>

  export type LogAuditoriaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    acao?: boolean
    detalhes?: boolean
    ip?: boolean
    userAgent?: boolean
    timestamp?: boolean
    nivel?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["logAuditoria"]>

  export type LogAuditoriaSelectScalar = {
    id?: boolean
    usuarioId?: boolean
    acao?: boolean
    detalhes?: boolean
    ip?: boolean
    userAgent?: boolean
    timestamp?: boolean
    nivel?: boolean
  }

  export type LogAuditoriaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type LogAuditoriaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $LogAuditoriaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LogAuditoria"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      usuarioId: string
      acao: string
      detalhes: string
      ip: string | null
      userAgent: string | null
      timestamp: Date
      nivel: string
    }, ExtArgs["result"]["logAuditoria"]>
    composites: {}
  }

  type LogAuditoriaGetPayload<S extends boolean | null | undefined | LogAuditoriaDefaultArgs> = $Result.GetResult<Prisma.$LogAuditoriaPayload, S>

  type LogAuditoriaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LogAuditoriaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LogAuditoriaCountAggregateInputType | true
    }

  export interface LogAuditoriaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LogAuditoria'], meta: { name: 'LogAuditoria' } }
    /**
     * Find zero or one LogAuditoria that matches the filter.
     * @param {LogAuditoriaFindUniqueArgs} args - Arguments to find a LogAuditoria
     * @example
     * // Get one LogAuditoria
     * const logAuditoria = await prisma.logAuditoria.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LogAuditoriaFindUniqueArgs>(args: SelectSubset<T, LogAuditoriaFindUniqueArgs<ExtArgs>>): Prisma__LogAuditoriaClient<$Result.GetResult<Prisma.$LogAuditoriaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LogAuditoria that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LogAuditoriaFindUniqueOrThrowArgs} args - Arguments to find a LogAuditoria
     * @example
     * // Get one LogAuditoria
     * const logAuditoria = await prisma.logAuditoria.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LogAuditoriaFindUniqueOrThrowArgs>(args: SelectSubset<T, LogAuditoriaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LogAuditoriaClient<$Result.GetResult<Prisma.$LogAuditoriaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LogAuditoria that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogAuditoriaFindFirstArgs} args - Arguments to find a LogAuditoria
     * @example
     * // Get one LogAuditoria
     * const logAuditoria = await prisma.logAuditoria.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LogAuditoriaFindFirstArgs>(args?: SelectSubset<T, LogAuditoriaFindFirstArgs<ExtArgs>>): Prisma__LogAuditoriaClient<$Result.GetResult<Prisma.$LogAuditoriaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LogAuditoria that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogAuditoriaFindFirstOrThrowArgs} args - Arguments to find a LogAuditoria
     * @example
     * // Get one LogAuditoria
     * const logAuditoria = await prisma.logAuditoria.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LogAuditoriaFindFirstOrThrowArgs>(args?: SelectSubset<T, LogAuditoriaFindFirstOrThrowArgs<ExtArgs>>): Prisma__LogAuditoriaClient<$Result.GetResult<Prisma.$LogAuditoriaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LogAuditorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogAuditoriaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LogAuditorias
     * const logAuditorias = await prisma.logAuditoria.findMany()
     * 
     * // Get first 10 LogAuditorias
     * const logAuditorias = await prisma.logAuditoria.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const logAuditoriaWithIdOnly = await prisma.logAuditoria.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LogAuditoriaFindManyArgs>(args?: SelectSubset<T, LogAuditoriaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogAuditoriaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LogAuditoria.
     * @param {LogAuditoriaCreateArgs} args - Arguments to create a LogAuditoria.
     * @example
     * // Create one LogAuditoria
     * const LogAuditoria = await prisma.logAuditoria.create({
     *   data: {
     *     // ... data to create a LogAuditoria
     *   }
     * })
     * 
     */
    create<T extends LogAuditoriaCreateArgs>(args: SelectSubset<T, LogAuditoriaCreateArgs<ExtArgs>>): Prisma__LogAuditoriaClient<$Result.GetResult<Prisma.$LogAuditoriaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LogAuditorias.
     * @param {LogAuditoriaCreateManyArgs} args - Arguments to create many LogAuditorias.
     * @example
     * // Create many LogAuditorias
     * const logAuditoria = await prisma.logAuditoria.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LogAuditoriaCreateManyArgs>(args?: SelectSubset<T, LogAuditoriaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LogAuditorias and returns the data saved in the database.
     * @param {LogAuditoriaCreateManyAndReturnArgs} args - Arguments to create many LogAuditorias.
     * @example
     * // Create many LogAuditorias
     * const logAuditoria = await prisma.logAuditoria.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LogAuditorias and only return the `id`
     * const logAuditoriaWithIdOnly = await prisma.logAuditoria.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LogAuditoriaCreateManyAndReturnArgs>(args?: SelectSubset<T, LogAuditoriaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogAuditoriaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a LogAuditoria.
     * @param {LogAuditoriaDeleteArgs} args - Arguments to delete one LogAuditoria.
     * @example
     * // Delete one LogAuditoria
     * const LogAuditoria = await prisma.logAuditoria.delete({
     *   where: {
     *     // ... filter to delete one LogAuditoria
     *   }
     * })
     * 
     */
    delete<T extends LogAuditoriaDeleteArgs>(args: SelectSubset<T, LogAuditoriaDeleteArgs<ExtArgs>>): Prisma__LogAuditoriaClient<$Result.GetResult<Prisma.$LogAuditoriaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LogAuditoria.
     * @param {LogAuditoriaUpdateArgs} args - Arguments to update one LogAuditoria.
     * @example
     * // Update one LogAuditoria
     * const logAuditoria = await prisma.logAuditoria.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LogAuditoriaUpdateArgs>(args: SelectSubset<T, LogAuditoriaUpdateArgs<ExtArgs>>): Prisma__LogAuditoriaClient<$Result.GetResult<Prisma.$LogAuditoriaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LogAuditorias.
     * @param {LogAuditoriaDeleteManyArgs} args - Arguments to filter LogAuditorias to delete.
     * @example
     * // Delete a few LogAuditorias
     * const { count } = await prisma.logAuditoria.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LogAuditoriaDeleteManyArgs>(args?: SelectSubset<T, LogAuditoriaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LogAuditorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogAuditoriaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LogAuditorias
     * const logAuditoria = await prisma.logAuditoria.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LogAuditoriaUpdateManyArgs>(args: SelectSubset<T, LogAuditoriaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LogAuditoria.
     * @param {LogAuditoriaUpsertArgs} args - Arguments to update or create a LogAuditoria.
     * @example
     * // Update or create a LogAuditoria
     * const logAuditoria = await prisma.logAuditoria.upsert({
     *   create: {
     *     // ... data to create a LogAuditoria
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LogAuditoria we want to update
     *   }
     * })
     */
    upsert<T extends LogAuditoriaUpsertArgs>(args: SelectSubset<T, LogAuditoriaUpsertArgs<ExtArgs>>): Prisma__LogAuditoriaClient<$Result.GetResult<Prisma.$LogAuditoriaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of LogAuditorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogAuditoriaCountArgs} args - Arguments to filter LogAuditorias to count.
     * @example
     * // Count the number of LogAuditorias
     * const count = await prisma.logAuditoria.count({
     *   where: {
     *     // ... the filter for the LogAuditorias we want to count
     *   }
     * })
    **/
    count<T extends LogAuditoriaCountArgs>(
      args?: Subset<T, LogAuditoriaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LogAuditoriaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LogAuditoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogAuditoriaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LogAuditoriaAggregateArgs>(args: Subset<T, LogAuditoriaAggregateArgs>): Prisma.PrismaPromise<GetLogAuditoriaAggregateType<T>>

    /**
     * Group by LogAuditoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogAuditoriaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LogAuditoriaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LogAuditoriaGroupByArgs['orderBy'] }
        : { orderBy?: LogAuditoriaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LogAuditoriaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLogAuditoriaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LogAuditoria model
   */
  readonly fields: LogAuditoriaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LogAuditoria.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LogAuditoriaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LogAuditoria model
   */ 
  interface LogAuditoriaFieldRefs {
    readonly id: FieldRef<"LogAuditoria", 'String'>
    readonly usuarioId: FieldRef<"LogAuditoria", 'String'>
    readonly acao: FieldRef<"LogAuditoria", 'String'>
    readonly detalhes: FieldRef<"LogAuditoria", 'String'>
    readonly ip: FieldRef<"LogAuditoria", 'String'>
    readonly userAgent: FieldRef<"LogAuditoria", 'String'>
    readonly timestamp: FieldRef<"LogAuditoria", 'DateTime'>
    readonly nivel: FieldRef<"LogAuditoria", 'String'>
  }
    

  // Custom InputTypes
  /**
   * LogAuditoria findUnique
   */
  export type LogAuditoriaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogAuditoria
     */
    select?: LogAuditoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogAuditoriaInclude<ExtArgs> | null
    /**
     * Filter, which LogAuditoria to fetch.
     */
    where: LogAuditoriaWhereUniqueInput
  }

  /**
   * LogAuditoria findUniqueOrThrow
   */
  export type LogAuditoriaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogAuditoria
     */
    select?: LogAuditoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogAuditoriaInclude<ExtArgs> | null
    /**
     * Filter, which LogAuditoria to fetch.
     */
    where: LogAuditoriaWhereUniqueInput
  }

  /**
   * LogAuditoria findFirst
   */
  export type LogAuditoriaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogAuditoria
     */
    select?: LogAuditoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogAuditoriaInclude<ExtArgs> | null
    /**
     * Filter, which LogAuditoria to fetch.
     */
    where?: LogAuditoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LogAuditorias to fetch.
     */
    orderBy?: LogAuditoriaOrderByWithRelationInput | LogAuditoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LogAuditorias.
     */
    cursor?: LogAuditoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LogAuditorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LogAuditorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LogAuditorias.
     */
    distinct?: LogAuditoriaScalarFieldEnum | LogAuditoriaScalarFieldEnum[]
  }

  /**
   * LogAuditoria findFirstOrThrow
   */
  export type LogAuditoriaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogAuditoria
     */
    select?: LogAuditoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogAuditoriaInclude<ExtArgs> | null
    /**
     * Filter, which LogAuditoria to fetch.
     */
    where?: LogAuditoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LogAuditorias to fetch.
     */
    orderBy?: LogAuditoriaOrderByWithRelationInput | LogAuditoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LogAuditorias.
     */
    cursor?: LogAuditoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LogAuditorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LogAuditorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LogAuditorias.
     */
    distinct?: LogAuditoriaScalarFieldEnum | LogAuditoriaScalarFieldEnum[]
  }

  /**
   * LogAuditoria findMany
   */
  export type LogAuditoriaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogAuditoria
     */
    select?: LogAuditoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogAuditoriaInclude<ExtArgs> | null
    /**
     * Filter, which LogAuditorias to fetch.
     */
    where?: LogAuditoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LogAuditorias to fetch.
     */
    orderBy?: LogAuditoriaOrderByWithRelationInput | LogAuditoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LogAuditorias.
     */
    cursor?: LogAuditoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LogAuditorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LogAuditorias.
     */
    skip?: number
    distinct?: LogAuditoriaScalarFieldEnum | LogAuditoriaScalarFieldEnum[]
  }

  /**
   * LogAuditoria create
   */
  export type LogAuditoriaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogAuditoria
     */
    select?: LogAuditoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogAuditoriaInclude<ExtArgs> | null
    /**
     * The data needed to create a LogAuditoria.
     */
    data: XOR<LogAuditoriaCreateInput, LogAuditoriaUncheckedCreateInput>
  }

  /**
   * LogAuditoria createMany
   */
  export type LogAuditoriaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LogAuditorias.
     */
    data: LogAuditoriaCreateManyInput | LogAuditoriaCreateManyInput[]
  }

  /**
   * LogAuditoria createManyAndReturn
   */
  export type LogAuditoriaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogAuditoria
     */
    select?: LogAuditoriaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many LogAuditorias.
     */
    data: LogAuditoriaCreateManyInput | LogAuditoriaCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogAuditoriaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LogAuditoria update
   */
  export type LogAuditoriaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogAuditoria
     */
    select?: LogAuditoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogAuditoriaInclude<ExtArgs> | null
    /**
     * The data needed to update a LogAuditoria.
     */
    data: XOR<LogAuditoriaUpdateInput, LogAuditoriaUncheckedUpdateInput>
    /**
     * Choose, which LogAuditoria to update.
     */
    where: LogAuditoriaWhereUniqueInput
  }

  /**
   * LogAuditoria updateMany
   */
  export type LogAuditoriaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LogAuditorias.
     */
    data: XOR<LogAuditoriaUpdateManyMutationInput, LogAuditoriaUncheckedUpdateManyInput>
    /**
     * Filter which LogAuditorias to update
     */
    where?: LogAuditoriaWhereInput
  }

  /**
   * LogAuditoria upsert
   */
  export type LogAuditoriaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogAuditoria
     */
    select?: LogAuditoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogAuditoriaInclude<ExtArgs> | null
    /**
     * The filter to search for the LogAuditoria to update in case it exists.
     */
    where: LogAuditoriaWhereUniqueInput
    /**
     * In case the LogAuditoria found by the `where` argument doesn't exist, create a new LogAuditoria with this data.
     */
    create: XOR<LogAuditoriaCreateInput, LogAuditoriaUncheckedCreateInput>
    /**
     * In case the LogAuditoria was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LogAuditoriaUpdateInput, LogAuditoriaUncheckedUpdateInput>
  }

  /**
   * LogAuditoria delete
   */
  export type LogAuditoriaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogAuditoria
     */
    select?: LogAuditoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogAuditoriaInclude<ExtArgs> | null
    /**
     * Filter which LogAuditoria to delete.
     */
    where: LogAuditoriaWhereUniqueInput
  }

  /**
   * LogAuditoria deleteMany
   */
  export type LogAuditoriaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LogAuditorias to delete
     */
    where?: LogAuditoriaWhereInput
  }

  /**
   * LogAuditoria without action
   */
  export type LogAuditoriaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogAuditoria
     */
    select?: LogAuditoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogAuditoriaInclude<ExtArgs> | null
  }


  /**
   * Model Parceiro
   */

  export type AggregateParceiro = {
    _count: ParceiroCountAggregateOutputType | null
    _avg: ParceiroAvgAggregateOutputType | null
    _sum: ParceiroSumAggregateOutputType | null
    _min: ParceiroMinAggregateOutputType | null
    _max: ParceiroMaxAggregateOutputType | null
  }

  export type ParceiroAvgAggregateOutputType = {
    comissaoMensal: number | null
    totalVendas: number | null
    codigosGerados: number | null
  }

  export type ParceiroSumAggregateOutputType = {
    comissaoMensal: number | null
    totalVendas: number | null
    codigosGerados: number | null
  }

  export type ParceiroMinAggregateOutputType = {
    id: string | null
    usuarioId: string | null
    nomeCidade: string | null
    comissaoMensal: number | null
    totalVendas: number | null
    codigosGerados: number | null
  }

  export type ParceiroMaxAggregateOutputType = {
    id: string | null
    usuarioId: string | null
    nomeCidade: string | null
    comissaoMensal: number | null
    totalVendas: number | null
    codigosGerados: number | null
  }

  export type ParceiroCountAggregateOutputType = {
    id: number
    usuarioId: number
    nomeCidade: number
    comissaoMensal: number
    totalVendas: number
    codigosGerados: number
    _all: number
  }


  export type ParceiroAvgAggregateInputType = {
    comissaoMensal?: true
    totalVendas?: true
    codigosGerados?: true
  }

  export type ParceiroSumAggregateInputType = {
    comissaoMensal?: true
    totalVendas?: true
    codigosGerados?: true
  }

  export type ParceiroMinAggregateInputType = {
    id?: true
    usuarioId?: true
    nomeCidade?: true
    comissaoMensal?: true
    totalVendas?: true
    codigosGerados?: true
  }

  export type ParceiroMaxAggregateInputType = {
    id?: true
    usuarioId?: true
    nomeCidade?: true
    comissaoMensal?: true
    totalVendas?: true
    codigosGerados?: true
  }

  export type ParceiroCountAggregateInputType = {
    id?: true
    usuarioId?: true
    nomeCidade?: true
    comissaoMensal?: true
    totalVendas?: true
    codigosGerados?: true
    _all?: true
  }

  export type ParceiroAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Parceiro to aggregate.
     */
    where?: ParceiroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parceiros to fetch.
     */
    orderBy?: ParceiroOrderByWithRelationInput | ParceiroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ParceiroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parceiros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parceiros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Parceiros
    **/
    _count?: true | ParceiroCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ParceiroAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ParceiroSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParceiroMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParceiroMaxAggregateInputType
  }

  export type GetParceiroAggregateType<T extends ParceiroAggregateArgs> = {
        [P in keyof T & keyof AggregateParceiro]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParceiro[P]>
      : GetScalarType<T[P], AggregateParceiro[P]>
  }




  export type ParceiroGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParceiroWhereInput
    orderBy?: ParceiroOrderByWithAggregationInput | ParceiroOrderByWithAggregationInput[]
    by: ParceiroScalarFieldEnum[] | ParceiroScalarFieldEnum
    having?: ParceiroScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParceiroCountAggregateInputType | true
    _avg?: ParceiroAvgAggregateInputType
    _sum?: ParceiroSumAggregateInputType
    _min?: ParceiroMinAggregateInputType
    _max?: ParceiroMaxAggregateInputType
  }

  export type ParceiroGroupByOutputType = {
    id: string
    usuarioId: string
    nomeCidade: string
    comissaoMensal: number
    totalVendas: number
    codigosGerados: number
    _count: ParceiroCountAggregateOutputType | null
    _avg: ParceiroAvgAggregateOutputType | null
    _sum: ParceiroSumAggregateOutputType | null
    _min: ParceiroMinAggregateOutputType | null
    _max: ParceiroMaxAggregateOutputType | null
  }

  type GetParceiroGroupByPayload<T extends ParceiroGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ParceiroGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParceiroGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParceiroGroupByOutputType[P]>
            : GetScalarType<T[P], ParceiroGroupByOutputType[P]>
        }
      >
    >


  export type ParceiroSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    nomeCidade?: boolean
    comissaoMensal?: boolean
    totalVendas?: boolean
    codigosGerados?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    codigosCashback?: boolean | Parceiro$codigosCashbackArgs<ExtArgs>
    _count?: boolean | ParceiroCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["parceiro"]>

  export type ParceiroSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    nomeCidade?: boolean
    comissaoMensal?: boolean
    totalVendas?: boolean
    codigosGerados?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["parceiro"]>

  export type ParceiroSelectScalar = {
    id?: boolean
    usuarioId?: boolean
    nomeCidade?: boolean
    comissaoMensal?: boolean
    totalVendas?: boolean
    codigosGerados?: boolean
  }

  export type ParceiroInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    codigosCashback?: boolean | Parceiro$codigosCashbackArgs<ExtArgs>
    _count?: boolean | ParceiroCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ParceiroIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $ParceiroPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Parceiro"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
      codigosCashback: Prisma.$CodigoCashbackPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      usuarioId: string
      nomeCidade: string
      comissaoMensal: number
      totalVendas: number
      codigosGerados: number
    }, ExtArgs["result"]["parceiro"]>
    composites: {}
  }

  type ParceiroGetPayload<S extends boolean | null | undefined | ParceiroDefaultArgs> = $Result.GetResult<Prisma.$ParceiroPayload, S>

  type ParceiroCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ParceiroFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ParceiroCountAggregateInputType | true
    }

  export interface ParceiroDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Parceiro'], meta: { name: 'Parceiro' } }
    /**
     * Find zero or one Parceiro that matches the filter.
     * @param {ParceiroFindUniqueArgs} args - Arguments to find a Parceiro
     * @example
     * // Get one Parceiro
     * const parceiro = await prisma.parceiro.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ParceiroFindUniqueArgs>(args: SelectSubset<T, ParceiroFindUniqueArgs<ExtArgs>>): Prisma__ParceiroClient<$Result.GetResult<Prisma.$ParceiroPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Parceiro that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ParceiroFindUniqueOrThrowArgs} args - Arguments to find a Parceiro
     * @example
     * // Get one Parceiro
     * const parceiro = await prisma.parceiro.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ParceiroFindUniqueOrThrowArgs>(args: SelectSubset<T, ParceiroFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ParceiroClient<$Result.GetResult<Prisma.$ParceiroPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Parceiro that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParceiroFindFirstArgs} args - Arguments to find a Parceiro
     * @example
     * // Get one Parceiro
     * const parceiro = await prisma.parceiro.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ParceiroFindFirstArgs>(args?: SelectSubset<T, ParceiroFindFirstArgs<ExtArgs>>): Prisma__ParceiroClient<$Result.GetResult<Prisma.$ParceiroPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Parceiro that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParceiroFindFirstOrThrowArgs} args - Arguments to find a Parceiro
     * @example
     * // Get one Parceiro
     * const parceiro = await prisma.parceiro.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ParceiroFindFirstOrThrowArgs>(args?: SelectSubset<T, ParceiroFindFirstOrThrowArgs<ExtArgs>>): Prisma__ParceiroClient<$Result.GetResult<Prisma.$ParceiroPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Parceiros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParceiroFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Parceiros
     * const parceiros = await prisma.parceiro.findMany()
     * 
     * // Get first 10 Parceiros
     * const parceiros = await prisma.parceiro.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const parceiroWithIdOnly = await prisma.parceiro.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ParceiroFindManyArgs>(args?: SelectSubset<T, ParceiroFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParceiroPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Parceiro.
     * @param {ParceiroCreateArgs} args - Arguments to create a Parceiro.
     * @example
     * // Create one Parceiro
     * const Parceiro = await prisma.parceiro.create({
     *   data: {
     *     // ... data to create a Parceiro
     *   }
     * })
     * 
     */
    create<T extends ParceiroCreateArgs>(args: SelectSubset<T, ParceiroCreateArgs<ExtArgs>>): Prisma__ParceiroClient<$Result.GetResult<Prisma.$ParceiroPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Parceiros.
     * @param {ParceiroCreateManyArgs} args - Arguments to create many Parceiros.
     * @example
     * // Create many Parceiros
     * const parceiro = await prisma.parceiro.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ParceiroCreateManyArgs>(args?: SelectSubset<T, ParceiroCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Parceiros and returns the data saved in the database.
     * @param {ParceiroCreateManyAndReturnArgs} args - Arguments to create many Parceiros.
     * @example
     * // Create many Parceiros
     * const parceiro = await prisma.parceiro.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Parceiros and only return the `id`
     * const parceiroWithIdOnly = await prisma.parceiro.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ParceiroCreateManyAndReturnArgs>(args?: SelectSubset<T, ParceiroCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParceiroPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Parceiro.
     * @param {ParceiroDeleteArgs} args - Arguments to delete one Parceiro.
     * @example
     * // Delete one Parceiro
     * const Parceiro = await prisma.parceiro.delete({
     *   where: {
     *     // ... filter to delete one Parceiro
     *   }
     * })
     * 
     */
    delete<T extends ParceiroDeleteArgs>(args: SelectSubset<T, ParceiroDeleteArgs<ExtArgs>>): Prisma__ParceiroClient<$Result.GetResult<Prisma.$ParceiroPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Parceiro.
     * @param {ParceiroUpdateArgs} args - Arguments to update one Parceiro.
     * @example
     * // Update one Parceiro
     * const parceiro = await prisma.parceiro.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ParceiroUpdateArgs>(args: SelectSubset<T, ParceiroUpdateArgs<ExtArgs>>): Prisma__ParceiroClient<$Result.GetResult<Prisma.$ParceiroPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Parceiros.
     * @param {ParceiroDeleteManyArgs} args - Arguments to filter Parceiros to delete.
     * @example
     * // Delete a few Parceiros
     * const { count } = await prisma.parceiro.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ParceiroDeleteManyArgs>(args?: SelectSubset<T, ParceiroDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Parceiros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParceiroUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Parceiros
     * const parceiro = await prisma.parceiro.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ParceiroUpdateManyArgs>(args: SelectSubset<T, ParceiroUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Parceiro.
     * @param {ParceiroUpsertArgs} args - Arguments to update or create a Parceiro.
     * @example
     * // Update or create a Parceiro
     * const parceiro = await prisma.parceiro.upsert({
     *   create: {
     *     // ... data to create a Parceiro
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Parceiro we want to update
     *   }
     * })
     */
    upsert<T extends ParceiroUpsertArgs>(args: SelectSubset<T, ParceiroUpsertArgs<ExtArgs>>): Prisma__ParceiroClient<$Result.GetResult<Prisma.$ParceiroPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Parceiros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParceiroCountArgs} args - Arguments to filter Parceiros to count.
     * @example
     * // Count the number of Parceiros
     * const count = await prisma.parceiro.count({
     *   where: {
     *     // ... the filter for the Parceiros we want to count
     *   }
     * })
    **/
    count<T extends ParceiroCountArgs>(
      args?: Subset<T, ParceiroCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParceiroCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Parceiro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParceiroAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParceiroAggregateArgs>(args: Subset<T, ParceiroAggregateArgs>): Prisma.PrismaPromise<GetParceiroAggregateType<T>>

    /**
     * Group by Parceiro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParceiroGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParceiroGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParceiroGroupByArgs['orderBy'] }
        : { orderBy?: ParceiroGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParceiroGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParceiroGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Parceiro model
   */
  readonly fields: ParceiroFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Parceiro.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ParceiroClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    codigosCashback<T extends Parceiro$codigosCashbackArgs<ExtArgs> = {}>(args?: Subset<T, Parceiro$codigosCashbackArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CodigoCashbackPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Parceiro model
   */ 
  interface ParceiroFieldRefs {
    readonly id: FieldRef<"Parceiro", 'String'>
    readonly usuarioId: FieldRef<"Parceiro", 'String'>
    readonly nomeCidade: FieldRef<"Parceiro", 'String'>
    readonly comissaoMensal: FieldRef<"Parceiro", 'Float'>
    readonly totalVendas: FieldRef<"Parceiro", 'Float'>
    readonly codigosGerados: FieldRef<"Parceiro", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Parceiro findUnique
   */
  export type ParceiroFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parceiro
     */
    select?: ParceiroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParceiroInclude<ExtArgs> | null
    /**
     * Filter, which Parceiro to fetch.
     */
    where: ParceiroWhereUniqueInput
  }

  /**
   * Parceiro findUniqueOrThrow
   */
  export type ParceiroFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parceiro
     */
    select?: ParceiroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParceiroInclude<ExtArgs> | null
    /**
     * Filter, which Parceiro to fetch.
     */
    where: ParceiroWhereUniqueInput
  }

  /**
   * Parceiro findFirst
   */
  export type ParceiroFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parceiro
     */
    select?: ParceiroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParceiroInclude<ExtArgs> | null
    /**
     * Filter, which Parceiro to fetch.
     */
    where?: ParceiroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parceiros to fetch.
     */
    orderBy?: ParceiroOrderByWithRelationInput | ParceiroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Parceiros.
     */
    cursor?: ParceiroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parceiros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parceiros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Parceiros.
     */
    distinct?: ParceiroScalarFieldEnum | ParceiroScalarFieldEnum[]
  }

  /**
   * Parceiro findFirstOrThrow
   */
  export type ParceiroFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parceiro
     */
    select?: ParceiroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParceiroInclude<ExtArgs> | null
    /**
     * Filter, which Parceiro to fetch.
     */
    where?: ParceiroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parceiros to fetch.
     */
    orderBy?: ParceiroOrderByWithRelationInput | ParceiroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Parceiros.
     */
    cursor?: ParceiroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parceiros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parceiros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Parceiros.
     */
    distinct?: ParceiroScalarFieldEnum | ParceiroScalarFieldEnum[]
  }

  /**
   * Parceiro findMany
   */
  export type ParceiroFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parceiro
     */
    select?: ParceiroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParceiroInclude<ExtArgs> | null
    /**
     * Filter, which Parceiros to fetch.
     */
    where?: ParceiroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parceiros to fetch.
     */
    orderBy?: ParceiroOrderByWithRelationInput | ParceiroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Parceiros.
     */
    cursor?: ParceiroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parceiros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parceiros.
     */
    skip?: number
    distinct?: ParceiroScalarFieldEnum | ParceiroScalarFieldEnum[]
  }

  /**
   * Parceiro create
   */
  export type ParceiroCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parceiro
     */
    select?: ParceiroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParceiroInclude<ExtArgs> | null
    /**
     * The data needed to create a Parceiro.
     */
    data: XOR<ParceiroCreateInput, ParceiroUncheckedCreateInput>
  }

  /**
   * Parceiro createMany
   */
  export type ParceiroCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Parceiros.
     */
    data: ParceiroCreateManyInput | ParceiroCreateManyInput[]
  }

  /**
   * Parceiro createManyAndReturn
   */
  export type ParceiroCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parceiro
     */
    select?: ParceiroSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Parceiros.
     */
    data: ParceiroCreateManyInput | ParceiroCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParceiroIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Parceiro update
   */
  export type ParceiroUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parceiro
     */
    select?: ParceiroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParceiroInclude<ExtArgs> | null
    /**
     * The data needed to update a Parceiro.
     */
    data: XOR<ParceiroUpdateInput, ParceiroUncheckedUpdateInput>
    /**
     * Choose, which Parceiro to update.
     */
    where: ParceiroWhereUniqueInput
  }

  /**
   * Parceiro updateMany
   */
  export type ParceiroUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Parceiros.
     */
    data: XOR<ParceiroUpdateManyMutationInput, ParceiroUncheckedUpdateManyInput>
    /**
     * Filter which Parceiros to update
     */
    where?: ParceiroWhereInput
  }

  /**
   * Parceiro upsert
   */
  export type ParceiroUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parceiro
     */
    select?: ParceiroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParceiroInclude<ExtArgs> | null
    /**
     * The filter to search for the Parceiro to update in case it exists.
     */
    where: ParceiroWhereUniqueInput
    /**
     * In case the Parceiro found by the `where` argument doesn't exist, create a new Parceiro with this data.
     */
    create: XOR<ParceiroCreateInput, ParceiroUncheckedCreateInput>
    /**
     * In case the Parceiro was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ParceiroUpdateInput, ParceiroUncheckedUpdateInput>
  }

  /**
   * Parceiro delete
   */
  export type ParceiroDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parceiro
     */
    select?: ParceiroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParceiroInclude<ExtArgs> | null
    /**
     * Filter which Parceiro to delete.
     */
    where: ParceiroWhereUniqueInput
  }

  /**
   * Parceiro deleteMany
   */
  export type ParceiroDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Parceiros to delete
     */
    where?: ParceiroWhereInput
  }

  /**
   * Parceiro.codigosCashback
   */
  export type Parceiro$codigosCashbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodigoCashback
     */
    select?: CodigoCashbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodigoCashbackInclude<ExtArgs> | null
    where?: CodigoCashbackWhereInput
    orderBy?: CodigoCashbackOrderByWithRelationInput | CodigoCashbackOrderByWithRelationInput[]
    cursor?: CodigoCashbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CodigoCashbackScalarFieldEnum | CodigoCashbackScalarFieldEnum[]
  }

  /**
   * Parceiro without action
   */
  export type ParceiroDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parceiro
     */
    select?: ParceiroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParceiroInclude<ExtArgs> | null
  }


  /**
   * Model Semente
   */

  export type AggregateSemente = {
    _count: SementeCountAggregateOutputType | null
    _avg: SementeAvgAggregateOutputType | null
    _sum: SementeSumAggregateOutputType | null
    _min: SementeMinAggregateOutputType | null
    _max: SementeMaxAggregateOutputType | null
  }

  export type SementeAvgAggregateOutputType = {
    quantidade: number | null
  }

  export type SementeSumAggregateOutputType = {
    quantidade: number | null
  }

  export type SementeMinAggregateOutputType = {
    id: string | null
    usuarioId: string | null
    quantidade: number | null
    tipo: string | null
    data: Date | null
    descricao: string | null
  }

  export type SementeMaxAggregateOutputType = {
    id: string | null
    usuarioId: string | null
    quantidade: number | null
    tipo: string | null
    data: Date | null
    descricao: string | null
  }

  export type SementeCountAggregateOutputType = {
    id: number
    usuarioId: number
    quantidade: number
    tipo: number
    data: number
    descricao: number
    _all: number
  }


  export type SementeAvgAggregateInputType = {
    quantidade?: true
  }

  export type SementeSumAggregateInputType = {
    quantidade?: true
  }

  export type SementeMinAggregateInputType = {
    id?: true
    usuarioId?: true
    quantidade?: true
    tipo?: true
    data?: true
    descricao?: true
  }

  export type SementeMaxAggregateInputType = {
    id?: true
    usuarioId?: true
    quantidade?: true
    tipo?: true
    data?: true
    descricao?: true
  }

  export type SementeCountAggregateInputType = {
    id?: true
    usuarioId?: true
    quantidade?: true
    tipo?: true
    data?: true
    descricao?: true
    _all?: true
  }

  export type SementeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Semente to aggregate.
     */
    where?: SementeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sementes to fetch.
     */
    orderBy?: SementeOrderByWithRelationInput | SementeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SementeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sementes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sementes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sementes
    **/
    _count?: true | SementeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SementeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SementeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SementeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SementeMaxAggregateInputType
  }

  export type GetSementeAggregateType<T extends SementeAggregateArgs> = {
        [P in keyof T & keyof AggregateSemente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSemente[P]>
      : GetScalarType<T[P], AggregateSemente[P]>
  }




  export type SementeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SementeWhereInput
    orderBy?: SementeOrderByWithAggregationInput | SementeOrderByWithAggregationInput[]
    by: SementeScalarFieldEnum[] | SementeScalarFieldEnum
    having?: SementeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SementeCountAggregateInputType | true
    _avg?: SementeAvgAggregateInputType
    _sum?: SementeSumAggregateInputType
    _min?: SementeMinAggregateInputType
    _max?: SementeMaxAggregateInputType
  }

  export type SementeGroupByOutputType = {
    id: string
    usuarioId: string
    quantidade: number
    tipo: string
    data: Date
    descricao: string
    _count: SementeCountAggregateOutputType | null
    _avg: SementeAvgAggregateOutputType | null
    _sum: SementeSumAggregateOutputType | null
    _min: SementeMinAggregateOutputType | null
    _max: SementeMaxAggregateOutputType | null
  }

  type GetSementeGroupByPayload<T extends SementeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SementeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SementeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SementeGroupByOutputType[P]>
            : GetScalarType<T[P], SementeGroupByOutputType[P]>
        }
      >
    >


  export type SementeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    quantidade?: boolean
    tipo?: boolean
    data?: boolean
    descricao?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["semente"]>

  export type SementeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    quantidade?: boolean
    tipo?: boolean
    data?: boolean
    descricao?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["semente"]>

  export type SementeSelectScalar = {
    id?: boolean
    usuarioId?: boolean
    quantidade?: boolean
    tipo?: boolean
    data?: boolean
    descricao?: boolean
  }

  export type SementeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type SementeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $SementePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Semente"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      usuarioId: string
      quantidade: number
      tipo: string
      data: Date
      descricao: string
    }, ExtArgs["result"]["semente"]>
    composites: {}
  }

  type SementeGetPayload<S extends boolean | null | undefined | SementeDefaultArgs> = $Result.GetResult<Prisma.$SementePayload, S>

  type SementeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SementeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SementeCountAggregateInputType | true
    }

  export interface SementeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Semente'], meta: { name: 'Semente' } }
    /**
     * Find zero or one Semente that matches the filter.
     * @param {SementeFindUniqueArgs} args - Arguments to find a Semente
     * @example
     * // Get one Semente
     * const semente = await prisma.semente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SementeFindUniqueArgs>(args: SelectSubset<T, SementeFindUniqueArgs<ExtArgs>>): Prisma__SementeClient<$Result.GetResult<Prisma.$SementePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Semente that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SementeFindUniqueOrThrowArgs} args - Arguments to find a Semente
     * @example
     * // Get one Semente
     * const semente = await prisma.semente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SementeFindUniqueOrThrowArgs>(args: SelectSubset<T, SementeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SementeClient<$Result.GetResult<Prisma.$SementePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Semente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SementeFindFirstArgs} args - Arguments to find a Semente
     * @example
     * // Get one Semente
     * const semente = await prisma.semente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SementeFindFirstArgs>(args?: SelectSubset<T, SementeFindFirstArgs<ExtArgs>>): Prisma__SementeClient<$Result.GetResult<Prisma.$SementePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Semente that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SementeFindFirstOrThrowArgs} args - Arguments to find a Semente
     * @example
     * // Get one Semente
     * const semente = await prisma.semente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SementeFindFirstOrThrowArgs>(args?: SelectSubset<T, SementeFindFirstOrThrowArgs<ExtArgs>>): Prisma__SementeClient<$Result.GetResult<Prisma.$SementePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Sementes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SementeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sementes
     * const sementes = await prisma.semente.findMany()
     * 
     * // Get first 10 Sementes
     * const sementes = await prisma.semente.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sementeWithIdOnly = await prisma.semente.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SementeFindManyArgs>(args?: SelectSubset<T, SementeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SementePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Semente.
     * @param {SementeCreateArgs} args - Arguments to create a Semente.
     * @example
     * // Create one Semente
     * const Semente = await prisma.semente.create({
     *   data: {
     *     // ... data to create a Semente
     *   }
     * })
     * 
     */
    create<T extends SementeCreateArgs>(args: SelectSubset<T, SementeCreateArgs<ExtArgs>>): Prisma__SementeClient<$Result.GetResult<Prisma.$SementePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Sementes.
     * @param {SementeCreateManyArgs} args - Arguments to create many Sementes.
     * @example
     * // Create many Sementes
     * const semente = await prisma.semente.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SementeCreateManyArgs>(args?: SelectSubset<T, SementeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sementes and returns the data saved in the database.
     * @param {SementeCreateManyAndReturnArgs} args - Arguments to create many Sementes.
     * @example
     * // Create many Sementes
     * const semente = await prisma.semente.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sementes and only return the `id`
     * const sementeWithIdOnly = await prisma.semente.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SementeCreateManyAndReturnArgs>(args?: SelectSubset<T, SementeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SementePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Semente.
     * @param {SementeDeleteArgs} args - Arguments to delete one Semente.
     * @example
     * // Delete one Semente
     * const Semente = await prisma.semente.delete({
     *   where: {
     *     // ... filter to delete one Semente
     *   }
     * })
     * 
     */
    delete<T extends SementeDeleteArgs>(args: SelectSubset<T, SementeDeleteArgs<ExtArgs>>): Prisma__SementeClient<$Result.GetResult<Prisma.$SementePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Semente.
     * @param {SementeUpdateArgs} args - Arguments to update one Semente.
     * @example
     * // Update one Semente
     * const semente = await prisma.semente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SementeUpdateArgs>(args: SelectSubset<T, SementeUpdateArgs<ExtArgs>>): Prisma__SementeClient<$Result.GetResult<Prisma.$SementePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Sementes.
     * @param {SementeDeleteManyArgs} args - Arguments to filter Sementes to delete.
     * @example
     * // Delete a few Sementes
     * const { count } = await prisma.semente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SementeDeleteManyArgs>(args?: SelectSubset<T, SementeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sementes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SementeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sementes
     * const semente = await prisma.semente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SementeUpdateManyArgs>(args: SelectSubset<T, SementeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Semente.
     * @param {SementeUpsertArgs} args - Arguments to update or create a Semente.
     * @example
     * // Update or create a Semente
     * const semente = await prisma.semente.upsert({
     *   create: {
     *     // ... data to create a Semente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Semente we want to update
     *   }
     * })
     */
    upsert<T extends SementeUpsertArgs>(args: SelectSubset<T, SementeUpsertArgs<ExtArgs>>): Prisma__SementeClient<$Result.GetResult<Prisma.$SementePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Sementes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SementeCountArgs} args - Arguments to filter Sementes to count.
     * @example
     * // Count the number of Sementes
     * const count = await prisma.semente.count({
     *   where: {
     *     // ... the filter for the Sementes we want to count
     *   }
     * })
    **/
    count<T extends SementeCountArgs>(
      args?: Subset<T, SementeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SementeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Semente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SementeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SementeAggregateArgs>(args: Subset<T, SementeAggregateArgs>): Prisma.PrismaPromise<GetSementeAggregateType<T>>

    /**
     * Group by Semente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SementeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SementeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SementeGroupByArgs['orderBy'] }
        : { orderBy?: SementeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SementeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSementeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Semente model
   */
  readonly fields: SementeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Semente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SementeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Semente model
   */ 
  interface SementeFieldRefs {
    readonly id: FieldRef<"Semente", 'String'>
    readonly usuarioId: FieldRef<"Semente", 'String'>
    readonly quantidade: FieldRef<"Semente", 'Int'>
    readonly tipo: FieldRef<"Semente", 'String'>
    readonly data: FieldRef<"Semente", 'DateTime'>
    readonly descricao: FieldRef<"Semente", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Semente findUnique
   */
  export type SementeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semente
     */
    select?: SementeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SementeInclude<ExtArgs> | null
    /**
     * Filter, which Semente to fetch.
     */
    where: SementeWhereUniqueInput
  }

  /**
   * Semente findUniqueOrThrow
   */
  export type SementeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semente
     */
    select?: SementeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SementeInclude<ExtArgs> | null
    /**
     * Filter, which Semente to fetch.
     */
    where: SementeWhereUniqueInput
  }

  /**
   * Semente findFirst
   */
  export type SementeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semente
     */
    select?: SementeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SementeInclude<ExtArgs> | null
    /**
     * Filter, which Semente to fetch.
     */
    where?: SementeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sementes to fetch.
     */
    orderBy?: SementeOrderByWithRelationInput | SementeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sementes.
     */
    cursor?: SementeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sementes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sementes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sementes.
     */
    distinct?: SementeScalarFieldEnum | SementeScalarFieldEnum[]
  }

  /**
   * Semente findFirstOrThrow
   */
  export type SementeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semente
     */
    select?: SementeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SementeInclude<ExtArgs> | null
    /**
     * Filter, which Semente to fetch.
     */
    where?: SementeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sementes to fetch.
     */
    orderBy?: SementeOrderByWithRelationInput | SementeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sementes.
     */
    cursor?: SementeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sementes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sementes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sementes.
     */
    distinct?: SementeScalarFieldEnum | SementeScalarFieldEnum[]
  }

  /**
   * Semente findMany
   */
  export type SementeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semente
     */
    select?: SementeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SementeInclude<ExtArgs> | null
    /**
     * Filter, which Sementes to fetch.
     */
    where?: SementeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sementes to fetch.
     */
    orderBy?: SementeOrderByWithRelationInput | SementeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sementes.
     */
    cursor?: SementeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sementes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sementes.
     */
    skip?: number
    distinct?: SementeScalarFieldEnum | SementeScalarFieldEnum[]
  }

  /**
   * Semente create
   */
  export type SementeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semente
     */
    select?: SementeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SementeInclude<ExtArgs> | null
    /**
     * The data needed to create a Semente.
     */
    data: XOR<SementeCreateInput, SementeUncheckedCreateInput>
  }

  /**
   * Semente createMany
   */
  export type SementeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sementes.
     */
    data: SementeCreateManyInput | SementeCreateManyInput[]
  }

  /**
   * Semente createManyAndReturn
   */
  export type SementeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semente
     */
    select?: SementeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Sementes.
     */
    data: SementeCreateManyInput | SementeCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SementeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Semente update
   */
  export type SementeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semente
     */
    select?: SementeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SementeInclude<ExtArgs> | null
    /**
     * The data needed to update a Semente.
     */
    data: XOR<SementeUpdateInput, SementeUncheckedUpdateInput>
    /**
     * Choose, which Semente to update.
     */
    where: SementeWhereUniqueInput
  }

  /**
   * Semente updateMany
   */
  export type SementeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sementes.
     */
    data: XOR<SementeUpdateManyMutationInput, SementeUncheckedUpdateManyInput>
    /**
     * Filter which Sementes to update
     */
    where?: SementeWhereInput
  }

  /**
   * Semente upsert
   */
  export type SementeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semente
     */
    select?: SementeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SementeInclude<ExtArgs> | null
    /**
     * The filter to search for the Semente to update in case it exists.
     */
    where: SementeWhereUniqueInput
    /**
     * In case the Semente found by the `where` argument doesn't exist, create a new Semente with this data.
     */
    create: XOR<SementeCreateInput, SementeUncheckedCreateInput>
    /**
     * In case the Semente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SementeUpdateInput, SementeUncheckedUpdateInput>
  }

  /**
   * Semente delete
   */
  export type SementeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semente
     */
    select?: SementeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SementeInclude<ExtArgs> | null
    /**
     * Filter which Semente to delete.
     */
    where: SementeWhereUniqueInput
  }

  /**
   * Semente deleteMany
   */
  export type SementeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sementes to delete
     */
    where?: SementeWhereInput
  }

  /**
   * Semente without action
   */
  export type SementeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semente
     */
    select?: SementeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SementeInclude<ExtArgs> | null
  }


  /**
   * Model Doacao
   */

  export type AggregateDoacao = {
    _count: DoacaoCountAggregateOutputType | null
    _avg: DoacaoAvgAggregateOutputType | null
    _sum: DoacaoSumAggregateOutputType | null
    _min: DoacaoMinAggregateOutputType | null
    _max: DoacaoMaxAggregateOutputType | null
  }

  export type DoacaoAvgAggregateOutputType = {
    quantidade: number | null
  }

  export type DoacaoSumAggregateOutputType = {
    quantidade: number | null
  }

  export type DoacaoMinAggregateOutputType = {
    id: string | null
    doadorId: string | null
    criadorId: string | null
    quantidade: number | null
    data: Date | null
    mensagem: string | null
  }

  export type DoacaoMaxAggregateOutputType = {
    id: string | null
    doadorId: string | null
    criadorId: string | null
    quantidade: number | null
    data: Date | null
    mensagem: string | null
  }

  export type DoacaoCountAggregateOutputType = {
    id: number
    doadorId: number
    criadorId: number
    quantidade: number
    data: number
    mensagem: number
    _all: number
  }


  export type DoacaoAvgAggregateInputType = {
    quantidade?: true
  }

  export type DoacaoSumAggregateInputType = {
    quantidade?: true
  }

  export type DoacaoMinAggregateInputType = {
    id?: true
    doadorId?: true
    criadorId?: true
    quantidade?: true
    data?: true
    mensagem?: true
  }

  export type DoacaoMaxAggregateInputType = {
    id?: true
    doadorId?: true
    criadorId?: true
    quantidade?: true
    data?: true
    mensagem?: true
  }

  export type DoacaoCountAggregateInputType = {
    id?: true
    doadorId?: true
    criadorId?: true
    quantidade?: true
    data?: true
    mensagem?: true
    _all?: true
  }

  export type DoacaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Doacao to aggregate.
     */
    where?: DoacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doacaos to fetch.
     */
    orderBy?: DoacaoOrderByWithRelationInput | DoacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DoacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Doacaos
    **/
    _count?: true | DoacaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DoacaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DoacaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoacaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoacaoMaxAggregateInputType
  }

  export type GetDoacaoAggregateType<T extends DoacaoAggregateArgs> = {
        [P in keyof T & keyof AggregateDoacao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoacao[P]>
      : GetScalarType<T[P], AggregateDoacao[P]>
  }




  export type DoacaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoacaoWhereInput
    orderBy?: DoacaoOrderByWithAggregationInput | DoacaoOrderByWithAggregationInput[]
    by: DoacaoScalarFieldEnum[] | DoacaoScalarFieldEnum
    having?: DoacaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoacaoCountAggregateInputType | true
    _avg?: DoacaoAvgAggregateInputType
    _sum?: DoacaoSumAggregateInputType
    _min?: DoacaoMinAggregateInputType
    _max?: DoacaoMaxAggregateInputType
  }

  export type DoacaoGroupByOutputType = {
    id: string
    doadorId: string
    criadorId: string
    quantidade: number
    data: Date
    mensagem: string | null
    _count: DoacaoCountAggregateOutputType | null
    _avg: DoacaoAvgAggregateOutputType | null
    _sum: DoacaoSumAggregateOutputType | null
    _min: DoacaoMinAggregateOutputType | null
    _max: DoacaoMaxAggregateOutputType | null
  }

  type GetDoacaoGroupByPayload<T extends DoacaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DoacaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoacaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoacaoGroupByOutputType[P]>
            : GetScalarType<T[P], DoacaoGroupByOutputType[P]>
        }
      >
    >


  export type DoacaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doadorId?: boolean
    criadorId?: boolean
    quantidade?: boolean
    data?: boolean
    mensagem?: boolean
    doador?: boolean | UsuarioDefaultArgs<ExtArgs>
    criador?: boolean | CriadorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doacao"]>

  export type DoacaoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doadorId?: boolean
    criadorId?: boolean
    quantidade?: boolean
    data?: boolean
    mensagem?: boolean
    doador?: boolean | UsuarioDefaultArgs<ExtArgs>
    criador?: boolean | CriadorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doacao"]>

  export type DoacaoSelectScalar = {
    id?: boolean
    doadorId?: boolean
    criadorId?: boolean
    quantidade?: boolean
    data?: boolean
    mensagem?: boolean
  }

  export type DoacaoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doador?: boolean | UsuarioDefaultArgs<ExtArgs>
    criador?: boolean | CriadorDefaultArgs<ExtArgs>
  }
  export type DoacaoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doador?: boolean | UsuarioDefaultArgs<ExtArgs>
    criador?: boolean | CriadorDefaultArgs<ExtArgs>
  }

  export type $DoacaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Doacao"
    objects: {
      doador: Prisma.$UsuarioPayload<ExtArgs>
      criador: Prisma.$CriadorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      doadorId: string
      criadorId: string
      quantidade: number
      data: Date
      mensagem: string | null
    }, ExtArgs["result"]["doacao"]>
    composites: {}
  }

  type DoacaoGetPayload<S extends boolean | null | undefined | DoacaoDefaultArgs> = $Result.GetResult<Prisma.$DoacaoPayload, S>

  type DoacaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DoacaoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DoacaoCountAggregateInputType | true
    }

  export interface DoacaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Doacao'], meta: { name: 'Doacao' } }
    /**
     * Find zero or one Doacao that matches the filter.
     * @param {DoacaoFindUniqueArgs} args - Arguments to find a Doacao
     * @example
     * // Get one Doacao
     * const doacao = await prisma.doacao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DoacaoFindUniqueArgs>(args: SelectSubset<T, DoacaoFindUniqueArgs<ExtArgs>>): Prisma__DoacaoClient<$Result.GetResult<Prisma.$DoacaoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Doacao that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DoacaoFindUniqueOrThrowArgs} args - Arguments to find a Doacao
     * @example
     * // Get one Doacao
     * const doacao = await prisma.doacao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DoacaoFindUniqueOrThrowArgs>(args: SelectSubset<T, DoacaoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DoacaoClient<$Result.GetResult<Prisma.$DoacaoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Doacao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoacaoFindFirstArgs} args - Arguments to find a Doacao
     * @example
     * // Get one Doacao
     * const doacao = await prisma.doacao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DoacaoFindFirstArgs>(args?: SelectSubset<T, DoacaoFindFirstArgs<ExtArgs>>): Prisma__DoacaoClient<$Result.GetResult<Prisma.$DoacaoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Doacao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoacaoFindFirstOrThrowArgs} args - Arguments to find a Doacao
     * @example
     * // Get one Doacao
     * const doacao = await prisma.doacao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DoacaoFindFirstOrThrowArgs>(args?: SelectSubset<T, DoacaoFindFirstOrThrowArgs<ExtArgs>>): Prisma__DoacaoClient<$Result.GetResult<Prisma.$DoacaoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Doacaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoacaoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Doacaos
     * const doacaos = await prisma.doacao.findMany()
     * 
     * // Get first 10 Doacaos
     * const doacaos = await prisma.doacao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doacaoWithIdOnly = await prisma.doacao.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DoacaoFindManyArgs>(args?: SelectSubset<T, DoacaoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoacaoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Doacao.
     * @param {DoacaoCreateArgs} args - Arguments to create a Doacao.
     * @example
     * // Create one Doacao
     * const Doacao = await prisma.doacao.create({
     *   data: {
     *     // ... data to create a Doacao
     *   }
     * })
     * 
     */
    create<T extends DoacaoCreateArgs>(args: SelectSubset<T, DoacaoCreateArgs<ExtArgs>>): Prisma__DoacaoClient<$Result.GetResult<Prisma.$DoacaoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Doacaos.
     * @param {DoacaoCreateManyArgs} args - Arguments to create many Doacaos.
     * @example
     * // Create many Doacaos
     * const doacao = await prisma.doacao.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DoacaoCreateManyArgs>(args?: SelectSubset<T, DoacaoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Doacaos and returns the data saved in the database.
     * @param {DoacaoCreateManyAndReturnArgs} args - Arguments to create many Doacaos.
     * @example
     * // Create many Doacaos
     * const doacao = await prisma.doacao.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Doacaos and only return the `id`
     * const doacaoWithIdOnly = await prisma.doacao.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DoacaoCreateManyAndReturnArgs>(args?: SelectSubset<T, DoacaoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoacaoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Doacao.
     * @param {DoacaoDeleteArgs} args - Arguments to delete one Doacao.
     * @example
     * // Delete one Doacao
     * const Doacao = await prisma.doacao.delete({
     *   where: {
     *     // ... filter to delete one Doacao
     *   }
     * })
     * 
     */
    delete<T extends DoacaoDeleteArgs>(args: SelectSubset<T, DoacaoDeleteArgs<ExtArgs>>): Prisma__DoacaoClient<$Result.GetResult<Prisma.$DoacaoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Doacao.
     * @param {DoacaoUpdateArgs} args - Arguments to update one Doacao.
     * @example
     * // Update one Doacao
     * const doacao = await prisma.doacao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DoacaoUpdateArgs>(args: SelectSubset<T, DoacaoUpdateArgs<ExtArgs>>): Prisma__DoacaoClient<$Result.GetResult<Prisma.$DoacaoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Doacaos.
     * @param {DoacaoDeleteManyArgs} args - Arguments to filter Doacaos to delete.
     * @example
     * // Delete a few Doacaos
     * const { count } = await prisma.doacao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DoacaoDeleteManyArgs>(args?: SelectSubset<T, DoacaoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Doacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoacaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Doacaos
     * const doacao = await prisma.doacao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DoacaoUpdateManyArgs>(args: SelectSubset<T, DoacaoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Doacao.
     * @param {DoacaoUpsertArgs} args - Arguments to update or create a Doacao.
     * @example
     * // Update or create a Doacao
     * const doacao = await prisma.doacao.upsert({
     *   create: {
     *     // ... data to create a Doacao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Doacao we want to update
     *   }
     * })
     */
    upsert<T extends DoacaoUpsertArgs>(args: SelectSubset<T, DoacaoUpsertArgs<ExtArgs>>): Prisma__DoacaoClient<$Result.GetResult<Prisma.$DoacaoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Doacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoacaoCountArgs} args - Arguments to filter Doacaos to count.
     * @example
     * // Count the number of Doacaos
     * const count = await prisma.doacao.count({
     *   where: {
     *     // ... the filter for the Doacaos we want to count
     *   }
     * })
    **/
    count<T extends DoacaoCountArgs>(
      args?: Subset<T, DoacaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoacaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Doacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoacaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoacaoAggregateArgs>(args: Subset<T, DoacaoAggregateArgs>): Prisma.PrismaPromise<GetDoacaoAggregateType<T>>

    /**
     * Group by Doacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoacaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DoacaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DoacaoGroupByArgs['orderBy'] }
        : { orderBy?: DoacaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DoacaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoacaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Doacao model
   */
  readonly fields: DoacaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Doacao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DoacaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    doador<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    criador<T extends CriadorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CriadorDefaultArgs<ExtArgs>>): Prisma__CriadorClient<$Result.GetResult<Prisma.$CriadorPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Doacao model
   */ 
  interface DoacaoFieldRefs {
    readonly id: FieldRef<"Doacao", 'String'>
    readonly doadorId: FieldRef<"Doacao", 'String'>
    readonly criadorId: FieldRef<"Doacao", 'String'>
    readonly quantidade: FieldRef<"Doacao", 'Int'>
    readonly data: FieldRef<"Doacao", 'DateTime'>
    readonly mensagem: FieldRef<"Doacao", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Doacao findUnique
   */
  export type DoacaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doacao
     */
    select?: DoacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoacaoInclude<ExtArgs> | null
    /**
     * Filter, which Doacao to fetch.
     */
    where: DoacaoWhereUniqueInput
  }

  /**
   * Doacao findUniqueOrThrow
   */
  export type DoacaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doacao
     */
    select?: DoacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoacaoInclude<ExtArgs> | null
    /**
     * Filter, which Doacao to fetch.
     */
    where: DoacaoWhereUniqueInput
  }

  /**
   * Doacao findFirst
   */
  export type DoacaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doacao
     */
    select?: DoacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoacaoInclude<ExtArgs> | null
    /**
     * Filter, which Doacao to fetch.
     */
    where?: DoacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doacaos to fetch.
     */
    orderBy?: DoacaoOrderByWithRelationInput | DoacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Doacaos.
     */
    cursor?: DoacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Doacaos.
     */
    distinct?: DoacaoScalarFieldEnum | DoacaoScalarFieldEnum[]
  }

  /**
   * Doacao findFirstOrThrow
   */
  export type DoacaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doacao
     */
    select?: DoacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoacaoInclude<ExtArgs> | null
    /**
     * Filter, which Doacao to fetch.
     */
    where?: DoacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doacaos to fetch.
     */
    orderBy?: DoacaoOrderByWithRelationInput | DoacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Doacaos.
     */
    cursor?: DoacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Doacaos.
     */
    distinct?: DoacaoScalarFieldEnum | DoacaoScalarFieldEnum[]
  }

  /**
   * Doacao findMany
   */
  export type DoacaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doacao
     */
    select?: DoacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoacaoInclude<ExtArgs> | null
    /**
     * Filter, which Doacaos to fetch.
     */
    where?: DoacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doacaos to fetch.
     */
    orderBy?: DoacaoOrderByWithRelationInput | DoacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Doacaos.
     */
    cursor?: DoacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doacaos.
     */
    skip?: number
    distinct?: DoacaoScalarFieldEnum | DoacaoScalarFieldEnum[]
  }

  /**
   * Doacao create
   */
  export type DoacaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doacao
     */
    select?: DoacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoacaoInclude<ExtArgs> | null
    /**
     * The data needed to create a Doacao.
     */
    data: XOR<DoacaoCreateInput, DoacaoUncheckedCreateInput>
  }

  /**
   * Doacao createMany
   */
  export type DoacaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Doacaos.
     */
    data: DoacaoCreateManyInput | DoacaoCreateManyInput[]
  }

  /**
   * Doacao createManyAndReturn
   */
  export type DoacaoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doacao
     */
    select?: DoacaoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Doacaos.
     */
    data: DoacaoCreateManyInput | DoacaoCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoacaoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Doacao update
   */
  export type DoacaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doacao
     */
    select?: DoacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoacaoInclude<ExtArgs> | null
    /**
     * The data needed to update a Doacao.
     */
    data: XOR<DoacaoUpdateInput, DoacaoUncheckedUpdateInput>
    /**
     * Choose, which Doacao to update.
     */
    where: DoacaoWhereUniqueInput
  }

  /**
   * Doacao updateMany
   */
  export type DoacaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Doacaos.
     */
    data: XOR<DoacaoUpdateManyMutationInput, DoacaoUncheckedUpdateManyInput>
    /**
     * Filter which Doacaos to update
     */
    where?: DoacaoWhereInput
  }

  /**
   * Doacao upsert
   */
  export type DoacaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doacao
     */
    select?: DoacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoacaoInclude<ExtArgs> | null
    /**
     * The filter to search for the Doacao to update in case it exists.
     */
    where: DoacaoWhereUniqueInput
    /**
     * In case the Doacao found by the `where` argument doesn't exist, create a new Doacao with this data.
     */
    create: XOR<DoacaoCreateInput, DoacaoUncheckedCreateInput>
    /**
     * In case the Doacao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DoacaoUpdateInput, DoacaoUncheckedUpdateInput>
  }

  /**
   * Doacao delete
   */
  export type DoacaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doacao
     */
    select?: DoacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoacaoInclude<ExtArgs> | null
    /**
     * Filter which Doacao to delete.
     */
    where: DoacaoWhereUniqueInput
  }

  /**
   * Doacao deleteMany
   */
  export type DoacaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Doacaos to delete
     */
    where?: DoacaoWhereInput
  }

  /**
   * Doacao without action
   */
  export type DoacaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doacao
     */
    select?: DoacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoacaoInclude<ExtArgs> | null
  }


  /**
   * Model Transacao
   */

  export type AggregateTransacao = {
    _count: TransacaoCountAggregateOutputType | null
    _avg: TransacaoAvgAggregateOutputType | null
    _sum: TransacaoSumAggregateOutputType | null
    _min: TransacaoMinAggregateOutputType | null
    _max: TransacaoMaxAggregateOutputType | null
  }

  export type TransacaoAvgAggregateOutputType = {
    valor: number | null
  }

  export type TransacaoSumAggregateOutputType = {
    valor: number | null
  }

  export type TransacaoMinAggregateOutputType = {
    id: string | null
    usuarioId: string | null
    tipo: string | null
    valor: number | null
    codigoParceiro: string | null
    status: string | null
    data: Date | null
  }

  export type TransacaoMaxAggregateOutputType = {
    id: string | null
    usuarioId: string | null
    tipo: string | null
    valor: number | null
    codigoParceiro: string | null
    status: string | null
    data: Date | null
  }

  export type TransacaoCountAggregateOutputType = {
    id: number
    usuarioId: number
    tipo: number
    valor: number
    codigoParceiro: number
    status: number
    data: number
    _all: number
  }


  export type TransacaoAvgAggregateInputType = {
    valor?: true
  }

  export type TransacaoSumAggregateInputType = {
    valor?: true
  }

  export type TransacaoMinAggregateInputType = {
    id?: true
    usuarioId?: true
    tipo?: true
    valor?: true
    codigoParceiro?: true
    status?: true
    data?: true
  }

  export type TransacaoMaxAggregateInputType = {
    id?: true
    usuarioId?: true
    tipo?: true
    valor?: true
    codigoParceiro?: true
    status?: true
    data?: true
  }

  export type TransacaoCountAggregateInputType = {
    id?: true
    usuarioId?: true
    tipo?: true
    valor?: true
    codigoParceiro?: true
    status?: true
    data?: true
    _all?: true
  }

  export type TransacaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transacao to aggregate.
     */
    where?: TransacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transacaos to fetch.
     */
    orderBy?: TransacaoOrderByWithRelationInput | TransacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transacaos
    **/
    _count?: true | TransacaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransacaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransacaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransacaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransacaoMaxAggregateInputType
  }

  export type GetTransacaoAggregateType<T extends TransacaoAggregateArgs> = {
        [P in keyof T & keyof AggregateTransacao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransacao[P]>
      : GetScalarType<T[P], AggregateTransacao[P]>
  }




  export type TransacaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransacaoWhereInput
    orderBy?: TransacaoOrderByWithAggregationInput | TransacaoOrderByWithAggregationInput[]
    by: TransacaoScalarFieldEnum[] | TransacaoScalarFieldEnum
    having?: TransacaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransacaoCountAggregateInputType | true
    _avg?: TransacaoAvgAggregateInputType
    _sum?: TransacaoSumAggregateInputType
    _min?: TransacaoMinAggregateInputType
    _max?: TransacaoMaxAggregateInputType
  }

  export type TransacaoGroupByOutputType = {
    id: string
    usuarioId: string
    tipo: string
    valor: number
    codigoParceiro: string | null
    status: string
    data: Date
    _count: TransacaoCountAggregateOutputType | null
    _avg: TransacaoAvgAggregateOutputType | null
    _sum: TransacaoSumAggregateOutputType | null
    _min: TransacaoMinAggregateOutputType | null
    _max: TransacaoMaxAggregateOutputType | null
  }

  type GetTransacaoGroupByPayload<T extends TransacaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransacaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransacaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransacaoGroupByOutputType[P]>
            : GetScalarType<T[P], TransacaoGroupByOutputType[P]>
        }
      >
    >


  export type TransacaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    tipo?: boolean
    valor?: boolean
    codigoParceiro?: boolean
    status?: boolean
    data?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transacao"]>

  export type TransacaoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    tipo?: boolean
    valor?: boolean
    codigoParceiro?: boolean
    status?: boolean
    data?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transacao"]>

  export type TransacaoSelectScalar = {
    id?: boolean
    usuarioId?: boolean
    tipo?: boolean
    valor?: boolean
    codigoParceiro?: boolean
    status?: boolean
    data?: boolean
  }

  export type TransacaoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type TransacaoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $TransacaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transacao"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      usuarioId: string
      tipo: string
      valor: number
      codigoParceiro: string | null
      status: string
      data: Date
    }, ExtArgs["result"]["transacao"]>
    composites: {}
  }

  type TransacaoGetPayload<S extends boolean | null | undefined | TransacaoDefaultArgs> = $Result.GetResult<Prisma.$TransacaoPayload, S>

  type TransacaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TransacaoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TransacaoCountAggregateInputType | true
    }

  export interface TransacaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transacao'], meta: { name: 'Transacao' } }
    /**
     * Find zero or one Transacao that matches the filter.
     * @param {TransacaoFindUniqueArgs} args - Arguments to find a Transacao
     * @example
     * // Get one Transacao
     * const transacao = await prisma.transacao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransacaoFindUniqueArgs>(args: SelectSubset<T, TransacaoFindUniqueArgs<ExtArgs>>): Prisma__TransacaoClient<$Result.GetResult<Prisma.$TransacaoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Transacao that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TransacaoFindUniqueOrThrowArgs} args - Arguments to find a Transacao
     * @example
     * // Get one Transacao
     * const transacao = await prisma.transacao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransacaoFindUniqueOrThrowArgs>(args: SelectSubset<T, TransacaoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransacaoClient<$Result.GetResult<Prisma.$TransacaoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Transacao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransacaoFindFirstArgs} args - Arguments to find a Transacao
     * @example
     * // Get one Transacao
     * const transacao = await prisma.transacao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransacaoFindFirstArgs>(args?: SelectSubset<T, TransacaoFindFirstArgs<ExtArgs>>): Prisma__TransacaoClient<$Result.GetResult<Prisma.$TransacaoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Transacao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransacaoFindFirstOrThrowArgs} args - Arguments to find a Transacao
     * @example
     * // Get one Transacao
     * const transacao = await prisma.transacao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransacaoFindFirstOrThrowArgs>(args?: SelectSubset<T, TransacaoFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransacaoClient<$Result.GetResult<Prisma.$TransacaoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Transacaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransacaoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transacaos
     * const transacaos = await prisma.transacao.findMany()
     * 
     * // Get first 10 Transacaos
     * const transacaos = await prisma.transacao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transacaoWithIdOnly = await prisma.transacao.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransacaoFindManyArgs>(args?: SelectSubset<T, TransacaoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransacaoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Transacao.
     * @param {TransacaoCreateArgs} args - Arguments to create a Transacao.
     * @example
     * // Create one Transacao
     * const Transacao = await prisma.transacao.create({
     *   data: {
     *     // ... data to create a Transacao
     *   }
     * })
     * 
     */
    create<T extends TransacaoCreateArgs>(args: SelectSubset<T, TransacaoCreateArgs<ExtArgs>>): Prisma__TransacaoClient<$Result.GetResult<Prisma.$TransacaoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Transacaos.
     * @param {TransacaoCreateManyArgs} args - Arguments to create many Transacaos.
     * @example
     * // Create many Transacaos
     * const transacao = await prisma.transacao.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransacaoCreateManyArgs>(args?: SelectSubset<T, TransacaoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transacaos and returns the data saved in the database.
     * @param {TransacaoCreateManyAndReturnArgs} args - Arguments to create many Transacaos.
     * @example
     * // Create many Transacaos
     * const transacao = await prisma.transacao.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transacaos and only return the `id`
     * const transacaoWithIdOnly = await prisma.transacao.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TransacaoCreateManyAndReturnArgs>(args?: SelectSubset<T, TransacaoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransacaoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Transacao.
     * @param {TransacaoDeleteArgs} args - Arguments to delete one Transacao.
     * @example
     * // Delete one Transacao
     * const Transacao = await prisma.transacao.delete({
     *   where: {
     *     // ... filter to delete one Transacao
     *   }
     * })
     * 
     */
    delete<T extends TransacaoDeleteArgs>(args: SelectSubset<T, TransacaoDeleteArgs<ExtArgs>>): Prisma__TransacaoClient<$Result.GetResult<Prisma.$TransacaoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Transacao.
     * @param {TransacaoUpdateArgs} args - Arguments to update one Transacao.
     * @example
     * // Update one Transacao
     * const transacao = await prisma.transacao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransacaoUpdateArgs>(args: SelectSubset<T, TransacaoUpdateArgs<ExtArgs>>): Prisma__TransacaoClient<$Result.GetResult<Prisma.$TransacaoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Transacaos.
     * @param {TransacaoDeleteManyArgs} args - Arguments to filter Transacaos to delete.
     * @example
     * // Delete a few Transacaos
     * const { count } = await prisma.transacao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransacaoDeleteManyArgs>(args?: SelectSubset<T, TransacaoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransacaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transacaos
     * const transacao = await prisma.transacao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransacaoUpdateManyArgs>(args: SelectSubset<T, TransacaoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Transacao.
     * @param {TransacaoUpsertArgs} args - Arguments to update or create a Transacao.
     * @example
     * // Update or create a Transacao
     * const transacao = await prisma.transacao.upsert({
     *   create: {
     *     // ... data to create a Transacao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transacao we want to update
     *   }
     * })
     */
    upsert<T extends TransacaoUpsertArgs>(args: SelectSubset<T, TransacaoUpsertArgs<ExtArgs>>): Prisma__TransacaoClient<$Result.GetResult<Prisma.$TransacaoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Transacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransacaoCountArgs} args - Arguments to filter Transacaos to count.
     * @example
     * // Count the number of Transacaos
     * const count = await prisma.transacao.count({
     *   where: {
     *     // ... the filter for the Transacaos we want to count
     *   }
     * })
    **/
    count<T extends TransacaoCountArgs>(
      args?: Subset<T, TransacaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransacaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransacaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransacaoAggregateArgs>(args: Subset<T, TransacaoAggregateArgs>): Prisma.PrismaPromise<GetTransacaoAggregateType<T>>

    /**
     * Group by Transacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransacaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransacaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransacaoGroupByArgs['orderBy'] }
        : { orderBy?: TransacaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransacaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransacaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transacao model
   */
  readonly fields: TransacaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transacao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransacaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Transacao model
   */ 
  interface TransacaoFieldRefs {
    readonly id: FieldRef<"Transacao", 'String'>
    readonly usuarioId: FieldRef<"Transacao", 'String'>
    readonly tipo: FieldRef<"Transacao", 'String'>
    readonly valor: FieldRef<"Transacao", 'Float'>
    readonly codigoParceiro: FieldRef<"Transacao", 'String'>
    readonly status: FieldRef<"Transacao", 'String'>
    readonly data: FieldRef<"Transacao", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Transacao findUnique
   */
  export type TransacaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transacao
     */
    select?: TransacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransacaoInclude<ExtArgs> | null
    /**
     * Filter, which Transacao to fetch.
     */
    where: TransacaoWhereUniqueInput
  }

  /**
   * Transacao findUniqueOrThrow
   */
  export type TransacaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transacao
     */
    select?: TransacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransacaoInclude<ExtArgs> | null
    /**
     * Filter, which Transacao to fetch.
     */
    where: TransacaoWhereUniqueInput
  }

  /**
   * Transacao findFirst
   */
  export type TransacaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transacao
     */
    select?: TransacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransacaoInclude<ExtArgs> | null
    /**
     * Filter, which Transacao to fetch.
     */
    where?: TransacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transacaos to fetch.
     */
    orderBy?: TransacaoOrderByWithRelationInput | TransacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transacaos.
     */
    cursor?: TransacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transacaos.
     */
    distinct?: TransacaoScalarFieldEnum | TransacaoScalarFieldEnum[]
  }

  /**
   * Transacao findFirstOrThrow
   */
  export type TransacaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transacao
     */
    select?: TransacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransacaoInclude<ExtArgs> | null
    /**
     * Filter, which Transacao to fetch.
     */
    where?: TransacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transacaos to fetch.
     */
    orderBy?: TransacaoOrderByWithRelationInput | TransacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transacaos.
     */
    cursor?: TransacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transacaos.
     */
    distinct?: TransacaoScalarFieldEnum | TransacaoScalarFieldEnum[]
  }

  /**
   * Transacao findMany
   */
  export type TransacaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transacao
     */
    select?: TransacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransacaoInclude<ExtArgs> | null
    /**
     * Filter, which Transacaos to fetch.
     */
    where?: TransacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transacaos to fetch.
     */
    orderBy?: TransacaoOrderByWithRelationInput | TransacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transacaos.
     */
    cursor?: TransacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transacaos.
     */
    skip?: number
    distinct?: TransacaoScalarFieldEnum | TransacaoScalarFieldEnum[]
  }

  /**
   * Transacao create
   */
  export type TransacaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transacao
     */
    select?: TransacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransacaoInclude<ExtArgs> | null
    /**
     * The data needed to create a Transacao.
     */
    data: XOR<TransacaoCreateInput, TransacaoUncheckedCreateInput>
  }

  /**
   * Transacao createMany
   */
  export type TransacaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transacaos.
     */
    data: TransacaoCreateManyInput | TransacaoCreateManyInput[]
  }

  /**
   * Transacao createManyAndReturn
   */
  export type TransacaoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transacao
     */
    select?: TransacaoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Transacaos.
     */
    data: TransacaoCreateManyInput | TransacaoCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransacaoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transacao update
   */
  export type TransacaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transacao
     */
    select?: TransacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransacaoInclude<ExtArgs> | null
    /**
     * The data needed to update a Transacao.
     */
    data: XOR<TransacaoUpdateInput, TransacaoUncheckedUpdateInput>
    /**
     * Choose, which Transacao to update.
     */
    where: TransacaoWhereUniqueInput
  }

  /**
   * Transacao updateMany
   */
  export type TransacaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transacaos.
     */
    data: XOR<TransacaoUpdateManyMutationInput, TransacaoUncheckedUpdateManyInput>
    /**
     * Filter which Transacaos to update
     */
    where?: TransacaoWhereInput
  }

  /**
   * Transacao upsert
   */
  export type TransacaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transacao
     */
    select?: TransacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransacaoInclude<ExtArgs> | null
    /**
     * The filter to search for the Transacao to update in case it exists.
     */
    where: TransacaoWhereUniqueInput
    /**
     * In case the Transacao found by the `where` argument doesn't exist, create a new Transacao with this data.
     */
    create: XOR<TransacaoCreateInput, TransacaoUncheckedCreateInput>
    /**
     * In case the Transacao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransacaoUpdateInput, TransacaoUncheckedUpdateInput>
  }

  /**
   * Transacao delete
   */
  export type TransacaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transacao
     */
    select?: TransacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransacaoInclude<ExtArgs> | null
    /**
     * Filter which Transacao to delete.
     */
    where: TransacaoWhereUniqueInput
  }

  /**
   * Transacao deleteMany
   */
  export type TransacaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transacaos to delete
     */
    where?: TransacaoWhereInput
  }

  /**
   * Transacao without action
   */
  export type TransacaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transacao
     */
    select?: TransacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransacaoInclude<ExtArgs> | null
  }


  /**
   * Model CodigoCashback
   */

  export type AggregateCodigoCashback = {
    _count: CodigoCashbackCountAggregateOutputType | null
    _avg: CodigoCashbackAvgAggregateOutputType | null
    _sum: CodigoCashbackSumAggregateOutputType | null
    _min: CodigoCashbackMinAggregateOutputType | null
    _max: CodigoCashbackMaxAggregateOutputType | null
  }

  export type CodigoCashbackAvgAggregateOutputType = {
    valor: number | null
  }

  export type CodigoCashbackSumAggregateOutputType = {
    valor: number | null
  }

  export type CodigoCashbackMinAggregateOutputType = {
    id: string | null
    parceiroId: string | null
    codigo: string | null
    valor: number | null
    usado: boolean | null
    dataGeracao: Date | null
    dataUso: Date | null
  }

  export type CodigoCashbackMaxAggregateOutputType = {
    id: string | null
    parceiroId: string | null
    codigo: string | null
    valor: number | null
    usado: boolean | null
    dataGeracao: Date | null
    dataUso: Date | null
  }

  export type CodigoCashbackCountAggregateOutputType = {
    id: number
    parceiroId: number
    codigo: number
    valor: number
    usado: number
    dataGeracao: number
    dataUso: number
    _all: number
  }


  export type CodigoCashbackAvgAggregateInputType = {
    valor?: true
  }

  export type CodigoCashbackSumAggregateInputType = {
    valor?: true
  }

  export type CodigoCashbackMinAggregateInputType = {
    id?: true
    parceiroId?: true
    codigo?: true
    valor?: true
    usado?: true
    dataGeracao?: true
    dataUso?: true
  }

  export type CodigoCashbackMaxAggregateInputType = {
    id?: true
    parceiroId?: true
    codigo?: true
    valor?: true
    usado?: true
    dataGeracao?: true
    dataUso?: true
  }

  export type CodigoCashbackCountAggregateInputType = {
    id?: true
    parceiroId?: true
    codigo?: true
    valor?: true
    usado?: true
    dataGeracao?: true
    dataUso?: true
    _all?: true
  }

  export type CodigoCashbackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CodigoCashback to aggregate.
     */
    where?: CodigoCashbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CodigoCashbacks to fetch.
     */
    orderBy?: CodigoCashbackOrderByWithRelationInput | CodigoCashbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CodigoCashbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CodigoCashbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CodigoCashbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CodigoCashbacks
    **/
    _count?: true | CodigoCashbackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CodigoCashbackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CodigoCashbackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CodigoCashbackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CodigoCashbackMaxAggregateInputType
  }

  export type GetCodigoCashbackAggregateType<T extends CodigoCashbackAggregateArgs> = {
        [P in keyof T & keyof AggregateCodigoCashback]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCodigoCashback[P]>
      : GetScalarType<T[P], AggregateCodigoCashback[P]>
  }




  export type CodigoCashbackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CodigoCashbackWhereInput
    orderBy?: CodigoCashbackOrderByWithAggregationInput | CodigoCashbackOrderByWithAggregationInput[]
    by: CodigoCashbackScalarFieldEnum[] | CodigoCashbackScalarFieldEnum
    having?: CodigoCashbackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CodigoCashbackCountAggregateInputType | true
    _avg?: CodigoCashbackAvgAggregateInputType
    _sum?: CodigoCashbackSumAggregateInputType
    _min?: CodigoCashbackMinAggregateInputType
    _max?: CodigoCashbackMaxAggregateInputType
  }

  export type CodigoCashbackGroupByOutputType = {
    id: string
    parceiroId: string
    codigo: string
    valor: number
    usado: boolean
    dataGeracao: Date
    dataUso: Date | null
    _count: CodigoCashbackCountAggregateOutputType | null
    _avg: CodigoCashbackAvgAggregateOutputType | null
    _sum: CodigoCashbackSumAggregateOutputType | null
    _min: CodigoCashbackMinAggregateOutputType | null
    _max: CodigoCashbackMaxAggregateOutputType | null
  }

  type GetCodigoCashbackGroupByPayload<T extends CodigoCashbackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CodigoCashbackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CodigoCashbackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CodigoCashbackGroupByOutputType[P]>
            : GetScalarType<T[P], CodigoCashbackGroupByOutputType[P]>
        }
      >
    >


  export type CodigoCashbackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    parceiroId?: boolean
    codigo?: boolean
    valor?: boolean
    usado?: boolean
    dataGeracao?: boolean
    dataUso?: boolean
    parceiro?: boolean | ParceiroDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["codigoCashback"]>

  export type CodigoCashbackSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    parceiroId?: boolean
    codigo?: boolean
    valor?: boolean
    usado?: boolean
    dataGeracao?: boolean
    dataUso?: boolean
    parceiro?: boolean | ParceiroDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["codigoCashback"]>

  export type CodigoCashbackSelectScalar = {
    id?: boolean
    parceiroId?: boolean
    codigo?: boolean
    valor?: boolean
    usado?: boolean
    dataGeracao?: boolean
    dataUso?: boolean
  }

  export type CodigoCashbackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parceiro?: boolean | ParceiroDefaultArgs<ExtArgs>
  }
  export type CodigoCashbackIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parceiro?: boolean | ParceiroDefaultArgs<ExtArgs>
  }

  export type $CodigoCashbackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CodigoCashback"
    objects: {
      parceiro: Prisma.$ParceiroPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      parceiroId: string
      codigo: string
      valor: number
      usado: boolean
      dataGeracao: Date
      dataUso: Date | null
    }, ExtArgs["result"]["codigoCashback"]>
    composites: {}
  }

  type CodigoCashbackGetPayload<S extends boolean | null | undefined | CodigoCashbackDefaultArgs> = $Result.GetResult<Prisma.$CodigoCashbackPayload, S>

  type CodigoCashbackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CodigoCashbackFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CodigoCashbackCountAggregateInputType | true
    }

  export interface CodigoCashbackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CodigoCashback'], meta: { name: 'CodigoCashback' } }
    /**
     * Find zero or one CodigoCashback that matches the filter.
     * @param {CodigoCashbackFindUniqueArgs} args - Arguments to find a CodigoCashback
     * @example
     * // Get one CodigoCashback
     * const codigoCashback = await prisma.codigoCashback.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CodigoCashbackFindUniqueArgs>(args: SelectSubset<T, CodigoCashbackFindUniqueArgs<ExtArgs>>): Prisma__CodigoCashbackClient<$Result.GetResult<Prisma.$CodigoCashbackPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CodigoCashback that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CodigoCashbackFindUniqueOrThrowArgs} args - Arguments to find a CodigoCashback
     * @example
     * // Get one CodigoCashback
     * const codigoCashback = await prisma.codigoCashback.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CodigoCashbackFindUniqueOrThrowArgs>(args: SelectSubset<T, CodigoCashbackFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CodigoCashbackClient<$Result.GetResult<Prisma.$CodigoCashbackPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CodigoCashback that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodigoCashbackFindFirstArgs} args - Arguments to find a CodigoCashback
     * @example
     * // Get one CodigoCashback
     * const codigoCashback = await prisma.codigoCashback.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CodigoCashbackFindFirstArgs>(args?: SelectSubset<T, CodigoCashbackFindFirstArgs<ExtArgs>>): Prisma__CodigoCashbackClient<$Result.GetResult<Prisma.$CodigoCashbackPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CodigoCashback that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodigoCashbackFindFirstOrThrowArgs} args - Arguments to find a CodigoCashback
     * @example
     * // Get one CodigoCashback
     * const codigoCashback = await prisma.codigoCashback.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CodigoCashbackFindFirstOrThrowArgs>(args?: SelectSubset<T, CodigoCashbackFindFirstOrThrowArgs<ExtArgs>>): Prisma__CodigoCashbackClient<$Result.GetResult<Prisma.$CodigoCashbackPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CodigoCashbacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodigoCashbackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CodigoCashbacks
     * const codigoCashbacks = await prisma.codigoCashback.findMany()
     * 
     * // Get first 10 CodigoCashbacks
     * const codigoCashbacks = await prisma.codigoCashback.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const codigoCashbackWithIdOnly = await prisma.codigoCashback.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CodigoCashbackFindManyArgs>(args?: SelectSubset<T, CodigoCashbackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CodigoCashbackPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CodigoCashback.
     * @param {CodigoCashbackCreateArgs} args - Arguments to create a CodigoCashback.
     * @example
     * // Create one CodigoCashback
     * const CodigoCashback = await prisma.codigoCashback.create({
     *   data: {
     *     // ... data to create a CodigoCashback
     *   }
     * })
     * 
     */
    create<T extends CodigoCashbackCreateArgs>(args: SelectSubset<T, CodigoCashbackCreateArgs<ExtArgs>>): Prisma__CodigoCashbackClient<$Result.GetResult<Prisma.$CodigoCashbackPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CodigoCashbacks.
     * @param {CodigoCashbackCreateManyArgs} args - Arguments to create many CodigoCashbacks.
     * @example
     * // Create many CodigoCashbacks
     * const codigoCashback = await prisma.codigoCashback.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CodigoCashbackCreateManyArgs>(args?: SelectSubset<T, CodigoCashbackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CodigoCashbacks and returns the data saved in the database.
     * @param {CodigoCashbackCreateManyAndReturnArgs} args - Arguments to create many CodigoCashbacks.
     * @example
     * // Create many CodigoCashbacks
     * const codigoCashback = await prisma.codigoCashback.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CodigoCashbacks and only return the `id`
     * const codigoCashbackWithIdOnly = await prisma.codigoCashback.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CodigoCashbackCreateManyAndReturnArgs>(args?: SelectSubset<T, CodigoCashbackCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CodigoCashbackPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CodigoCashback.
     * @param {CodigoCashbackDeleteArgs} args - Arguments to delete one CodigoCashback.
     * @example
     * // Delete one CodigoCashback
     * const CodigoCashback = await prisma.codigoCashback.delete({
     *   where: {
     *     // ... filter to delete one CodigoCashback
     *   }
     * })
     * 
     */
    delete<T extends CodigoCashbackDeleteArgs>(args: SelectSubset<T, CodigoCashbackDeleteArgs<ExtArgs>>): Prisma__CodigoCashbackClient<$Result.GetResult<Prisma.$CodigoCashbackPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CodigoCashback.
     * @param {CodigoCashbackUpdateArgs} args - Arguments to update one CodigoCashback.
     * @example
     * // Update one CodigoCashback
     * const codigoCashback = await prisma.codigoCashback.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CodigoCashbackUpdateArgs>(args: SelectSubset<T, CodigoCashbackUpdateArgs<ExtArgs>>): Prisma__CodigoCashbackClient<$Result.GetResult<Prisma.$CodigoCashbackPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CodigoCashbacks.
     * @param {CodigoCashbackDeleteManyArgs} args - Arguments to filter CodigoCashbacks to delete.
     * @example
     * // Delete a few CodigoCashbacks
     * const { count } = await prisma.codigoCashback.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CodigoCashbackDeleteManyArgs>(args?: SelectSubset<T, CodigoCashbackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CodigoCashbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodigoCashbackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CodigoCashbacks
     * const codigoCashback = await prisma.codigoCashback.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CodigoCashbackUpdateManyArgs>(args: SelectSubset<T, CodigoCashbackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CodigoCashback.
     * @param {CodigoCashbackUpsertArgs} args - Arguments to update or create a CodigoCashback.
     * @example
     * // Update or create a CodigoCashback
     * const codigoCashback = await prisma.codigoCashback.upsert({
     *   create: {
     *     // ... data to create a CodigoCashback
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CodigoCashback we want to update
     *   }
     * })
     */
    upsert<T extends CodigoCashbackUpsertArgs>(args: SelectSubset<T, CodigoCashbackUpsertArgs<ExtArgs>>): Prisma__CodigoCashbackClient<$Result.GetResult<Prisma.$CodigoCashbackPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CodigoCashbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodigoCashbackCountArgs} args - Arguments to filter CodigoCashbacks to count.
     * @example
     * // Count the number of CodigoCashbacks
     * const count = await prisma.codigoCashback.count({
     *   where: {
     *     // ... the filter for the CodigoCashbacks we want to count
     *   }
     * })
    **/
    count<T extends CodigoCashbackCountArgs>(
      args?: Subset<T, CodigoCashbackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CodigoCashbackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CodigoCashback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodigoCashbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CodigoCashbackAggregateArgs>(args: Subset<T, CodigoCashbackAggregateArgs>): Prisma.PrismaPromise<GetCodigoCashbackAggregateType<T>>

    /**
     * Group by CodigoCashback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodigoCashbackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CodigoCashbackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CodigoCashbackGroupByArgs['orderBy'] }
        : { orderBy?: CodigoCashbackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CodigoCashbackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCodigoCashbackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CodigoCashback model
   */
  readonly fields: CodigoCashbackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CodigoCashback.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CodigoCashbackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parceiro<T extends ParceiroDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ParceiroDefaultArgs<ExtArgs>>): Prisma__ParceiroClient<$Result.GetResult<Prisma.$ParceiroPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CodigoCashback model
   */ 
  interface CodigoCashbackFieldRefs {
    readonly id: FieldRef<"CodigoCashback", 'String'>
    readonly parceiroId: FieldRef<"CodigoCashback", 'String'>
    readonly codigo: FieldRef<"CodigoCashback", 'String'>
    readonly valor: FieldRef<"CodigoCashback", 'Float'>
    readonly usado: FieldRef<"CodigoCashback", 'Boolean'>
    readonly dataGeracao: FieldRef<"CodigoCashback", 'DateTime'>
    readonly dataUso: FieldRef<"CodigoCashback", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CodigoCashback findUnique
   */
  export type CodigoCashbackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodigoCashback
     */
    select?: CodigoCashbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodigoCashbackInclude<ExtArgs> | null
    /**
     * Filter, which CodigoCashback to fetch.
     */
    where: CodigoCashbackWhereUniqueInput
  }

  /**
   * CodigoCashback findUniqueOrThrow
   */
  export type CodigoCashbackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodigoCashback
     */
    select?: CodigoCashbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodigoCashbackInclude<ExtArgs> | null
    /**
     * Filter, which CodigoCashback to fetch.
     */
    where: CodigoCashbackWhereUniqueInput
  }

  /**
   * CodigoCashback findFirst
   */
  export type CodigoCashbackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodigoCashback
     */
    select?: CodigoCashbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodigoCashbackInclude<ExtArgs> | null
    /**
     * Filter, which CodigoCashback to fetch.
     */
    where?: CodigoCashbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CodigoCashbacks to fetch.
     */
    orderBy?: CodigoCashbackOrderByWithRelationInput | CodigoCashbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CodigoCashbacks.
     */
    cursor?: CodigoCashbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CodigoCashbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CodigoCashbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CodigoCashbacks.
     */
    distinct?: CodigoCashbackScalarFieldEnum | CodigoCashbackScalarFieldEnum[]
  }

  /**
   * CodigoCashback findFirstOrThrow
   */
  export type CodigoCashbackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodigoCashback
     */
    select?: CodigoCashbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodigoCashbackInclude<ExtArgs> | null
    /**
     * Filter, which CodigoCashback to fetch.
     */
    where?: CodigoCashbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CodigoCashbacks to fetch.
     */
    orderBy?: CodigoCashbackOrderByWithRelationInput | CodigoCashbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CodigoCashbacks.
     */
    cursor?: CodigoCashbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CodigoCashbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CodigoCashbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CodigoCashbacks.
     */
    distinct?: CodigoCashbackScalarFieldEnum | CodigoCashbackScalarFieldEnum[]
  }

  /**
   * CodigoCashback findMany
   */
  export type CodigoCashbackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodigoCashback
     */
    select?: CodigoCashbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodigoCashbackInclude<ExtArgs> | null
    /**
     * Filter, which CodigoCashbacks to fetch.
     */
    where?: CodigoCashbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CodigoCashbacks to fetch.
     */
    orderBy?: CodigoCashbackOrderByWithRelationInput | CodigoCashbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CodigoCashbacks.
     */
    cursor?: CodigoCashbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CodigoCashbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CodigoCashbacks.
     */
    skip?: number
    distinct?: CodigoCashbackScalarFieldEnum | CodigoCashbackScalarFieldEnum[]
  }

  /**
   * CodigoCashback create
   */
  export type CodigoCashbackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodigoCashback
     */
    select?: CodigoCashbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodigoCashbackInclude<ExtArgs> | null
    /**
     * The data needed to create a CodigoCashback.
     */
    data: XOR<CodigoCashbackCreateInput, CodigoCashbackUncheckedCreateInput>
  }

  /**
   * CodigoCashback createMany
   */
  export type CodigoCashbackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CodigoCashbacks.
     */
    data: CodigoCashbackCreateManyInput | CodigoCashbackCreateManyInput[]
  }

  /**
   * CodigoCashback createManyAndReturn
   */
  export type CodigoCashbackCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodigoCashback
     */
    select?: CodigoCashbackSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CodigoCashbacks.
     */
    data: CodigoCashbackCreateManyInput | CodigoCashbackCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodigoCashbackIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CodigoCashback update
   */
  export type CodigoCashbackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodigoCashback
     */
    select?: CodigoCashbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodigoCashbackInclude<ExtArgs> | null
    /**
     * The data needed to update a CodigoCashback.
     */
    data: XOR<CodigoCashbackUpdateInput, CodigoCashbackUncheckedUpdateInput>
    /**
     * Choose, which CodigoCashback to update.
     */
    where: CodigoCashbackWhereUniqueInput
  }

  /**
   * CodigoCashback updateMany
   */
  export type CodigoCashbackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CodigoCashbacks.
     */
    data: XOR<CodigoCashbackUpdateManyMutationInput, CodigoCashbackUncheckedUpdateManyInput>
    /**
     * Filter which CodigoCashbacks to update
     */
    where?: CodigoCashbackWhereInput
  }

  /**
   * CodigoCashback upsert
   */
  export type CodigoCashbackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodigoCashback
     */
    select?: CodigoCashbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodigoCashbackInclude<ExtArgs> | null
    /**
     * The filter to search for the CodigoCashback to update in case it exists.
     */
    where: CodigoCashbackWhereUniqueInput
    /**
     * In case the CodigoCashback found by the `where` argument doesn't exist, create a new CodigoCashback with this data.
     */
    create: XOR<CodigoCashbackCreateInput, CodigoCashbackUncheckedCreateInput>
    /**
     * In case the CodigoCashback was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CodigoCashbackUpdateInput, CodigoCashbackUncheckedUpdateInput>
  }

  /**
   * CodigoCashback delete
   */
  export type CodigoCashbackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodigoCashback
     */
    select?: CodigoCashbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodigoCashbackInclude<ExtArgs> | null
    /**
     * Filter which CodigoCashback to delete.
     */
    where: CodigoCashbackWhereUniqueInput
  }

  /**
   * CodigoCashback deleteMany
   */
  export type CodigoCashbackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CodigoCashbacks to delete
     */
    where?: CodigoCashbackWhereInput
  }

  /**
   * CodigoCashback without action
   */
  export type CodigoCashbackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodigoCashback
     */
    select?: CodigoCashbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodigoCashbackInclude<ExtArgs> | null
  }


  /**
   * Model Notificacao
   */

  export type AggregateNotificacao = {
    _count: NotificacaoCountAggregateOutputType | null
    _min: NotificacaoMinAggregateOutputType | null
    _max: NotificacaoMaxAggregateOutputType | null
  }

  export type NotificacaoMinAggregateOutputType = {
    id: string | null
    usuarioId: string | null
    tipo: string | null
    titulo: string | null
    mensagem: string | null
    lida: boolean | null
    data: Date | null
  }

  export type NotificacaoMaxAggregateOutputType = {
    id: string | null
    usuarioId: string | null
    tipo: string | null
    titulo: string | null
    mensagem: string | null
    lida: boolean | null
    data: Date | null
  }

  export type NotificacaoCountAggregateOutputType = {
    id: number
    usuarioId: number
    tipo: number
    titulo: number
    mensagem: number
    lida: number
    data: number
    _all: number
  }


  export type NotificacaoMinAggregateInputType = {
    id?: true
    usuarioId?: true
    tipo?: true
    titulo?: true
    mensagem?: true
    lida?: true
    data?: true
  }

  export type NotificacaoMaxAggregateInputType = {
    id?: true
    usuarioId?: true
    tipo?: true
    titulo?: true
    mensagem?: true
    lida?: true
    data?: true
  }

  export type NotificacaoCountAggregateInputType = {
    id?: true
    usuarioId?: true
    tipo?: true
    titulo?: true
    mensagem?: true
    lida?: true
    data?: true
    _all?: true
  }

  export type NotificacaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notificacao to aggregate.
     */
    where?: NotificacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notificacaos to fetch.
     */
    orderBy?: NotificacaoOrderByWithRelationInput | NotificacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notificacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notificacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notificacaos
    **/
    _count?: true | NotificacaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificacaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificacaoMaxAggregateInputType
  }

  export type GetNotificacaoAggregateType<T extends NotificacaoAggregateArgs> = {
        [P in keyof T & keyof AggregateNotificacao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotificacao[P]>
      : GetScalarType<T[P], AggregateNotificacao[P]>
  }




  export type NotificacaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificacaoWhereInput
    orderBy?: NotificacaoOrderByWithAggregationInput | NotificacaoOrderByWithAggregationInput[]
    by: NotificacaoScalarFieldEnum[] | NotificacaoScalarFieldEnum
    having?: NotificacaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificacaoCountAggregateInputType | true
    _min?: NotificacaoMinAggregateInputType
    _max?: NotificacaoMaxAggregateInputType
  }

  export type NotificacaoGroupByOutputType = {
    id: string
    usuarioId: string
    tipo: string
    titulo: string
    mensagem: string
    lida: boolean
    data: Date
    _count: NotificacaoCountAggregateOutputType | null
    _min: NotificacaoMinAggregateOutputType | null
    _max: NotificacaoMaxAggregateOutputType | null
  }

  type GetNotificacaoGroupByPayload<T extends NotificacaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificacaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificacaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificacaoGroupByOutputType[P]>
            : GetScalarType<T[P], NotificacaoGroupByOutputType[P]>
        }
      >
    >


  export type NotificacaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    tipo?: boolean
    titulo?: boolean
    mensagem?: boolean
    lida?: boolean
    data?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificacao"]>

  export type NotificacaoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    tipo?: boolean
    titulo?: boolean
    mensagem?: boolean
    lida?: boolean
    data?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificacao"]>

  export type NotificacaoSelectScalar = {
    id?: boolean
    usuarioId?: boolean
    tipo?: boolean
    titulo?: boolean
    mensagem?: boolean
    lida?: boolean
    data?: boolean
  }

  export type NotificacaoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type NotificacaoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $NotificacaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notificacao"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      usuarioId: string
      tipo: string
      titulo: string
      mensagem: string
      lida: boolean
      data: Date
    }, ExtArgs["result"]["notificacao"]>
    composites: {}
  }

  type NotificacaoGetPayload<S extends boolean | null | undefined | NotificacaoDefaultArgs> = $Result.GetResult<Prisma.$NotificacaoPayload, S>

  type NotificacaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificacaoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificacaoCountAggregateInputType | true
    }

  export interface NotificacaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notificacao'], meta: { name: 'Notificacao' } }
    /**
     * Find zero or one Notificacao that matches the filter.
     * @param {NotificacaoFindUniqueArgs} args - Arguments to find a Notificacao
     * @example
     * // Get one Notificacao
     * const notificacao = await prisma.notificacao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificacaoFindUniqueArgs>(args: SelectSubset<T, NotificacaoFindUniqueArgs<ExtArgs>>): Prisma__NotificacaoClient<$Result.GetResult<Prisma.$NotificacaoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notificacao that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificacaoFindUniqueOrThrowArgs} args - Arguments to find a Notificacao
     * @example
     * // Get one Notificacao
     * const notificacao = await prisma.notificacao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificacaoFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificacaoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificacaoClient<$Result.GetResult<Prisma.$NotificacaoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notificacao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoFindFirstArgs} args - Arguments to find a Notificacao
     * @example
     * // Get one Notificacao
     * const notificacao = await prisma.notificacao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificacaoFindFirstArgs>(args?: SelectSubset<T, NotificacaoFindFirstArgs<ExtArgs>>): Prisma__NotificacaoClient<$Result.GetResult<Prisma.$NotificacaoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notificacao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoFindFirstOrThrowArgs} args - Arguments to find a Notificacao
     * @example
     * // Get one Notificacao
     * const notificacao = await prisma.notificacao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificacaoFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificacaoFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificacaoClient<$Result.GetResult<Prisma.$NotificacaoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notificacaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notificacaos
     * const notificacaos = await prisma.notificacao.findMany()
     * 
     * // Get first 10 Notificacaos
     * const notificacaos = await prisma.notificacao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificacaoWithIdOnly = await prisma.notificacao.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificacaoFindManyArgs>(args?: SelectSubset<T, NotificacaoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificacaoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notificacao.
     * @param {NotificacaoCreateArgs} args - Arguments to create a Notificacao.
     * @example
     * // Create one Notificacao
     * const Notificacao = await prisma.notificacao.create({
     *   data: {
     *     // ... data to create a Notificacao
     *   }
     * })
     * 
     */
    create<T extends NotificacaoCreateArgs>(args: SelectSubset<T, NotificacaoCreateArgs<ExtArgs>>): Prisma__NotificacaoClient<$Result.GetResult<Prisma.$NotificacaoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notificacaos.
     * @param {NotificacaoCreateManyArgs} args - Arguments to create many Notificacaos.
     * @example
     * // Create many Notificacaos
     * const notificacao = await prisma.notificacao.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificacaoCreateManyArgs>(args?: SelectSubset<T, NotificacaoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notificacaos and returns the data saved in the database.
     * @param {NotificacaoCreateManyAndReturnArgs} args - Arguments to create many Notificacaos.
     * @example
     * // Create many Notificacaos
     * const notificacao = await prisma.notificacao.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notificacaos and only return the `id`
     * const notificacaoWithIdOnly = await prisma.notificacao.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificacaoCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificacaoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificacaoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Notificacao.
     * @param {NotificacaoDeleteArgs} args - Arguments to delete one Notificacao.
     * @example
     * // Delete one Notificacao
     * const Notificacao = await prisma.notificacao.delete({
     *   where: {
     *     // ... filter to delete one Notificacao
     *   }
     * })
     * 
     */
    delete<T extends NotificacaoDeleteArgs>(args: SelectSubset<T, NotificacaoDeleteArgs<ExtArgs>>): Prisma__NotificacaoClient<$Result.GetResult<Prisma.$NotificacaoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notificacao.
     * @param {NotificacaoUpdateArgs} args - Arguments to update one Notificacao.
     * @example
     * // Update one Notificacao
     * const notificacao = await prisma.notificacao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificacaoUpdateArgs>(args: SelectSubset<T, NotificacaoUpdateArgs<ExtArgs>>): Prisma__NotificacaoClient<$Result.GetResult<Prisma.$NotificacaoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notificacaos.
     * @param {NotificacaoDeleteManyArgs} args - Arguments to filter Notificacaos to delete.
     * @example
     * // Delete a few Notificacaos
     * const { count } = await prisma.notificacao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificacaoDeleteManyArgs>(args?: SelectSubset<T, NotificacaoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notificacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notificacaos
     * const notificacao = await prisma.notificacao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificacaoUpdateManyArgs>(args: SelectSubset<T, NotificacaoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notificacao.
     * @param {NotificacaoUpsertArgs} args - Arguments to update or create a Notificacao.
     * @example
     * // Update or create a Notificacao
     * const notificacao = await prisma.notificacao.upsert({
     *   create: {
     *     // ... data to create a Notificacao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notificacao we want to update
     *   }
     * })
     */
    upsert<T extends NotificacaoUpsertArgs>(args: SelectSubset<T, NotificacaoUpsertArgs<ExtArgs>>): Prisma__NotificacaoClient<$Result.GetResult<Prisma.$NotificacaoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notificacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoCountArgs} args - Arguments to filter Notificacaos to count.
     * @example
     * // Count the number of Notificacaos
     * const count = await prisma.notificacao.count({
     *   where: {
     *     // ... the filter for the Notificacaos we want to count
     *   }
     * })
    **/
    count<T extends NotificacaoCountArgs>(
      args?: Subset<T, NotificacaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificacaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notificacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificacaoAggregateArgs>(args: Subset<T, NotificacaoAggregateArgs>): Prisma.PrismaPromise<GetNotificacaoAggregateType<T>>

    /**
     * Group by Notificacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificacaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificacaoGroupByArgs['orderBy'] }
        : { orderBy?: NotificacaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificacaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificacaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notificacao model
   */
  readonly fields: NotificacaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notificacao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificacaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notificacao model
   */ 
  interface NotificacaoFieldRefs {
    readonly id: FieldRef<"Notificacao", 'String'>
    readonly usuarioId: FieldRef<"Notificacao", 'String'>
    readonly tipo: FieldRef<"Notificacao", 'String'>
    readonly titulo: FieldRef<"Notificacao", 'String'>
    readonly mensagem: FieldRef<"Notificacao", 'String'>
    readonly lida: FieldRef<"Notificacao", 'Boolean'>
    readonly data: FieldRef<"Notificacao", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notificacao findUnique
   */
  export type NotificacaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * Filter, which Notificacao to fetch.
     */
    where: NotificacaoWhereUniqueInput
  }

  /**
   * Notificacao findUniqueOrThrow
   */
  export type NotificacaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * Filter, which Notificacao to fetch.
     */
    where: NotificacaoWhereUniqueInput
  }

  /**
   * Notificacao findFirst
   */
  export type NotificacaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * Filter, which Notificacao to fetch.
     */
    where?: NotificacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notificacaos to fetch.
     */
    orderBy?: NotificacaoOrderByWithRelationInput | NotificacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notificacaos.
     */
    cursor?: NotificacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notificacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notificacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notificacaos.
     */
    distinct?: NotificacaoScalarFieldEnum | NotificacaoScalarFieldEnum[]
  }

  /**
   * Notificacao findFirstOrThrow
   */
  export type NotificacaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * Filter, which Notificacao to fetch.
     */
    where?: NotificacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notificacaos to fetch.
     */
    orderBy?: NotificacaoOrderByWithRelationInput | NotificacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notificacaos.
     */
    cursor?: NotificacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notificacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notificacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notificacaos.
     */
    distinct?: NotificacaoScalarFieldEnum | NotificacaoScalarFieldEnum[]
  }

  /**
   * Notificacao findMany
   */
  export type NotificacaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * Filter, which Notificacaos to fetch.
     */
    where?: NotificacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notificacaos to fetch.
     */
    orderBy?: NotificacaoOrderByWithRelationInput | NotificacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notificacaos.
     */
    cursor?: NotificacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notificacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notificacaos.
     */
    skip?: number
    distinct?: NotificacaoScalarFieldEnum | NotificacaoScalarFieldEnum[]
  }

  /**
   * Notificacao create
   */
  export type NotificacaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * The data needed to create a Notificacao.
     */
    data: XOR<NotificacaoCreateInput, NotificacaoUncheckedCreateInput>
  }

  /**
   * Notificacao createMany
   */
  export type NotificacaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notificacaos.
     */
    data: NotificacaoCreateManyInput | NotificacaoCreateManyInput[]
  }

  /**
   * Notificacao createManyAndReturn
   */
  export type NotificacaoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Notificacaos.
     */
    data: NotificacaoCreateManyInput | NotificacaoCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notificacao update
   */
  export type NotificacaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * The data needed to update a Notificacao.
     */
    data: XOR<NotificacaoUpdateInput, NotificacaoUncheckedUpdateInput>
    /**
     * Choose, which Notificacao to update.
     */
    where: NotificacaoWhereUniqueInput
  }

  /**
   * Notificacao updateMany
   */
  export type NotificacaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notificacaos.
     */
    data: XOR<NotificacaoUpdateManyMutationInput, NotificacaoUncheckedUpdateManyInput>
    /**
     * Filter which Notificacaos to update
     */
    where?: NotificacaoWhereInput
  }

  /**
   * Notificacao upsert
   */
  export type NotificacaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * The filter to search for the Notificacao to update in case it exists.
     */
    where: NotificacaoWhereUniqueInput
    /**
     * In case the Notificacao found by the `where` argument doesn't exist, create a new Notificacao with this data.
     */
    create: XOR<NotificacaoCreateInput, NotificacaoUncheckedCreateInput>
    /**
     * In case the Notificacao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificacaoUpdateInput, NotificacaoUncheckedUpdateInput>
  }

  /**
   * Notificacao delete
   */
  export type NotificacaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * Filter which Notificacao to delete.
     */
    where: NotificacaoWhereUniqueInput
  }

  /**
   * Notificacao deleteMany
   */
  export type NotificacaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notificacaos to delete
     */
    where?: NotificacaoWhereInput
  }

  /**
   * Notificacao without action
   */
  export type NotificacaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoInclude<ExtArgs> | null
  }


  /**
   * Model TokenRecuperacao
   */

  export type AggregateTokenRecuperacao = {
    _count: TokenRecuperacaoCountAggregateOutputType | null
    _min: TokenRecuperacaoMinAggregateOutputType | null
    _max: TokenRecuperacaoMaxAggregateOutputType | null
  }

  export type TokenRecuperacaoMinAggregateOutputType = {
    id: string | null
    usuarioId: string | null
    token: string | null
    usado: boolean | null
    expiraEm: Date | null
    dataCriacao: Date | null
  }

  export type TokenRecuperacaoMaxAggregateOutputType = {
    id: string | null
    usuarioId: string | null
    token: string | null
    usado: boolean | null
    expiraEm: Date | null
    dataCriacao: Date | null
  }

  export type TokenRecuperacaoCountAggregateOutputType = {
    id: number
    usuarioId: number
    token: number
    usado: number
    expiraEm: number
    dataCriacao: number
    _all: number
  }


  export type TokenRecuperacaoMinAggregateInputType = {
    id?: true
    usuarioId?: true
    token?: true
    usado?: true
    expiraEm?: true
    dataCriacao?: true
  }

  export type TokenRecuperacaoMaxAggregateInputType = {
    id?: true
    usuarioId?: true
    token?: true
    usado?: true
    expiraEm?: true
    dataCriacao?: true
  }

  export type TokenRecuperacaoCountAggregateInputType = {
    id?: true
    usuarioId?: true
    token?: true
    usado?: true
    expiraEm?: true
    dataCriacao?: true
    _all?: true
  }

  export type TokenRecuperacaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TokenRecuperacao to aggregate.
     */
    where?: TokenRecuperacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TokenRecuperacaos to fetch.
     */
    orderBy?: TokenRecuperacaoOrderByWithRelationInput | TokenRecuperacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TokenRecuperacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TokenRecuperacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TokenRecuperacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TokenRecuperacaos
    **/
    _count?: true | TokenRecuperacaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TokenRecuperacaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TokenRecuperacaoMaxAggregateInputType
  }

  export type GetTokenRecuperacaoAggregateType<T extends TokenRecuperacaoAggregateArgs> = {
        [P in keyof T & keyof AggregateTokenRecuperacao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTokenRecuperacao[P]>
      : GetScalarType<T[P], AggregateTokenRecuperacao[P]>
  }




  export type TokenRecuperacaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TokenRecuperacaoWhereInput
    orderBy?: TokenRecuperacaoOrderByWithAggregationInput | TokenRecuperacaoOrderByWithAggregationInput[]
    by: TokenRecuperacaoScalarFieldEnum[] | TokenRecuperacaoScalarFieldEnum
    having?: TokenRecuperacaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TokenRecuperacaoCountAggregateInputType | true
    _min?: TokenRecuperacaoMinAggregateInputType
    _max?: TokenRecuperacaoMaxAggregateInputType
  }

  export type TokenRecuperacaoGroupByOutputType = {
    id: string
    usuarioId: string
    token: string
    usado: boolean
    expiraEm: Date
    dataCriacao: Date
    _count: TokenRecuperacaoCountAggregateOutputType | null
    _min: TokenRecuperacaoMinAggregateOutputType | null
    _max: TokenRecuperacaoMaxAggregateOutputType | null
  }

  type GetTokenRecuperacaoGroupByPayload<T extends TokenRecuperacaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TokenRecuperacaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TokenRecuperacaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TokenRecuperacaoGroupByOutputType[P]>
            : GetScalarType<T[P], TokenRecuperacaoGroupByOutputType[P]>
        }
      >
    >


  export type TokenRecuperacaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    token?: boolean
    usado?: boolean
    expiraEm?: boolean
    dataCriacao?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tokenRecuperacao"]>

  export type TokenRecuperacaoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    token?: boolean
    usado?: boolean
    expiraEm?: boolean
    dataCriacao?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tokenRecuperacao"]>

  export type TokenRecuperacaoSelectScalar = {
    id?: boolean
    usuarioId?: boolean
    token?: boolean
    usado?: boolean
    expiraEm?: boolean
    dataCriacao?: boolean
  }

  export type TokenRecuperacaoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type TokenRecuperacaoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $TokenRecuperacaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TokenRecuperacao"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      usuarioId: string
      token: string
      usado: boolean
      expiraEm: Date
      dataCriacao: Date
    }, ExtArgs["result"]["tokenRecuperacao"]>
    composites: {}
  }

  type TokenRecuperacaoGetPayload<S extends boolean | null | undefined | TokenRecuperacaoDefaultArgs> = $Result.GetResult<Prisma.$TokenRecuperacaoPayload, S>

  type TokenRecuperacaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TokenRecuperacaoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TokenRecuperacaoCountAggregateInputType | true
    }

  export interface TokenRecuperacaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TokenRecuperacao'], meta: { name: 'TokenRecuperacao' } }
    /**
     * Find zero or one TokenRecuperacao that matches the filter.
     * @param {TokenRecuperacaoFindUniqueArgs} args - Arguments to find a TokenRecuperacao
     * @example
     * // Get one TokenRecuperacao
     * const tokenRecuperacao = await prisma.tokenRecuperacao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TokenRecuperacaoFindUniqueArgs>(args: SelectSubset<T, TokenRecuperacaoFindUniqueArgs<ExtArgs>>): Prisma__TokenRecuperacaoClient<$Result.GetResult<Prisma.$TokenRecuperacaoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TokenRecuperacao that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TokenRecuperacaoFindUniqueOrThrowArgs} args - Arguments to find a TokenRecuperacao
     * @example
     * // Get one TokenRecuperacao
     * const tokenRecuperacao = await prisma.tokenRecuperacao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TokenRecuperacaoFindUniqueOrThrowArgs>(args: SelectSubset<T, TokenRecuperacaoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TokenRecuperacaoClient<$Result.GetResult<Prisma.$TokenRecuperacaoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TokenRecuperacao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenRecuperacaoFindFirstArgs} args - Arguments to find a TokenRecuperacao
     * @example
     * // Get one TokenRecuperacao
     * const tokenRecuperacao = await prisma.tokenRecuperacao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TokenRecuperacaoFindFirstArgs>(args?: SelectSubset<T, TokenRecuperacaoFindFirstArgs<ExtArgs>>): Prisma__TokenRecuperacaoClient<$Result.GetResult<Prisma.$TokenRecuperacaoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TokenRecuperacao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenRecuperacaoFindFirstOrThrowArgs} args - Arguments to find a TokenRecuperacao
     * @example
     * // Get one TokenRecuperacao
     * const tokenRecuperacao = await prisma.tokenRecuperacao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TokenRecuperacaoFindFirstOrThrowArgs>(args?: SelectSubset<T, TokenRecuperacaoFindFirstOrThrowArgs<ExtArgs>>): Prisma__TokenRecuperacaoClient<$Result.GetResult<Prisma.$TokenRecuperacaoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TokenRecuperacaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenRecuperacaoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TokenRecuperacaos
     * const tokenRecuperacaos = await prisma.tokenRecuperacao.findMany()
     * 
     * // Get first 10 TokenRecuperacaos
     * const tokenRecuperacaos = await prisma.tokenRecuperacao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tokenRecuperacaoWithIdOnly = await prisma.tokenRecuperacao.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TokenRecuperacaoFindManyArgs>(args?: SelectSubset<T, TokenRecuperacaoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenRecuperacaoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TokenRecuperacao.
     * @param {TokenRecuperacaoCreateArgs} args - Arguments to create a TokenRecuperacao.
     * @example
     * // Create one TokenRecuperacao
     * const TokenRecuperacao = await prisma.tokenRecuperacao.create({
     *   data: {
     *     // ... data to create a TokenRecuperacao
     *   }
     * })
     * 
     */
    create<T extends TokenRecuperacaoCreateArgs>(args: SelectSubset<T, TokenRecuperacaoCreateArgs<ExtArgs>>): Prisma__TokenRecuperacaoClient<$Result.GetResult<Prisma.$TokenRecuperacaoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TokenRecuperacaos.
     * @param {TokenRecuperacaoCreateManyArgs} args - Arguments to create many TokenRecuperacaos.
     * @example
     * // Create many TokenRecuperacaos
     * const tokenRecuperacao = await prisma.tokenRecuperacao.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TokenRecuperacaoCreateManyArgs>(args?: SelectSubset<T, TokenRecuperacaoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TokenRecuperacaos and returns the data saved in the database.
     * @param {TokenRecuperacaoCreateManyAndReturnArgs} args - Arguments to create many TokenRecuperacaos.
     * @example
     * // Create many TokenRecuperacaos
     * const tokenRecuperacao = await prisma.tokenRecuperacao.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TokenRecuperacaos and only return the `id`
     * const tokenRecuperacaoWithIdOnly = await prisma.tokenRecuperacao.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TokenRecuperacaoCreateManyAndReturnArgs>(args?: SelectSubset<T, TokenRecuperacaoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenRecuperacaoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TokenRecuperacao.
     * @param {TokenRecuperacaoDeleteArgs} args - Arguments to delete one TokenRecuperacao.
     * @example
     * // Delete one TokenRecuperacao
     * const TokenRecuperacao = await prisma.tokenRecuperacao.delete({
     *   where: {
     *     // ... filter to delete one TokenRecuperacao
     *   }
     * })
     * 
     */
    delete<T extends TokenRecuperacaoDeleteArgs>(args: SelectSubset<T, TokenRecuperacaoDeleteArgs<ExtArgs>>): Prisma__TokenRecuperacaoClient<$Result.GetResult<Prisma.$TokenRecuperacaoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TokenRecuperacao.
     * @param {TokenRecuperacaoUpdateArgs} args - Arguments to update one TokenRecuperacao.
     * @example
     * // Update one TokenRecuperacao
     * const tokenRecuperacao = await prisma.tokenRecuperacao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TokenRecuperacaoUpdateArgs>(args: SelectSubset<T, TokenRecuperacaoUpdateArgs<ExtArgs>>): Prisma__TokenRecuperacaoClient<$Result.GetResult<Prisma.$TokenRecuperacaoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TokenRecuperacaos.
     * @param {TokenRecuperacaoDeleteManyArgs} args - Arguments to filter TokenRecuperacaos to delete.
     * @example
     * // Delete a few TokenRecuperacaos
     * const { count } = await prisma.tokenRecuperacao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TokenRecuperacaoDeleteManyArgs>(args?: SelectSubset<T, TokenRecuperacaoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TokenRecuperacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenRecuperacaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TokenRecuperacaos
     * const tokenRecuperacao = await prisma.tokenRecuperacao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TokenRecuperacaoUpdateManyArgs>(args: SelectSubset<T, TokenRecuperacaoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TokenRecuperacao.
     * @param {TokenRecuperacaoUpsertArgs} args - Arguments to update or create a TokenRecuperacao.
     * @example
     * // Update or create a TokenRecuperacao
     * const tokenRecuperacao = await prisma.tokenRecuperacao.upsert({
     *   create: {
     *     // ... data to create a TokenRecuperacao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TokenRecuperacao we want to update
     *   }
     * })
     */
    upsert<T extends TokenRecuperacaoUpsertArgs>(args: SelectSubset<T, TokenRecuperacaoUpsertArgs<ExtArgs>>): Prisma__TokenRecuperacaoClient<$Result.GetResult<Prisma.$TokenRecuperacaoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TokenRecuperacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenRecuperacaoCountArgs} args - Arguments to filter TokenRecuperacaos to count.
     * @example
     * // Count the number of TokenRecuperacaos
     * const count = await prisma.tokenRecuperacao.count({
     *   where: {
     *     // ... the filter for the TokenRecuperacaos we want to count
     *   }
     * })
    **/
    count<T extends TokenRecuperacaoCountArgs>(
      args?: Subset<T, TokenRecuperacaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TokenRecuperacaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TokenRecuperacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenRecuperacaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TokenRecuperacaoAggregateArgs>(args: Subset<T, TokenRecuperacaoAggregateArgs>): Prisma.PrismaPromise<GetTokenRecuperacaoAggregateType<T>>

    /**
     * Group by TokenRecuperacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenRecuperacaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TokenRecuperacaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TokenRecuperacaoGroupByArgs['orderBy'] }
        : { orderBy?: TokenRecuperacaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TokenRecuperacaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTokenRecuperacaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TokenRecuperacao model
   */
  readonly fields: TokenRecuperacaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TokenRecuperacao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TokenRecuperacaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TokenRecuperacao model
   */ 
  interface TokenRecuperacaoFieldRefs {
    readonly id: FieldRef<"TokenRecuperacao", 'String'>
    readonly usuarioId: FieldRef<"TokenRecuperacao", 'String'>
    readonly token: FieldRef<"TokenRecuperacao", 'String'>
    readonly usado: FieldRef<"TokenRecuperacao", 'Boolean'>
    readonly expiraEm: FieldRef<"TokenRecuperacao", 'DateTime'>
    readonly dataCriacao: FieldRef<"TokenRecuperacao", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TokenRecuperacao findUnique
   */
  export type TokenRecuperacaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenRecuperacao
     */
    select?: TokenRecuperacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenRecuperacaoInclude<ExtArgs> | null
    /**
     * Filter, which TokenRecuperacao to fetch.
     */
    where: TokenRecuperacaoWhereUniqueInput
  }

  /**
   * TokenRecuperacao findUniqueOrThrow
   */
  export type TokenRecuperacaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenRecuperacao
     */
    select?: TokenRecuperacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenRecuperacaoInclude<ExtArgs> | null
    /**
     * Filter, which TokenRecuperacao to fetch.
     */
    where: TokenRecuperacaoWhereUniqueInput
  }

  /**
   * TokenRecuperacao findFirst
   */
  export type TokenRecuperacaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenRecuperacao
     */
    select?: TokenRecuperacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenRecuperacaoInclude<ExtArgs> | null
    /**
     * Filter, which TokenRecuperacao to fetch.
     */
    where?: TokenRecuperacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TokenRecuperacaos to fetch.
     */
    orderBy?: TokenRecuperacaoOrderByWithRelationInput | TokenRecuperacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TokenRecuperacaos.
     */
    cursor?: TokenRecuperacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TokenRecuperacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TokenRecuperacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TokenRecuperacaos.
     */
    distinct?: TokenRecuperacaoScalarFieldEnum | TokenRecuperacaoScalarFieldEnum[]
  }

  /**
   * TokenRecuperacao findFirstOrThrow
   */
  export type TokenRecuperacaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenRecuperacao
     */
    select?: TokenRecuperacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenRecuperacaoInclude<ExtArgs> | null
    /**
     * Filter, which TokenRecuperacao to fetch.
     */
    where?: TokenRecuperacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TokenRecuperacaos to fetch.
     */
    orderBy?: TokenRecuperacaoOrderByWithRelationInput | TokenRecuperacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TokenRecuperacaos.
     */
    cursor?: TokenRecuperacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TokenRecuperacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TokenRecuperacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TokenRecuperacaos.
     */
    distinct?: TokenRecuperacaoScalarFieldEnum | TokenRecuperacaoScalarFieldEnum[]
  }

  /**
   * TokenRecuperacao findMany
   */
  export type TokenRecuperacaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenRecuperacao
     */
    select?: TokenRecuperacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenRecuperacaoInclude<ExtArgs> | null
    /**
     * Filter, which TokenRecuperacaos to fetch.
     */
    where?: TokenRecuperacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TokenRecuperacaos to fetch.
     */
    orderBy?: TokenRecuperacaoOrderByWithRelationInput | TokenRecuperacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TokenRecuperacaos.
     */
    cursor?: TokenRecuperacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TokenRecuperacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TokenRecuperacaos.
     */
    skip?: number
    distinct?: TokenRecuperacaoScalarFieldEnum | TokenRecuperacaoScalarFieldEnum[]
  }

  /**
   * TokenRecuperacao create
   */
  export type TokenRecuperacaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenRecuperacao
     */
    select?: TokenRecuperacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenRecuperacaoInclude<ExtArgs> | null
    /**
     * The data needed to create a TokenRecuperacao.
     */
    data: XOR<TokenRecuperacaoCreateInput, TokenRecuperacaoUncheckedCreateInput>
  }

  /**
   * TokenRecuperacao createMany
   */
  export type TokenRecuperacaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TokenRecuperacaos.
     */
    data: TokenRecuperacaoCreateManyInput | TokenRecuperacaoCreateManyInput[]
  }

  /**
   * TokenRecuperacao createManyAndReturn
   */
  export type TokenRecuperacaoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenRecuperacao
     */
    select?: TokenRecuperacaoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TokenRecuperacaos.
     */
    data: TokenRecuperacaoCreateManyInput | TokenRecuperacaoCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenRecuperacaoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TokenRecuperacao update
   */
  export type TokenRecuperacaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenRecuperacao
     */
    select?: TokenRecuperacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenRecuperacaoInclude<ExtArgs> | null
    /**
     * The data needed to update a TokenRecuperacao.
     */
    data: XOR<TokenRecuperacaoUpdateInput, TokenRecuperacaoUncheckedUpdateInput>
    /**
     * Choose, which TokenRecuperacao to update.
     */
    where: TokenRecuperacaoWhereUniqueInput
  }

  /**
   * TokenRecuperacao updateMany
   */
  export type TokenRecuperacaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TokenRecuperacaos.
     */
    data: XOR<TokenRecuperacaoUpdateManyMutationInput, TokenRecuperacaoUncheckedUpdateManyInput>
    /**
     * Filter which TokenRecuperacaos to update
     */
    where?: TokenRecuperacaoWhereInput
  }

  /**
   * TokenRecuperacao upsert
   */
  export type TokenRecuperacaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenRecuperacao
     */
    select?: TokenRecuperacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenRecuperacaoInclude<ExtArgs> | null
    /**
     * The filter to search for the TokenRecuperacao to update in case it exists.
     */
    where: TokenRecuperacaoWhereUniqueInput
    /**
     * In case the TokenRecuperacao found by the `where` argument doesn't exist, create a new TokenRecuperacao with this data.
     */
    create: XOR<TokenRecuperacaoCreateInput, TokenRecuperacaoUncheckedCreateInput>
    /**
     * In case the TokenRecuperacao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TokenRecuperacaoUpdateInput, TokenRecuperacaoUncheckedUpdateInput>
  }

  /**
   * TokenRecuperacao delete
   */
  export type TokenRecuperacaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenRecuperacao
     */
    select?: TokenRecuperacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenRecuperacaoInclude<ExtArgs> | null
    /**
     * Filter which TokenRecuperacao to delete.
     */
    where: TokenRecuperacaoWhereUniqueInput
  }

  /**
   * TokenRecuperacao deleteMany
   */
  export type TokenRecuperacaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TokenRecuperacaos to delete
     */
    where?: TokenRecuperacaoWhereInput
  }

  /**
   * TokenRecuperacao without action
   */
  export type TokenRecuperacaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenRecuperacao
     */
    select?: TokenRecuperacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenRecuperacaoInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    senha: 'senha',
    tipo: 'tipo',
    sementes: 'sementes',
    nivel: 'nivel',
    pontuacao: 'pontuacao',
    dataCriacao: 'dataCriacao',
    dataAtualizacao: 'dataAtualizacao'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const CarteiraDigitalScalarFieldEnum: {
    id: 'id',
    usuarioId: 'usuarioId',
    saldo: 'saldo',
    saldoPendente: 'saldoPendente',
    totalRecebido: 'totalRecebido',
    totalSacado: 'totalSacado',
    dataCriacao: 'dataCriacao',
    dataAtualizacao: 'dataAtualizacao'
  };

  export type CarteiraDigitalScalarFieldEnum = (typeof CarteiraDigitalScalarFieldEnum)[keyof typeof CarteiraDigitalScalarFieldEnum]


  export const MovimentacaoCarteiraScalarFieldEnum: {
    id: 'id',
    carteiraId: 'carteiraId',
    tipo: 'tipo',
    valor: 'valor',
    saldoAnterior: 'saldoAnterior',
    saldoPosterior: 'saldoPosterior',
    descricao: 'descricao',
    referencia: 'referencia',
    status: 'status',
    data: 'data'
  };

  export type MovimentacaoCarteiraScalarFieldEnum = (typeof MovimentacaoCarteiraScalarFieldEnum)[keyof typeof MovimentacaoCarteiraScalarFieldEnum]


  export const DadosBancariosScalarFieldEnum: {
    id: 'id',
    usuarioId: 'usuarioId',
    banco: 'banco',
    agencia: 'agencia',
    conta: 'conta',
    tipoConta: 'tipoConta',
    cpfCnpj: 'cpfCnpj',
    nomeTitular: 'nomeTitular',
    validado: 'validado',
    dataValidacao: 'dataValidacao',
    dataCriacao: 'dataCriacao',
    dataAtualizacao: 'dataAtualizacao'
  };

  export type DadosBancariosScalarFieldEnum = (typeof DadosBancariosScalarFieldEnum)[keyof typeof DadosBancariosScalarFieldEnum]


  export const SaqueScalarFieldEnum: {
    id: 'id',
    usuarioId: 'usuarioId',
    valor: 'valor',
    taxa: 'taxa',
    valorLiquido: 'valorLiquido',
    dadosBancarios: 'dadosBancarios',
    status: 'status',
    motivoRejeicao: 'motivoRejeicao',
    dataSolicitacao: 'dataSolicitacao',
    dataProcessamento: 'dataProcessamento',
    dataConclusao: 'dataConclusao',
    comprovante: 'comprovante'
  };

  export type SaqueScalarFieldEnum = (typeof SaqueScalarFieldEnum)[keyof typeof SaqueScalarFieldEnum]


  export const PagamentoScalarFieldEnum: {
    id: 'id',
    usuarioId: 'usuarioId',
    tipo: 'tipo',
    valor: 'valor',
    sementesGeradas: 'sementesGeradas',
    gateway: 'gateway',
    gatewayId: 'gatewayId',
    status: 'status',
    dadosPagamento: 'dadosPagamento',
    dataPagamento: 'dataPagamento',
    dataProcessamento: 'dataProcessamento'
  };

  export type PagamentoScalarFieldEnum = (typeof PagamentoScalarFieldEnum)[keyof typeof PagamentoScalarFieldEnum]


  export const CriadorScalarFieldEnum: {
    id: 'id',
    usuarioId: 'usuarioId',
    nome: 'nome',
    bio: 'bio',
    categoria: 'categoria',
    redesSociais: 'redesSociais',
    portfolio: 'portfolio',
    nivel: 'nivel',
    sementes: 'sementes',
    apoiadores: 'apoiadores',
    doacoes: 'doacoes',
    dataCriacao: 'dataCriacao'
  };

  export type CriadorScalarFieldEnum = (typeof CriadorScalarFieldEnum)[keyof typeof CriadorScalarFieldEnum]


  export const CandidaturaCriadorScalarFieldEnum: {
    id: 'id',
    usuarioId: 'usuarioId',
    nome: 'nome',
    email: 'email',
    bio: 'bio',
    categoria: 'categoria',
    redesSociais: 'redesSociais',
    portfolio: 'portfolio',
    experiencia: 'experiencia',
    motivacao: 'motivacao',
    metas: 'metas',
    disponibilidade: 'disponibilidade',
    status: 'status',
    dataCandidatura: 'dataCandidatura',
    dataRevisao: 'dataRevisao',
    observacoes: 'observacoes'
  };

  export type CandidaturaCriadorScalarFieldEnum = (typeof CandidaturaCriadorScalarFieldEnum)[keyof typeof CandidaturaCriadorScalarFieldEnum]


  export const LogAuditoriaScalarFieldEnum: {
    id: 'id',
    usuarioId: 'usuarioId',
    acao: 'acao',
    detalhes: 'detalhes',
    ip: 'ip',
    userAgent: 'userAgent',
    timestamp: 'timestamp',
    nivel: 'nivel'
  };

  export type LogAuditoriaScalarFieldEnum = (typeof LogAuditoriaScalarFieldEnum)[keyof typeof LogAuditoriaScalarFieldEnum]


  export const ParceiroScalarFieldEnum: {
    id: 'id',
    usuarioId: 'usuarioId',
    nomeCidade: 'nomeCidade',
    comissaoMensal: 'comissaoMensal',
    totalVendas: 'totalVendas',
    codigosGerados: 'codigosGerados'
  };

  export type ParceiroScalarFieldEnum = (typeof ParceiroScalarFieldEnum)[keyof typeof ParceiroScalarFieldEnum]


  export const SementeScalarFieldEnum: {
    id: 'id',
    usuarioId: 'usuarioId',
    quantidade: 'quantidade',
    tipo: 'tipo',
    data: 'data',
    descricao: 'descricao'
  };

  export type SementeScalarFieldEnum = (typeof SementeScalarFieldEnum)[keyof typeof SementeScalarFieldEnum]


  export const DoacaoScalarFieldEnum: {
    id: 'id',
    doadorId: 'doadorId',
    criadorId: 'criadorId',
    quantidade: 'quantidade',
    data: 'data',
    mensagem: 'mensagem'
  };

  export type DoacaoScalarFieldEnum = (typeof DoacaoScalarFieldEnum)[keyof typeof DoacaoScalarFieldEnum]


  export const TransacaoScalarFieldEnum: {
    id: 'id',
    usuarioId: 'usuarioId',
    tipo: 'tipo',
    valor: 'valor',
    codigoParceiro: 'codigoParceiro',
    status: 'status',
    data: 'data'
  };

  export type TransacaoScalarFieldEnum = (typeof TransacaoScalarFieldEnum)[keyof typeof TransacaoScalarFieldEnum]


  export const CodigoCashbackScalarFieldEnum: {
    id: 'id',
    parceiroId: 'parceiroId',
    codigo: 'codigo',
    valor: 'valor',
    usado: 'usado',
    dataGeracao: 'dataGeracao',
    dataUso: 'dataUso'
  };

  export type CodigoCashbackScalarFieldEnum = (typeof CodigoCashbackScalarFieldEnum)[keyof typeof CodigoCashbackScalarFieldEnum]


  export const NotificacaoScalarFieldEnum: {
    id: 'id',
    usuarioId: 'usuarioId',
    tipo: 'tipo',
    titulo: 'titulo',
    mensagem: 'mensagem',
    lida: 'lida',
    data: 'data'
  };

  export type NotificacaoScalarFieldEnum = (typeof NotificacaoScalarFieldEnum)[keyof typeof NotificacaoScalarFieldEnum]


  export const TokenRecuperacaoScalarFieldEnum: {
    id: 'id',
    usuarioId: 'usuarioId',
    token: 'token',
    usado: 'usado',
    expiraEm: 'expiraEm',
    dataCriacao: 'dataCriacao'
  };

  export type TokenRecuperacaoScalarFieldEnum = (typeof TokenRecuperacaoScalarFieldEnum)[keyof typeof TokenRecuperacaoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    id?: StringFilter<"Usuario"> | string
    nome?: StringFilter<"Usuario"> | string
    email?: StringFilter<"Usuario"> | string
    senha?: StringFilter<"Usuario"> | string
    tipo?: StringFilter<"Usuario"> | string
    sementes?: IntFilter<"Usuario"> | number
    nivel?: StringFilter<"Usuario"> | string
    pontuacao?: IntFilter<"Usuario"> | number
    dataCriacao?: DateTimeFilter<"Usuario"> | Date | string
    dataAtualizacao?: DateTimeFilter<"Usuario"> | Date | string
    criador?: XOR<CriadorNullableRelationFilter, CriadorWhereInput> | null
    parceiro?: XOR<ParceiroNullableRelationFilter, ParceiroWhereInput> | null
    sementesHistorico?: SementeListRelationFilter
    doacoesFeitas?: DoacaoListRelationFilter
    transacoes?: TransacaoListRelationFilter
    notificacoes?: NotificacaoListRelationFilter
    candidaturas?: CandidaturaCriadorListRelationFilter
    logsAuditoria?: LogAuditoriaListRelationFilter
    carteira?: XOR<CarteiraDigitalNullableRelationFilter, CarteiraDigitalWhereInput> | null
    dadosBancarios?: XOR<DadosBancariosNullableRelationFilter, DadosBancariosWhereInput> | null
    saques?: SaqueListRelationFilter
    pagamentos?: PagamentoListRelationFilter
    tokensRecuperacao?: TokenRecuperacaoListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    tipo?: SortOrder
    sementes?: SortOrder
    nivel?: SortOrder
    pontuacao?: SortOrder
    dataCriacao?: SortOrder
    dataAtualizacao?: SortOrder
    criador?: CriadorOrderByWithRelationInput
    parceiro?: ParceiroOrderByWithRelationInput
    sementesHistorico?: SementeOrderByRelationAggregateInput
    doacoesFeitas?: DoacaoOrderByRelationAggregateInput
    transacoes?: TransacaoOrderByRelationAggregateInput
    notificacoes?: NotificacaoOrderByRelationAggregateInput
    candidaturas?: CandidaturaCriadorOrderByRelationAggregateInput
    logsAuditoria?: LogAuditoriaOrderByRelationAggregateInput
    carteira?: CarteiraDigitalOrderByWithRelationInput
    dadosBancarios?: DadosBancariosOrderByWithRelationInput
    saques?: SaqueOrderByRelationAggregateInput
    pagamentos?: PagamentoOrderByRelationAggregateInput
    tokensRecuperacao?: TokenRecuperacaoOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    nome?: StringFilter<"Usuario"> | string
    senha?: StringFilter<"Usuario"> | string
    tipo?: StringFilter<"Usuario"> | string
    sementes?: IntFilter<"Usuario"> | number
    nivel?: StringFilter<"Usuario"> | string
    pontuacao?: IntFilter<"Usuario"> | number
    dataCriacao?: DateTimeFilter<"Usuario"> | Date | string
    dataAtualizacao?: DateTimeFilter<"Usuario"> | Date | string
    criador?: XOR<CriadorNullableRelationFilter, CriadorWhereInput> | null
    parceiro?: XOR<ParceiroNullableRelationFilter, ParceiroWhereInput> | null
    sementesHistorico?: SementeListRelationFilter
    doacoesFeitas?: DoacaoListRelationFilter
    transacoes?: TransacaoListRelationFilter
    notificacoes?: NotificacaoListRelationFilter
    candidaturas?: CandidaturaCriadorListRelationFilter
    logsAuditoria?: LogAuditoriaListRelationFilter
    carteira?: XOR<CarteiraDigitalNullableRelationFilter, CarteiraDigitalWhereInput> | null
    dadosBancarios?: XOR<DadosBancariosNullableRelationFilter, DadosBancariosWhereInput> | null
    saques?: SaqueListRelationFilter
    pagamentos?: PagamentoListRelationFilter
    tokensRecuperacao?: TokenRecuperacaoListRelationFilter
  }, "id" | "email">

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    tipo?: SortOrder
    sementes?: SortOrder
    nivel?: SortOrder
    pontuacao?: SortOrder
    dataCriacao?: SortOrder
    dataAtualizacao?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Usuario"> | string
    nome?: StringWithAggregatesFilter<"Usuario"> | string
    email?: StringWithAggregatesFilter<"Usuario"> | string
    senha?: StringWithAggregatesFilter<"Usuario"> | string
    tipo?: StringWithAggregatesFilter<"Usuario"> | string
    sementes?: IntWithAggregatesFilter<"Usuario"> | number
    nivel?: StringWithAggregatesFilter<"Usuario"> | string
    pontuacao?: IntWithAggregatesFilter<"Usuario"> | number
    dataCriacao?: DateTimeWithAggregatesFilter<"Usuario"> | Date | string
    dataAtualizacao?: DateTimeWithAggregatesFilter<"Usuario"> | Date | string
  }

  export type CarteiraDigitalWhereInput = {
    AND?: CarteiraDigitalWhereInput | CarteiraDigitalWhereInput[]
    OR?: CarteiraDigitalWhereInput[]
    NOT?: CarteiraDigitalWhereInput | CarteiraDigitalWhereInput[]
    id?: StringFilter<"CarteiraDigital"> | string
    usuarioId?: StringFilter<"CarteiraDigital"> | string
    saldo?: FloatFilter<"CarteiraDigital"> | number
    saldoPendente?: FloatFilter<"CarteiraDigital"> | number
    totalRecebido?: FloatFilter<"CarteiraDigital"> | number
    totalSacado?: FloatFilter<"CarteiraDigital"> | number
    dataCriacao?: DateTimeFilter<"CarteiraDigital"> | Date | string
    dataAtualizacao?: DateTimeFilter<"CarteiraDigital"> | Date | string
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    movimentacoes?: MovimentacaoCarteiraListRelationFilter
  }

  export type CarteiraDigitalOrderByWithRelationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    saldo?: SortOrder
    saldoPendente?: SortOrder
    totalRecebido?: SortOrder
    totalSacado?: SortOrder
    dataCriacao?: SortOrder
    dataAtualizacao?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
    movimentacoes?: MovimentacaoCarteiraOrderByRelationAggregateInput
  }

  export type CarteiraDigitalWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    usuarioId?: string
    AND?: CarteiraDigitalWhereInput | CarteiraDigitalWhereInput[]
    OR?: CarteiraDigitalWhereInput[]
    NOT?: CarteiraDigitalWhereInput | CarteiraDigitalWhereInput[]
    saldo?: FloatFilter<"CarteiraDigital"> | number
    saldoPendente?: FloatFilter<"CarteiraDigital"> | number
    totalRecebido?: FloatFilter<"CarteiraDigital"> | number
    totalSacado?: FloatFilter<"CarteiraDigital"> | number
    dataCriacao?: DateTimeFilter<"CarteiraDigital"> | Date | string
    dataAtualizacao?: DateTimeFilter<"CarteiraDigital"> | Date | string
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    movimentacoes?: MovimentacaoCarteiraListRelationFilter
  }, "id" | "usuarioId">

  export type CarteiraDigitalOrderByWithAggregationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    saldo?: SortOrder
    saldoPendente?: SortOrder
    totalRecebido?: SortOrder
    totalSacado?: SortOrder
    dataCriacao?: SortOrder
    dataAtualizacao?: SortOrder
    _count?: CarteiraDigitalCountOrderByAggregateInput
    _avg?: CarteiraDigitalAvgOrderByAggregateInput
    _max?: CarteiraDigitalMaxOrderByAggregateInput
    _min?: CarteiraDigitalMinOrderByAggregateInput
    _sum?: CarteiraDigitalSumOrderByAggregateInput
  }

  export type CarteiraDigitalScalarWhereWithAggregatesInput = {
    AND?: CarteiraDigitalScalarWhereWithAggregatesInput | CarteiraDigitalScalarWhereWithAggregatesInput[]
    OR?: CarteiraDigitalScalarWhereWithAggregatesInput[]
    NOT?: CarteiraDigitalScalarWhereWithAggregatesInput | CarteiraDigitalScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CarteiraDigital"> | string
    usuarioId?: StringWithAggregatesFilter<"CarteiraDigital"> | string
    saldo?: FloatWithAggregatesFilter<"CarteiraDigital"> | number
    saldoPendente?: FloatWithAggregatesFilter<"CarteiraDigital"> | number
    totalRecebido?: FloatWithAggregatesFilter<"CarteiraDigital"> | number
    totalSacado?: FloatWithAggregatesFilter<"CarteiraDigital"> | number
    dataCriacao?: DateTimeWithAggregatesFilter<"CarteiraDigital"> | Date | string
    dataAtualizacao?: DateTimeWithAggregatesFilter<"CarteiraDigital"> | Date | string
  }

  export type MovimentacaoCarteiraWhereInput = {
    AND?: MovimentacaoCarteiraWhereInput | MovimentacaoCarteiraWhereInput[]
    OR?: MovimentacaoCarteiraWhereInput[]
    NOT?: MovimentacaoCarteiraWhereInput | MovimentacaoCarteiraWhereInput[]
    id?: StringFilter<"MovimentacaoCarteira"> | string
    carteiraId?: StringFilter<"MovimentacaoCarteira"> | string
    tipo?: StringFilter<"MovimentacaoCarteira"> | string
    valor?: FloatFilter<"MovimentacaoCarteira"> | number
    saldoAnterior?: FloatFilter<"MovimentacaoCarteira"> | number
    saldoPosterior?: FloatFilter<"MovimentacaoCarteira"> | number
    descricao?: StringFilter<"MovimentacaoCarteira"> | string
    referencia?: StringNullableFilter<"MovimentacaoCarteira"> | string | null
    status?: StringFilter<"MovimentacaoCarteira"> | string
    data?: DateTimeFilter<"MovimentacaoCarteira"> | Date | string
    carteira?: XOR<CarteiraDigitalRelationFilter, CarteiraDigitalWhereInput>
  }

  export type MovimentacaoCarteiraOrderByWithRelationInput = {
    id?: SortOrder
    carteiraId?: SortOrder
    tipo?: SortOrder
    valor?: SortOrder
    saldoAnterior?: SortOrder
    saldoPosterior?: SortOrder
    descricao?: SortOrder
    referencia?: SortOrderInput | SortOrder
    status?: SortOrder
    data?: SortOrder
    carteira?: CarteiraDigitalOrderByWithRelationInput
  }

  export type MovimentacaoCarteiraWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MovimentacaoCarteiraWhereInput | MovimentacaoCarteiraWhereInput[]
    OR?: MovimentacaoCarteiraWhereInput[]
    NOT?: MovimentacaoCarteiraWhereInput | MovimentacaoCarteiraWhereInput[]
    carteiraId?: StringFilter<"MovimentacaoCarteira"> | string
    tipo?: StringFilter<"MovimentacaoCarteira"> | string
    valor?: FloatFilter<"MovimentacaoCarteira"> | number
    saldoAnterior?: FloatFilter<"MovimentacaoCarteira"> | number
    saldoPosterior?: FloatFilter<"MovimentacaoCarteira"> | number
    descricao?: StringFilter<"MovimentacaoCarteira"> | string
    referencia?: StringNullableFilter<"MovimentacaoCarteira"> | string | null
    status?: StringFilter<"MovimentacaoCarteira"> | string
    data?: DateTimeFilter<"MovimentacaoCarteira"> | Date | string
    carteira?: XOR<CarteiraDigitalRelationFilter, CarteiraDigitalWhereInput>
  }, "id">

  export type MovimentacaoCarteiraOrderByWithAggregationInput = {
    id?: SortOrder
    carteiraId?: SortOrder
    tipo?: SortOrder
    valor?: SortOrder
    saldoAnterior?: SortOrder
    saldoPosterior?: SortOrder
    descricao?: SortOrder
    referencia?: SortOrderInput | SortOrder
    status?: SortOrder
    data?: SortOrder
    _count?: MovimentacaoCarteiraCountOrderByAggregateInput
    _avg?: MovimentacaoCarteiraAvgOrderByAggregateInput
    _max?: MovimentacaoCarteiraMaxOrderByAggregateInput
    _min?: MovimentacaoCarteiraMinOrderByAggregateInput
    _sum?: MovimentacaoCarteiraSumOrderByAggregateInput
  }

  export type MovimentacaoCarteiraScalarWhereWithAggregatesInput = {
    AND?: MovimentacaoCarteiraScalarWhereWithAggregatesInput | MovimentacaoCarteiraScalarWhereWithAggregatesInput[]
    OR?: MovimentacaoCarteiraScalarWhereWithAggregatesInput[]
    NOT?: MovimentacaoCarteiraScalarWhereWithAggregatesInput | MovimentacaoCarteiraScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MovimentacaoCarteira"> | string
    carteiraId?: StringWithAggregatesFilter<"MovimentacaoCarteira"> | string
    tipo?: StringWithAggregatesFilter<"MovimentacaoCarteira"> | string
    valor?: FloatWithAggregatesFilter<"MovimentacaoCarteira"> | number
    saldoAnterior?: FloatWithAggregatesFilter<"MovimentacaoCarteira"> | number
    saldoPosterior?: FloatWithAggregatesFilter<"MovimentacaoCarteira"> | number
    descricao?: StringWithAggregatesFilter<"MovimentacaoCarteira"> | string
    referencia?: StringNullableWithAggregatesFilter<"MovimentacaoCarteira"> | string | null
    status?: StringWithAggregatesFilter<"MovimentacaoCarteira"> | string
    data?: DateTimeWithAggregatesFilter<"MovimentacaoCarteira"> | Date | string
  }

  export type DadosBancariosWhereInput = {
    AND?: DadosBancariosWhereInput | DadosBancariosWhereInput[]
    OR?: DadosBancariosWhereInput[]
    NOT?: DadosBancariosWhereInput | DadosBancariosWhereInput[]
    id?: StringFilter<"DadosBancarios"> | string
    usuarioId?: StringFilter<"DadosBancarios"> | string
    banco?: StringFilter<"DadosBancarios"> | string
    agencia?: StringFilter<"DadosBancarios"> | string
    conta?: StringFilter<"DadosBancarios"> | string
    tipoConta?: StringFilter<"DadosBancarios"> | string
    cpfCnpj?: StringFilter<"DadosBancarios"> | string
    nomeTitular?: StringFilter<"DadosBancarios"> | string
    validado?: BoolFilter<"DadosBancarios"> | boolean
    dataValidacao?: DateTimeNullableFilter<"DadosBancarios"> | Date | string | null
    dataCriacao?: DateTimeFilter<"DadosBancarios"> | Date | string
    dataAtualizacao?: DateTimeFilter<"DadosBancarios"> | Date | string
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }

  export type DadosBancariosOrderByWithRelationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    banco?: SortOrder
    agencia?: SortOrder
    conta?: SortOrder
    tipoConta?: SortOrder
    cpfCnpj?: SortOrder
    nomeTitular?: SortOrder
    validado?: SortOrder
    dataValidacao?: SortOrderInput | SortOrder
    dataCriacao?: SortOrder
    dataAtualizacao?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type DadosBancariosWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    usuarioId?: string
    AND?: DadosBancariosWhereInput | DadosBancariosWhereInput[]
    OR?: DadosBancariosWhereInput[]
    NOT?: DadosBancariosWhereInput | DadosBancariosWhereInput[]
    banco?: StringFilter<"DadosBancarios"> | string
    agencia?: StringFilter<"DadosBancarios"> | string
    conta?: StringFilter<"DadosBancarios"> | string
    tipoConta?: StringFilter<"DadosBancarios"> | string
    cpfCnpj?: StringFilter<"DadosBancarios"> | string
    nomeTitular?: StringFilter<"DadosBancarios"> | string
    validado?: BoolFilter<"DadosBancarios"> | boolean
    dataValidacao?: DateTimeNullableFilter<"DadosBancarios"> | Date | string | null
    dataCriacao?: DateTimeFilter<"DadosBancarios"> | Date | string
    dataAtualizacao?: DateTimeFilter<"DadosBancarios"> | Date | string
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }, "id" | "usuarioId">

  export type DadosBancariosOrderByWithAggregationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    banco?: SortOrder
    agencia?: SortOrder
    conta?: SortOrder
    tipoConta?: SortOrder
    cpfCnpj?: SortOrder
    nomeTitular?: SortOrder
    validado?: SortOrder
    dataValidacao?: SortOrderInput | SortOrder
    dataCriacao?: SortOrder
    dataAtualizacao?: SortOrder
    _count?: DadosBancariosCountOrderByAggregateInput
    _max?: DadosBancariosMaxOrderByAggregateInput
    _min?: DadosBancariosMinOrderByAggregateInput
  }

  export type DadosBancariosScalarWhereWithAggregatesInput = {
    AND?: DadosBancariosScalarWhereWithAggregatesInput | DadosBancariosScalarWhereWithAggregatesInput[]
    OR?: DadosBancariosScalarWhereWithAggregatesInput[]
    NOT?: DadosBancariosScalarWhereWithAggregatesInput | DadosBancariosScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DadosBancarios"> | string
    usuarioId?: StringWithAggregatesFilter<"DadosBancarios"> | string
    banco?: StringWithAggregatesFilter<"DadosBancarios"> | string
    agencia?: StringWithAggregatesFilter<"DadosBancarios"> | string
    conta?: StringWithAggregatesFilter<"DadosBancarios"> | string
    tipoConta?: StringWithAggregatesFilter<"DadosBancarios"> | string
    cpfCnpj?: StringWithAggregatesFilter<"DadosBancarios"> | string
    nomeTitular?: StringWithAggregatesFilter<"DadosBancarios"> | string
    validado?: BoolWithAggregatesFilter<"DadosBancarios"> | boolean
    dataValidacao?: DateTimeNullableWithAggregatesFilter<"DadosBancarios"> | Date | string | null
    dataCriacao?: DateTimeWithAggregatesFilter<"DadosBancarios"> | Date | string
    dataAtualizacao?: DateTimeWithAggregatesFilter<"DadosBancarios"> | Date | string
  }

  export type SaqueWhereInput = {
    AND?: SaqueWhereInput | SaqueWhereInput[]
    OR?: SaqueWhereInput[]
    NOT?: SaqueWhereInput | SaqueWhereInput[]
    id?: StringFilter<"Saque"> | string
    usuarioId?: StringFilter<"Saque"> | string
    valor?: FloatFilter<"Saque"> | number
    taxa?: FloatFilter<"Saque"> | number
    valorLiquido?: FloatFilter<"Saque"> | number
    dadosBancarios?: StringFilter<"Saque"> | string
    status?: StringFilter<"Saque"> | string
    motivoRejeicao?: StringNullableFilter<"Saque"> | string | null
    dataSolicitacao?: DateTimeFilter<"Saque"> | Date | string
    dataProcessamento?: DateTimeNullableFilter<"Saque"> | Date | string | null
    dataConclusao?: DateTimeNullableFilter<"Saque"> | Date | string | null
    comprovante?: StringNullableFilter<"Saque"> | string | null
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }

  export type SaqueOrderByWithRelationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    valor?: SortOrder
    taxa?: SortOrder
    valorLiquido?: SortOrder
    dadosBancarios?: SortOrder
    status?: SortOrder
    motivoRejeicao?: SortOrderInput | SortOrder
    dataSolicitacao?: SortOrder
    dataProcessamento?: SortOrderInput | SortOrder
    dataConclusao?: SortOrderInput | SortOrder
    comprovante?: SortOrderInput | SortOrder
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type SaqueWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SaqueWhereInput | SaqueWhereInput[]
    OR?: SaqueWhereInput[]
    NOT?: SaqueWhereInput | SaqueWhereInput[]
    usuarioId?: StringFilter<"Saque"> | string
    valor?: FloatFilter<"Saque"> | number
    taxa?: FloatFilter<"Saque"> | number
    valorLiquido?: FloatFilter<"Saque"> | number
    dadosBancarios?: StringFilter<"Saque"> | string
    status?: StringFilter<"Saque"> | string
    motivoRejeicao?: StringNullableFilter<"Saque"> | string | null
    dataSolicitacao?: DateTimeFilter<"Saque"> | Date | string
    dataProcessamento?: DateTimeNullableFilter<"Saque"> | Date | string | null
    dataConclusao?: DateTimeNullableFilter<"Saque"> | Date | string | null
    comprovante?: StringNullableFilter<"Saque"> | string | null
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }, "id">

  export type SaqueOrderByWithAggregationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    valor?: SortOrder
    taxa?: SortOrder
    valorLiquido?: SortOrder
    dadosBancarios?: SortOrder
    status?: SortOrder
    motivoRejeicao?: SortOrderInput | SortOrder
    dataSolicitacao?: SortOrder
    dataProcessamento?: SortOrderInput | SortOrder
    dataConclusao?: SortOrderInput | SortOrder
    comprovante?: SortOrderInput | SortOrder
    _count?: SaqueCountOrderByAggregateInput
    _avg?: SaqueAvgOrderByAggregateInput
    _max?: SaqueMaxOrderByAggregateInput
    _min?: SaqueMinOrderByAggregateInput
    _sum?: SaqueSumOrderByAggregateInput
  }

  export type SaqueScalarWhereWithAggregatesInput = {
    AND?: SaqueScalarWhereWithAggregatesInput | SaqueScalarWhereWithAggregatesInput[]
    OR?: SaqueScalarWhereWithAggregatesInput[]
    NOT?: SaqueScalarWhereWithAggregatesInput | SaqueScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Saque"> | string
    usuarioId?: StringWithAggregatesFilter<"Saque"> | string
    valor?: FloatWithAggregatesFilter<"Saque"> | number
    taxa?: FloatWithAggregatesFilter<"Saque"> | number
    valorLiquido?: FloatWithAggregatesFilter<"Saque"> | number
    dadosBancarios?: StringWithAggregatesFilter<"Saque"> | string
    status?: StringWithAggregatesFilter<"Saque"> | string
    motivoRejeicao?: StringNullableWithAggregatesFilter<"Saque"> | string | null
    dataSolicitacao?: DateTimeWithAggregatesFilter<"Saque"> | Date | string
    dataProcessamento?: DateTimeNullableWithAggregatesFilter<"Saque"> | Date | string | null
    dataConclusao?: DateTimeNullableWithAggregatesFilter<"Saque"> | Date | string | null
    comprovante?: StringNullableWithAggregatesFilter<"Saque"> | string | null
  }

  export type PagamentoWhereInput = {
    AND?: PagamentoWhereInput | PagamentoWhereInput[]
    OR?: PagamentoWhereInput[]
    NOT?: PagamentoWhereInput | PagamentoWhereInput[]
    id?: StringFilter<"Pagamento"> | string
    usuarioId?: StringFilter<"Pagamento"> | string
    tipo?: StringFilter<"Pagamento"> | string
    valor?: FloatFilter<"Pagamento"> | number
    sementesGeradas?: IntFilter<"Pagamento"> | number
    gateway?: StringFilter<"Pagamento"> | string
    gatewayId?: StringNullableFilter<"Pagamento"> | string | null
    status?: StringFilter<"Pagamento"> | string
    dadosPagamento?: StringFilter<"Pagamento"> | string
    dataPagamento?: DateTimeFilter<"Pagamento"> | Date | string
    dataProcessamento?: DateTimeNullableFilter<"Pagamento"> | Date | string | null
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }

  export type PagamentoOrderByWithRelationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipo?: SortOrder
    valor?: SortOrder
    sementesGeradas?: SortOrder
    gateway?: SortOrder
    gatewayId?: SortOrderInput | SortOrder
    status?: SortOrder
    dadosPagamento?: SortOrder
    dataPagamento?: SortOrder
    dataProcessamento?: SortOrderInput | SortOrder
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type PagamentoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PagamentoWhereInput | PagamentoWhereInput[]
    OR?: PagamentoWhereInput[]
    NOT?: PagamentoWhereInput | PagamentoWhereInput[]
    usuarioId?: StringFilter<"Pagamento"> | string
    tipo?: StringFilter<"Pagamento"> | string
    valor?: FloatFilter<"Pagamento"> | number
    sementesGeradas?: IntFilter<"Pagamento"> | number
    gateway?: StringFilter<"Pagamento"> | string
    gatewayId?: StringNullableFilter<"Pagamento"> | string | null
    status?: StringFilter<"Pagamento"> | string
    dadosPagamento?: StringFilter<"Pagamento"> | string
    dataPagamento?: DateTimeFilter<"Pagamento"> | Date | string
    dataProcessamento?: DateTimeNullableFilter<"Pagamento"> | Date | string | null
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }, "id">

  export type PagamentoOrderByWithAggregationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipo?: SortOrder
    valor?: SortOrder
    sementesGeradas?: SortOrder
    gateway?: SortOrder
    gatewayId?: SortOrderInput | SortOrder
    status?: SortOrder
    dadosPagamento?: SortOrder
    dataPagamento?: SortOrder
    dataProcessamento?: SortOrderInput | SortOrder
    _count?: PagamentoCountOrderByAggregateInput
    _avg?: PagamentoAvgOrderByAggregateInput
    _max?: PagamentoMaxOrderByAggregateInput
    _min?: PagamentoMinOrderByAggregateInput
    _sum?: PagamentoSumOrderByAggregateInput
  }

  export type PagamentoScalarWhereWithAggregatesInput = {
    AND?: PagamentoScalarWhereWithAggregatesInput | PagamentoScalarWhereWithAggregatesInput[]
    OR?: PagamentoScalarWhereWithAggregatesInput[]
    NOT?: PagamentoScalarWhereWithAggregatesInput | PagamentoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Pagamento"> | string
    usuarioId?: StringWithAggregatesFilter<"Pagamento"> | string
    tipo?: StringWithAggregatesFilter<"Pagamento"> | string
    valor?: FloatWithAggregatesFilter<"Pagamento"> | number
    sementesGeradas?: IntWithAggregatesFilter<"Pagamento"> | number
    gateway?: StringWithAggregatesFilter<"Pagamento"> | string
    gatewayId?: StringNullableWithAggregatesFilter<"Pagamento"> | string | null
    status?: StringWithAggregatesFilter<"Pagamento"> | string
    dadosPagamento?: StringWithAggregatesFilter<"Pagamento"> | string
    dataPagamento?: DateTimeWithAggregatesFilter<"Pagamento"> | Date | string
    dataProcessamento?: DateTimeNullableWithAggregatesFilter<"Pagamento"> | Date | string | null
  }

  export type CriadorWhereInput = {
    AND?: CriadorWhereInput | CriadorWhereInput[]
    OR?: CriadorWhereInput[]
    NOT?: CriadorWhereInput | CriadorWhereInput[]
    id?: StringFilter<"Criador"> | string
    usuarioId?: StringFilter<"Criador"> | string
    nome?: StringFilter<"Criador"> | string
    bio?: StringFilter<"Criador"> | string
    categoria?: StringFilter<"Criador"> | string
    redesSociais?: StringFilter<"Criador"> | string
    portfolio?: StringFilter<"Criador"> | string
    nivel?: StringFilter<"Criador"> | string
    sementes?: IntFilter<"Criador"> | number
    apoiadores?: IntFilter<"Criador"> | number
    doacoes?: IntFilter<"Criador"> | number
    dataCriacao?: DateTimeFilter<"Criador"> | Date | string
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    doacoesRecebidas?: DoacaoListRelationFilter
  }

  export type CriadorOrderByWithRelationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    nome?: SortOrder
    bio?: SortOrder
    categoria?: SortOrder
    redesSociais?: SortOrder
    portfolio?: SortOrder
    nivel?: SortOrder
    sementes?: SortOrder
    apoiadores?: SortOrder
    doacoes?: SortOrder
    dataCriacao?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
    doacoesRecebidas?: DoacaoOrderByRelationAggregateInput
  }

  export type CriadorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    usuarioId?: string
    AND?: CriadorWhereInput | CriadorWhereInput[]
    OR?: CriadorWhereInput[]
    NOT?: CriadorWhereInput | CriadorWhereInput[]
    nome?: StringFilter<"Criador"> | string
    bio?: StringFilter<"Criador"> | string
    categoria?: StringFilter<"Criador"> | string
    redesSociais?: StringFilter<"Criador"> | string
    portfolio?: StringFilter<"Criador"> | string
    nivel?: StringFilter<"Criador"> | string
    sementes?: IntFilter<"Criador"> | number
    apoiadores?: IntFilter<"Criador"> | number
    doacoes?: IntFilter<"Criador"> | number
    dataCriacao?: DateTimeFilter<"Criador"> | Date | string
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    doacoesRecebidas?: DoacaoListRelationFilter
  }, "id" | "usuarioId">

  export type CriadorOrderByWithAggregationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    nome?: SortOrder
    bio?: SortOrder
    categoria?: SortOrder
    redesSociais?: SortOrder
    portfolio?: SortOrder
    nivel?: SortOrder
    sementes?: SortOrder
    apoiadores?: SortOrder
    doacoes?: SortOrder
    dataCriacao?: SortOrder
    _count?: CriadorCountOrderByAggregateInput
    _avg?: CriadorAvgOrderByAggregateInput
    _max?: CriadorMaxOrderByAggregateInput
    _min?: CriadorMinOrderByAggregateInput
    _sum?: CriadorSumOrderByAggregateInput
  }

  export type CriadorScalarWhereWithAggregatesInput = {
    AND?: CriadorScalarWhereWithAggregatesInput | CriadorScalarWhereWithAggregatesInput[]
    OR?: CriadorScalarWhereWithAggregatesInput[]
    NOT?: CriadorScalarWhereWithAggregatesInput | CriadorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Criador"> | string
    usuarioId?: StringWithAggregatesFilter<"Criador"> | string
    nome?: StringWithAggregatesFilter<"Criador"> | string
    bio?: StringWithAggregatesFilter<"Criador"> | string
    categoria?: StringWithAggregatesFilter<"Criador"> | string
    redesSociais?: StringWithAggregatesFilter<"Criador"> | string
    portfolio?: StringWithAggregatesFilter<"Criador"> | string
    nivel?: StringWithAggregatesFilter<"Criador"> | string
    sementes?: IntWithAggregatesFilter<"Criador"> | number
    apoiadores?: IntWithAggregatesFilter<"Criador"> | number
    doacoes?: IntWithAggregatesFilter<"Criador"> | number
    dataCriacao?: DateTimeWithAggregatesFilter<"Criador"> | Date | string
  }

  export type CandidaturaCriadorWhereInput = {
    AND?: CandidaturaCriadorWhereInput | CandidaturaCriadorWhereInput[]
    OR?: CandidaturaCriadorWhereInput[]
    NOT?: CandidaturaCriadorWhereInput | CandidaturaCriadorWhereInput[]
    id?: StringFilter<"CandidaturaCriador"> | string
    usuarioId?: StringFilter<"CandidaturaCriador"> | string
    nome?: StringFilter<"CandidaturaCriador"> | string
    email?: StringFilter<"CandidaturaCriador"> | string
    bio?: StringFilter<"CandidaturaCriador"> | string
    categoria?: StringFilter<"CandidaturaCriador"> | string
    redesSociais?: StringFilter<"CandidaturaCriador"> | string
    portfolio?: StringFilter<"CandidaturaCriador"> | string
    experiencia?: StringFilter<"CandidaturaCriador"> | string
    motivacao?: StringFilter<"CandidaturaCriador"> | string
    metas?: StringFilter<"CandidaturaCriador"> | string
    disponibilidade?: StringFilter<"CandidaturaCriador"> | string
    status?: StringFilter<"CandidaturaCriador"> | string
    dataCandidatura?: DateTimeFilter<"CandidaturaCriador"> | Date | string
    dataRevisao?: DateTimeNullableFilter<"CandidaturaCriador"> | Date | string | null
    observacoes?: StringNullableFilter<"CandidaturaCriador"> | string | null
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }

  export type CandidaturaCriadorOrderByWithRelationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    bio?: SortOrder
    categoria?: SortOrder
    redesSociais?: SortOrder
    portfolio?: SortOrder
    experiencia?: SortOrder
    motivacao?: SortOrder
    metas?: SortOrder
    disponibilidade?: SortOrder
    status?: SortOrder
    dataCandidatura?: SortOrder
    dataRevisao?: SortOrderInput | SortOrder
    observacoes?: SortOrderInput | SortOrder
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type CandidaturaCriadorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CandidaturaCriadorWhereInput | CandidaturaCriadorWhereInput[]
    OR?: CandidaturaCriadorWhereInput[]
    NOT?: CandidaturaCriadorWhereInput | CandidaturaCriadorWhereInput[]
    usuarioId?: StringFilter<"CandidaturaCriador"> | string
    nome?: StringFilter<"CandidaturaCriador"> | string
    email?: StringFilter<"CandidaturaCriador"> | string
    bio?: StringFilter<"CandidaturaCriador"> | string
    categoria?: StringFilter<"CandidaturaCriador"> | string
    redesSociais?: StringFilter<"CandidaturaCriador"> | string
    portfolio?: StringFilter<"CandidaturaCriador"> | string
    experiencia?: StringFilter<"CandidaturaCriador"> | string
    motivacao?: StringFilter<"CandidaturaCriador"> | string
    metas?: StringFilter<"CandidaturaCriador"> | string
    disponibilidade?: StringFilter<"CandidaturaCriador"> | string
    status?: StringFilter<"CandidaturaCriador"> | string
    dataCandidatura?: DateTimeFilter<"CandidaturaCriador"> | Date | string
    dataRevisao?: DateTimeNullableFilter<"CandidaturaCriador"> | Date | string | null
    observacoes?: StringNullableFilter<"CandidaturaCriador"> | string | null
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }, "id">

  export type CandidaturaCriadorOrderByWithAggregationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    bio?: SortOrder
    categoria?: SortOrder
    redesSociais?: SortOrder
    portfolio?: SortOrder
    experiencia?: SortOrder
    motivacao?: SortOrder
    metas?: SortOrder
    disponibilidade?: SortOrder
    status?: SortOrder
    dataCandidatura?: SortOrder
    dataRevisao?: SortOrderInput | SortOrder
    observacoes?: SortOrderInput | SortOrder
    _count?: CandidaturaCriadorCountOrderByAggregateInput
    _max?: CandidaturaCriadorMaxOrderByAggregateInput
    _min?: CandidaturaCriadorMinOrderByAggregateInput
  }

  export type CandidaturaCriadorScalarWhereWithAggregatesInput = {
    AND?: CandidaturaCriadorScalarWhereWithAggregatesInput | CandidaturaCriadorScalarWhereWithAggregatesInput[]
    OR?: CandidaturaCriadorScalarWhereWithAggregatesInput[]
    NOT?: CandidaturaCriadorScalarWhereWithAggregatesInput | CandidaturaCriadorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CandidaturaCriador"> | string
    usuarioId?: StringWithAggregatesFilter<"CandidaturaCriador"> | string
    nome?: StringWithAggregatesFilter<"CandidaturaCriador"> | string
    email?: StringWithAggregatesFilter<"CandidaturaCriador"> | string
    bio?: StringWithAggregatesFilter<"CandidaturaCriador"> | string
    categoria?: StringWithAggregatesFilter<"CandidaturaCriador"> | string
    redesSociais?: StringWithAggregatesFilter<"CandidaturaCriador"> | string
    portfolio?: StringWithAggregatesFilter<"CandidaturaCriador"> | string
    experiencia?: StringWithAggregatesFilter<"CandidaturaCriador"> | string
    motivacao?: StringWithAggregatesFilter<"CandidaturaCriador"> | string
    metas?: StringWithAggregatesFilter<"CandidaturaCriador"> | string
    disponibilidade?: StringWithAggregatesFilter<"CandidaturaCriador"> | string
    status?: StringWithAggregatesFilter<"CandidaturaCriador"> | string
    dataCandidatura?: DateTimeWithAggregatesFilter<"CandidaturaCriador"> | Date | string
    dataRevisao?: DateTimeNullableWithAggregatesFilter<"CandidaturaCriador"> | Date | string | null
    observacoes?: StringNullableWithAggregatesFilter<"CandidaturaCriador"> | string | null
  }

  export type LogAuditoriaWhereInput = {
    AND?: LogAuditoriaWhereInput | LogAuditoriaWhereInput[]
    OR?: LogAuditoriaWhereInput[]
    NOT?: LogAuditoriaWhereInput | LogAuditoriaWhereInput[]
    id?: StringFilter<"LogAuditoria"> | string
    usuarioId?: StringFilter<"LogAuditoria"> | string
    acao?: StringFilter<"LogAuditoria"> | string
    detalhes?: StringFilter<"LogAuditoria"> | string
    ip?: StringNullableFilter<"LogAuditoria"> | string | null
    userAgent?: StringNullableFilter<"LogAuditoria"> | string | null
    timestamp?: DateTimeFilter<"LogAuditoria"> | Date | string
    nivel?: StringFilter<"LogAuditoria"> | string
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }

  export type LogAuditoriaOrderByWithRelationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    acao?: SortOrder
    detalhes?: SortOrder
    ip?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    nivel?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type LogAuditoriaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LogAuditoriaWhereInput | LogAuditoriaWhereInput[]
    OR?: LogAuditoriaWhereInput[]
    NOT?: LogAuditoriaWhereInput | LogAuditoriaWhereInput[]
    usuarioId?: StringFilter<"LogAuditoria"> | string
    acao?: StringFilter<"LogAuditoria"> | string
    detalhes?: StringFilter<"LogAuditoria"> | string
    ip?: StringNullableFilter<"LogAuditoria"> | string | null
    userAgent?: StringNullableFilter<"LogAuditoria"> | string | null
    timestamp?: DateTimeFilter<"LogAuditoria"> | Date | string
    nivel?: StringFilter<"LogAuditoria"> | string
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }, "id">

  export type LogAuditoriaOrderByWithAggregationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    acao?: SortOrder
    detalhes?: SortOrder
    ip?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    nivel?: SortOrder
    _count?: LogAuditoriaCountOrderByAggregateInput
    _max?: LogAuditoriaMaxOrderByAggregateInput
    _min?: LogAuditoriaMinOrderByAggregateInput
  }

  export type LogAuditoriaScalarWhereWithAggregatesInput = {
    AND?: LogAuditoriaScalarWhereWithAggregatesInput | LogAuditoriaScalarWhereWithAggregatesInput[]
    OR?: LogAuditoriaScalarWhereWithAggregatesInput[]
    NOT?: LogAuditoriaScalarWhereWithAggregatesInput | LogAuditoriaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LogAuditoria"> | string
    usuarioId?: StringWithAggregatesFilter<"LogAuditoria"> | string
    acao?: StringWithAggregatesFilter<"LogAuditoria"> | string
    detalhes?: StringWithAggregatesFilter<"LogAuditoria"> | string
    ip?: StringNullableWithAggregatesFilter<"LogAuditoria"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"LogAuditoria"> | string | null
    timestamp?: DateTimeWithAggregatesFilter<"LogAuditoria"> | Date | string
    nivel?: StringWithAggregatesFilter<"LogAuditoria"> | string
  }

  export type ParceiroWhereInput = {
    AND?: ParceiroWhereInput | ParceiroWhereInput[]
    OR?: ParceiroWhereInput[]
    NOT?: ParceiroWhereInput | ParceiroWhereInput[]
    id?: StringFilter<"Parceiro"> | string
    usuarioId?: StringFilter<"Parceiro"> | string
    nomeCidade?: StringFilter<"Parceiro"> | string
    comissaoMensal?: FloatFilter<"Parceiro"> | number
    totalVendas?: FloatFilter<"Parceiro"> | number
    codigosGerados?: IntFilter<"Parceiro"> | number
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    codigosCashback?: CodigoCashbackListRelationFilter
  }

  export type ParceiroOrderByWithRelationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    nomeCidade?: SortOrder
    comissaoMensal?: SortOrder
    totalVendas?: SortOrder
    codigosGerados?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
    codigosCashback?: CodigoCashbackOrderByRelationAggregateInput
  }

  export type ParceiroWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    usuarioId?: string
    AND?: ParceiroWhereInput | ParceiroWhereInput[]
    OR?: ParceiroWhereInput[]
    NOT?: ParceiroWhereInput | ParceiroWhereInput[]
    nomeCidade?: StringFilter<"Parceiro"> | string
    comissaoMensal?: FloatFilter<"Parceiro"> | number
    totalVendas?: FloatFilter<"Parceiro"> | number
    codigosGerados?: IntFilter<"Parceiro"> | number
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    codigosCashback?: CodigoCashbackListRelationFilter
  }, "id" | "usuarioId">

  export type ParceiroOrderByWithAggregationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    nomeCidade?: SortOrder
    comissaoMensal?: SortOrder
    totalVendas?: SortOrder
    codigosGerados?: SortOrder
    _count?: ParceiroCountOrderByAggregateInput
    _avg?: ParceiroAvgOrderByAggregateInput
    _max?: ParceiroMaxOrderByAggregateInput
    _min?: ParceiroMinOrderByAggregateInput
    _sum?: ParceiroSumOrderByAggregateInput
  }

  export type ParceiroScalarWhereWithAggregatesInput = {
    AND?: ParceiroScalarWhereWithAggregatesInput | ParceiroScalarWhereWithAggregatesInput[]
    OR?: ParceiroScalarWhereWithAggregatesInput[]
    NOT?: ParceiroScalarWhereWithAggregatesInput | ParceiroScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Parceiro"> | string
    usuarioId?: StringWithAggregatesFilter<"Parceiro"> | string
    nomeCidade?: StringWithAggregatesFilter<"Parceiro"> | string
    comissaoMensal?: FloatWithAggregatesFilter<"Parceiro"> | number
    totalVendas?: FloatWithAggregatesFilter<"Parceiro"> | number
    codigosGerados?: IntWithAggregatesFilter<"Parceiro"> | number
  }

  export type SementeWhereInput = {
    AND?: SementeWhereInput | SementeWhereInput[]
    OR?: SementeWhereInput[]
    NOT?: SementeWhereInput | SementeWhereInput[]
    id?: StringFilter<"Semente"> | string
    usuarioId?: StringFilter<"Semente"> | string
    quantidade?: IntFilter<"Semente"> | number
    tipo?: StringFilter<"Semente"> | string
    data?: DateTimeFilter<"Semente"> | Date | string
    descricao?: StringFilter<"Semente"> | string
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }

  export type SementeOrderByWithRelationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    quantidade?: SortOrder
    tipo?: SortOrder
    data?: SortOrder
    descricao?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type SementeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SementeWhereInput | SementeWhereInput[]
    OR?: SementeWhereInput[]
    NOT?: SementeWhereInput | SementeWhereInput[]
    usuarioId?: StringFilter<"Semente"> | string
    quantidade?: IntFilter<"Semente"> | number
    tipo?: StringFilter<"Semente"> | string
    data?: DateTimeFilter<"Semente"> | Date | string
    descricao?: StringFilter<"Semente"> | string
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }, "id">

  export type SementeOrderByWithAggregationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    quantidade?: SortOrder
    tipo?: SortOrder
    data?: SortOrder
    descricao?: SortOrder
    _count?: SementeCountOrderByAggregateInput
    _avg?: SementeAvgOrderByAggregateInput
    _max?: SementeMaxOrderByAggregateInput
    _min?: SementeMinOrderByAggregateInput
    _sum?: SementeSumOrderByAggregateInput
  }

  export type SementeScalarWhereWithAggregatesInput = {
    AND?: SementeScalarWhereWithAggregatesInput | SementeScalarWhereWithAggregatesInput[]
    OR?: SementeScalarWhereWithAggregatesInput[]
    NOT?: SementeScalarWhereWithAggregatesInput | SementeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Semente"> | string
    usuarioId?: StringWithAggregatesFilter<"Semente"> | string
    quantidade?: IntWithAggregatesFilter<"Semente"> | number
    tipo?: StringWithAggregatesFilter<"Semente"> | string
    data?: DateTimeWithAggregatesFilter<"Semente"> | Date | string
    descricao?: StringWithAggregatesFilter<"Semente"> | string
  }

  export type DoacaoWhereInput = {
    AND?: DoacaoWhereInput | DoacaoWhereInput[]
    OR?: DoacaoWhereInput[]
    NOT?: DoacaoWhereInput | DoacaoWhereInput[]
    id?: StringFilter<"Doacao"> | string
    doadorId?: StringFilter<"Doacao"> | string
    criadorId?: StringFilter<"Doacao"> | string
    quantidade?: IntFilter<"Doacao"> | number
    data?: DateTimeFilter<"Doacao"> | Date | string
    mensagem?: StringNullableFilter<"Doacao"> | string | null
    doador?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    criador?: XOR<CriadorRelationFilter, CriadorWhereInput>
  }

  export type DoacaoOrderByWithRelationInput = {
    id?: SortOrder
    doadorId?: SortOrder
    criadorId?: SortOrder
    quantidade?: SortOrder
    data?: SortOrder
    mensagem?: SortOrderInput | SortOrder
    doador?: UsuarioOrderByWithRelationInput
    criador?: CriadorOrderByWithRelationInput
  }

  export type DoacaoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DoacaoWhereInput | DoacaoWhereInput[]
    OR?: DoacaoWhereInput[]
    NOT?: DoacaoWhereInput | DoacaoWhereInput[]
    doadorId?: StringFilter<"Doacao"> | string
    criadorId?: StringFilter<"Doacao"> | string
    quantidade?: IntFilter<"Doacao"> | number
    data?: DateTimeFilter<"Doacao"> | Date | string
    mensagem?: StringNullableFilter<"Doacao"> | string | null
    doador?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    criador?: XOR<CriadorRelationFilter, CriadorWhereInput>
  }, "id">

  export type DoacaoOrderByWithAggregationInput = {
    id?: SortOrder
    doadorId?: SortOrder
    criadorId?: SortOrder
    quantidade?: SortOrder
    data?: SortOrder
    mensagem?: SortOrderInput | SortOrder
    _count?: DoacaoCountOrderByAggregateInput
    _avg?: DoacaoAvgOrderByAggregateInput
    _max?: DoacaoMaxOrderByAggregateInput
    _min?: DoacaoMinOrderByAggregateInput
    _sum?: DoacaoSumOrderByAggregateInput
  }

  export type DoacaoScalarWhereWithAggregatesInput = {
    AND?: DoacaoScalarWhereWithAggregatesInput | DoacaoScalarWhereWithAggregatesInput[]
    OR?: DoacaoScalarWhereWithAggregatesInput[]
    NOT?: DoacaoScalarWhereWithAggregatesInput | DoacaoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Doacao"> | string
    doadorId?: StringWithAggregatesFilter<"Doacao"> | string
    criadorId?: StringWithAggregatesFilter<"Doacao"> | string
    quantidade?: IntWithAggregatesFilter<"Doacao"> | number
    data?: DateTimeWithAggregatesFilter<"Doacao"> | Date | string
    mensagem?: StringNullableWithAggregatesFilter<"Doacao"> | string | null
  }

  export type TransacaoWhereInput = {
    AND?: TransacaoWhereInput | TransacaoWhereInput[]
    OR?: TransacaoWhereInput[]
    NOT?: TransacaoWhereInput | TransacaoWhereInput[]
    id?: StringFilter<"Transacao"> | string
    usuarioId?: StringFilter<"Transacao"> | string
    tipo?: StringFilter<"Transacao"> | string
    valor?: FloatFilter<"Transacao"> | number
    codigoParceiro?: StringNullableFilter<"Transacao"> | string | null
    status?: StringFilter<"Transacao"> | string
    data?: DateTimeFilter<"Transacao"> | Date | string
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }

  export type TransacaoOrderByWithRelationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipo?: SortOrder
    valor?: SortOrder
    codigoParceiro?: SortOrderInput | SortOrder
    status?: SortOrder
    data?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type TransacaoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TransacaoWhereInput | TransacaoWhereInput[]
    OR?: TransacaoWhereInput[]
    NOT?: TransacaoWhereInput | TransacaoWhereInput[]
    usuarioId?: StringFilter<"Transacao"> | string
    tipo?: StringFilter<"Transacao"> | string
    valor?: FloatFilter<"Transacao"> | number
    codigoParceiro?: StringNullableFilter<"Transacao"> | string | null
    status?: StringFilter<"Transacao"> | string
    data?: DateTimeFilter<"Transacao"> | Date | string
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }, "id">

  export type TransacaoOrderByWithAggregationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipo?: SortOrder
    valor?: SortOrder
    codigoParceiro?: SortOrderInput | SortOrder
    status?: SortOrder
    data?: SortOrder
    _count?: TransacaoCountOrderByAggregateInput
    _avg?: TransacaoAvgOrderByAggregateInput
    _max?: TransacaoMaxOrderByAggregateInput
    _min?: TransacaoMinOrderByAggregateInput
    _sum?: TransacaoSumOrderByAggregateInput
  }

  export type TransacaoScalarWhereWithAggregatesInput = {
    AND?: TransacaoScalarWhereWithAggregatesInput | TransacaoScalarWhereWithAggregatesInput[]
    OR?: TransacaoScalarWhereWithAggregatesInput[]
    NOT?: TransacaoScalarWhereWithAggregatesInput | TransacaoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Transacao"> | string
    usuarioId?: StringWithAggregatesFilter<"Transacao"> | string
    tipo?: StringWithAggregatesFilter<"Transacao"> | string
    valor?: FloatWithAggregatesFilter<"Transacao"> | number
    codigoParceiro?: StringNullableWithAggregatesFilter<"Transacao"> | string | null
    status?: StringWithAggregatesFilter<"Transacao"> | string
    data?: DateTimeWithAggregatesFilter<"Transacao"> | Date | string
  }

  export type CodigoCashbackWhereInput = {
    AND?: CodigoCashbackWhereInput | CodigoCashbackWhereInput[]
    OR?: CodigoCashbackWhereInput[]
    NOT?: CodigoCashbackWhereInput | CodigoCashbackWhereInput[]
    id?: StringFilter<"CodigoCashback"> | string
    parceiroId?: StringFilter<"CodigoCashback"> | string
    codigo?: StringFilter<"CodigoCashback"> | string
    valor?: FloatFilter<"CodigoCashback"> | number
    usado?: BoolFilter<"CodigoCashback"> | boolean
    dataGeracao?: DateTimeFilter<"CodigoCashback"> | Date | string
    dataUso?: DateTimeNullableFilter<"CodigoCashback"> | Date | string | null
    parceiro?: XOR<ParceiroRelationFilter, ParceiroWhereInput>
  }

  export type CodigoCashbackOrderByWithRelationInput = {
    id?: SortOrder
    parceiroId?: SortOrder
    codigo?: SortOrder
    valor?: SortOrder
    usado?: SortOrder
    dataGeracao?: SortOrder
    dataUso?: SortOrderInput | SortOrder
    parceiro?: ParceiroOrderByWithRelationInput
  }

  export type CodigoCashbackWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    codigo?: string
    AND?: CodigoCashbackWhereInput | CodigoCashbackWhereInput[]
    OR?: CodigoCashbackWhereInput[]
    NOT?: CodigoCashbackWhereInput | CodigoCashbackWhereInput[]
    parceiroId?: StringFilter<"CodigoCashback"> | string
    valor?: FloatFilter<"CodigoCashback"> | number
    usado?: BoolFilter<"CodigoCashback"> | boolean
    dataGeracao?: DateTimeFilter<"CodigoCashback"> | Date | string
    dataUso?: DateTimeNullableFilter<"CodigoCashback"> | Date | string | null
    parceiro?: XOR<ParceiroRelationFilter, ParceiroWhereInput>
  }, "id" | "codigo">

  export type CodigoCashbackOrderByWithAggregationInput = {
    id?: SortOrder
    parceiroId?: SortOrder
    codigo?: SortOrder
    valor?: SortOrder
    usado?: SortOrder
    dataGeracao?: SortOrder
    dataUso?: SortOrderInput | SortOrder
    _count?: CodigoCashbackCountOrderByAggregateInput
    _avg?: CodigoCashbackAvgOrderByAggregateInput
    _max?: CodigoCashbackMaxOrderByAggregateInput
    _min?: CodigoCashbackMinOrderByAggregateInput
    _sum?: CodigoCashbackSumOrderByAggregateInput
  }

  export type CodigoCashbackScalarWhereWithAggregatesInput = {
    AND?: CodigoCashbackScalarWhereWithAggregatesInput | CodigoCashbackScalarWhereWithAggregatesInput[]
    OR?: CodigoCashbackScalarWhereWithAggregatesInput[]
    NOT?: CodigoCashbackScalarWhereWithAggregatesInput | CodigoCashbackScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CodigoCashback"> | string
    parceiroId?: StringWithAggregatesFilter<"CodigoCashback"> | string
    codigo?: StringWithAggregatesFilter<"CodigoCashback"> | string
    valor?: FloatWithAggregatesFilter<"CodigoCashback"> | number
    usado?: BoolWithAggregatesFilter<"CodigoCashback"> | boolean
    dataGeracao?: DateTimeWithAggregatesFilter<"CodigoCashback"> | Date | string
    dataUso?: DateTimeNullableWithAggregatesFilter<"CodigoCashback"> | Date | string | null
  }

  export type NotificacaoWhereInput = {
    AND?: NotificacaoWhereInput | NotificacaoWhereInput[]
    OR?: NotificacaoWhereInput[]
    NOT?: NotificacaoWhereInput | NotificacaoWhereInput[]
    id?: StringFilter<"Notificacao"> | string
    usuarioId?: StringFilter<"Notificacao"> | string
    tipo?: StringFilter<"Notificacao"> | string
    titulo?: StringFilter<"Notificacao"> | string
    mensagem?: StringFilter<"Notificacao"> | string
    lida?: BoolFilter<"Notificacao"> | boolean
    data?: DateTimeFilter<"Notificacao"> | Date | string
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }

  export type NotificacaoOrderByWithRelationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipo?: SortOrder
    titulo?: SortOrder
    mensagem?: SortOrder
    lida?: SortOrder
    data?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type NotificacaoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificacaoWhereInput | NotificacaoWhereInput[]
    OR?: NotificacaoWhereInput[]
    NOT?: NotificacaoWhereInput | NotificacaoWhereInput[]
    usuarioId?: StringFilter<"Notificacao"> | string
    tipo?: StringFilter<"Notificacao"> | string
    titulo?: StringFilter<"Notificacao"> | string
    mensagem?: StringFilter<"Notificacao"> | string
    lida?: BoolFilter<"Notificacao"> | boolean
    data?: DateTimeFilter<"Notificacao"> | Date | string
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }, "id">

  export type NotificacaoOrderByWithAggregationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipo?: SortOrder
    titulo?: SortOrder
    mensagem?: SortOrder
    lida?: SortOrder
    data?: SortOrder
    _count?: NotificacaoCountOrderByAggregateInput
    _max?: NotificacaoMaxOrderByAggregateInput
    _min?: NotificacaoMinOrderByAggregateInput
  }

  export type NotificacaoScalarWhereWithAggregatesInput = {
    AND?: NotificacaoScalarWhereWithAggregatesInput | NotificacaoScalarWhereWithAggregatesInput[]
    OR?: NotificacaoScalarWhereWithAggregatesInput[]
    NOT?: NotificacaoScalarWhereWithAggregatesInput | NotificacaoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notificacao"> | string
    usuarioId?: StringWithAggregatesFilter<"Notificacao"> | string
    tipo?: StringWithAggregatesFilter<"Notificacao"> | string
    titulo?: StringWithAggregatesFilter<"Notificacao"> | string
    mensagem?: StringWithAggregatesFilter<"Notificacao"> | string
    lida?: BoolWithAggregatesFilter<"Notificacao"> | boolean
    data?: DateTimeWithAggregatesFilter<"Notificacao"> | Date | string
  }

  export type TokenRecuperacaoWhereInput = {
    AND?: TokenRecuperacaoWhereInput | TokenRecuperacaoWhereInput[]
    OR?: TokenRecuperacaoWhereInput[]
    NOT?: TokenRecuperacaoWhereInput | TokenRecuperacaoWhereInput[]
    id?: StringFilter<"TokenRecuperacao"> | string
    usuarioId?: StringFilter<"TokenRecuperacao"> | string
    token?: StringFilter<"TokenRecuperacao"> | string
    usado?: BoolFilter<"TokenRecuperacao"> | boolean
    expiraEm?: DateTimeFilter<"TokenRecuperacao"> | Date | string
    dataCriacao?: DateTimeFilter<"TokenRecuperacao"> | Date | string
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }

  export type TokenRecuperacaoOrderByWithRelationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    token?: SortOrder
    usado?: SortOrder
    expiraEm?: SortOrder
    dataCriacao?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type TokenRecuperacaoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: TokenRecuperacaoWhereInput | TokenRecuperacaoWhereInput[]
    OR?: TokenRecuperacaoWhereInput[]
    NOT?: TokenRecuperacaoWhereInput | TokenRecuperacaoWhereInput[]
    usuarioId?: StringFilter<"TokenRecuperacao"> | string
    usado?: BoolFilter<"TokenRecuperacao"> | boolean
    expiraEm?: DateTimeFilter<"TokenRecuperacao"> | Date | string
    dataCriacao?: DateTimeFilter<"TokenRecuperacao"> | Date | string
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }, "id" | "token">

  export type TokenRecuperacaoOrderByWithAggregationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    token?: SortOrder
    usado?: SortOrder
    expiraEm?: SortOrder
    dataCriacao?: SortOrder
    _count?: TokenRecuperacaoCountOrderByAggregateInput
    _max?: TokenRecuperacaoMaxOrderByAggregateInput
    _min?: TokenRecuperacaoMinOrderByAggregateInput
  }

  export type TokenRecuperacaoScalarWhereWithAggregatesInput = {
    AND?: TokenRecuperacaoScalarWhereWithAggregatesInput | TokenRecuperacaoScalarWhereWithAggregatesInput[]
    OR?: TokenRecuperacaoScalarWhereWithAggregatesInput[]
    NOT?: TokenRecuperacaoScalarWhereWithAggregatesInput | TokenRecuperacaoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TokenRecuperacao"> | string
    usuarioId?: StringWithAggregatesFilter<"TokenRecuperacao"> | string
    token?: StringWithAggregatesFilter<"TokenRecuperacao"> | string
    usado?: BoolWithAggregatesFilter<"TokenRecuperacao"> | boolean
    expiraEm?: DateTimeWithAggregatesFilter<"TokenRecuperacao"> | Date | string
    dataCriacao?: DateTimeWithAggregatesFilter<"TokenRecuperacao"> | Date | string
  }

  export type UsuarioCreateInput = {
    id?: string
    nome: string
    email: string
    senha: string
    tipo?: string
    sementes?: number
    nivel?: string
    pontuacao?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
    criador?: CriadorCreateNestedOneWithoutUsuarioInput
    parceiro?: ParceiroCreateNestedOneWithoutUsuarioInput
    sementesHistorico?: SementeCreateNestedManyWithoutUsuarioInput
    doacoesFeitas?: DoacaoCreateNestedManyWithoutDoadorInput
    transacoes?: TransacaoCreateNestedManyWithoutUsuarioInput
    notificacoes?: NotificacaoCreateNestedManyWithoutUsuarioInput
    candidaturas?: CandidaturaCriadorCreateNestedManyWithoutUsuarioInput
    logsAuditoria?: LogAuditoriaCreateNestedManyWithoutUsuarioInput
    carteira?: CarteiraDigitalCreateNestedOneWithoutUsuarioInput
    dadosBancarios?: DadosBancariosCreateNestedOneWithoutUsuarioInput
    saques?: SaqueCreateNestedManyWithoutUsuarioInput
    pagamentos?: PagamentoCreateNestedManyWithoutUsuarioInput
    tokensRecuperacao?: TokenRecuperacaoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateInput = {
    id?: string
    nome: string
    email: string
    senha: string
    tipo?: string
    sementes?: number
    nivel?: string
    pontuacao?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
    criador?: CriadorUncheckedCreateNestedOneWithoutUsuarioInput
    parceiro?: ParceiroUncheckedCreateNestedOneWithoutUsuarioInput
    sementesHistorico?: SementeUncheckedCreateNestedManyWithoutUsuarioInput
    doacoesFeitas?: DoacaoUncheckedCreateNestedManyWithoutDoadorInput
    transacoes?: TransacaoUncheckedCreateNestedManyWithoutUsuarioInput
    notificacoes?: NotificacaoUncheckedCreateNestedManyWithoutUsuarioInput
    candidaturas?: CandidaturaCriadorUncheckedCreateNestedManyWithoutUsuarioInput
    logsAuditoria?: LogAuditoriaUncheckedCreateNestedManyWithoutUsuarioInput
    carteira?: CarteiraDigitalUncheckedCreateNestedOneWithoutUsuarioInput
    dadosBancarios?: DadosBancariosUncheckedCreateNestedOneWithoutUsuarioInput
    saques?: SaqueUncheckedCreateNestedManyWithoutUsuarioInput
    pagamentos?: PagamentoUncheckedCreateNestedManyWithoutUsuarioInput
    tokensRecuperacao?: TokenRecuperacaoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    nivel?: StringFieldUpdateOperationsInput | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criador?: CriadorUpdateOneWithoutUsuarioNestedInput
    parceiro?: ParceiroUpdateOneWithoutUsuarioNestedInput
    sementesHistorico?: SementeUpdateManyWithoutUsuarioNestedInput
    doacoesFeitas?: DoacaoUpdateManyWithoutDoadorNestedInput
    transacoes?: TransacaoUpdateManyWithoutUsuarioNestedInput
    notificacoes?: NotificacaoUpdateManyWithoutUsuarioNestedInput
    candidaturas?: CandidaturaCriadorUpdateManyWithoutUsuarioNestedInput
    logsAuditoria?: LogAuditoriaUpdateManyWithoutUsuarioNestedInput
    carteira?: CarteiraDigitalUpdateOneWithoutUsuarioNestedInput
    dadosBancarios?: DadosBancariosUpdateOneWithoutUsuarioNestedInput
    saques?: SaqueUpdateManyWithoutUsuarioNestedInput
    pagamentos?: PagamentoUpdateManyWithoutUsuarioNestedInput
    tokensRecuperacao?: TokenRecuperacaoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    nivel?: StringFieldUpdateOperationsInput | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criador?: CriadorUncheckedUpdateOneWithoutUsuarioNestedInput
    parceiro?: ParceiroUncheckedUpdateOneWithoutUsuarioNestedInput
    sementesHistorico?: SementeUncheckedUpdateManyWithoutUsuarioNestedInput
    doacoesFeitas?: DoacaoUncheckedUpdateManyWithoutDoadorNestedInput
    transacoes?: TransacaoUncheckedUpdateManyWithoutUsuarioNestedInput
    notificacoes?: NotificacaoUncheckedUpdateManyWithoutUsuarioNestedInput
    candidaturas?: CandidaturaCriadorUncheckedUpdateManyWithoutUsuarioNestedInput
    logsAuditoria?: LogAuditoriaUncheckedUpdateManyWithoutUsuarioNestedInput
    carteira?: CarteiraDigitalUncheckedUpdateOneWithoutUsuarioNestedInput
    dadosBancarios?: DadosBancariosUncheckedUpdateOneWithoutUsuarioNestedInput
    saques?: SaqueUncheckedUpdateManyWithoutUsuarioNestedInput
    pagamentos?: PagamentoUncheckedUpdateManyWithoutUsuarioNestedInput
    tokensRecuperacao?: TokenRecuperacaoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateManyInput = {
    id?: string
    nome: string
    email: string
    senha: string
    tipo?: string
    sementes?: number
    nivel?: string
    pontuacao?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
  }

  export type UsuarioUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    nivel?: StringFieldUpdateOperationsInput | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    nivel?: StringFieldUpdateOperationsInput | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarteiraDigitalCreateInput = {
    id?: string
    saldo?: number
    saldoPendente?: number
    totalRecebido?: number
    totalSacado?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
    usuario: UsuarioCreateNestedOneWithoutCarteiraInput
    movimentacoes?: MovimentacaoCarteiraCreateNestedManyWithoutCarteiraInput
  }

  export type CarteiraDigitalUncheckedCreateInput = {
    id?: string
    usuarioId: string
    saldo?: number
    saldoPendente?: number
    totalRecebido?: number
    totalSacado?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
    movimentacoes?: MovimentacaoCarteiraUncheckedCreateNestedManyWithoutCarteiraInput
  }

  export type CarteiraDigitalUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    saldo?: FloatFieldUpdateOperationsInput | number
    saldoPendente?: FloatFieldUpdateOperationsInput | number
    totalRecebido?: FloatFieldUpdateOperationsInput | number
    totalSacado?: FloatFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UsuarioUpdateOneRequiredWithoutCarteiraNestedInput
    movimentacoes?: MovimentacaoCarteiraUpdateManyWithoutCarteiraNestedInput
  }

  export type CarteiraDigitalUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    saldo?: FloatFieldUpdateOperationsInput | number
    saldoPendente?: FloatFieldUpdateOperationsInput | number
    totalRecebido?: FloatFieldUpdateOperationsInput | number
    totalSacado?: FloatFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    movimentacoes?: MovimentacaoCarteiraUncheckedUpdateManyWithoutCarteiraNestedInput
  }

  export type CarteiraDigitalCreateManyInput = {
    id?: string
    usuarioId: string
    saldo?: number
    saldoPendente?: number
    totalRecebido?: number
    totalSacado?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
  }

  export type CarteiraDigitalUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    saldo?: FloatFieldUpdateOperationsInput | number
    saldoPendente?: FloatFieldUpdateOperationsInput | number
    totalRecebido?: FloatFieldUpdateOperationsInput | number
    totalSacado?: FloatFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarteiraDigitalUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    saldo?: FloatFieldUpdateOperationsInput | number
    saldoPendente?: FloatFieldUpdateOperationsInput | number
    totalRecebido?: FloatFieldUpdateOperationsInput | number
    totalSacado?: FloatFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovimentacaoCarteiraCreateInput = {
    id?: string
    tipo: string
    valor: number
    saldoAnterior: number
    saldoPosterior: number
    descricao: string
    referencia?: string | null
    status?: string
    data?: Date | string
    carteira: CarteiraDigitalCreateNestedOneWithoutMovimentacoesInput
  }

  export type MovimentacaoCarteiraUncheckedCreateInput = {
    id?: string
    carteiraId: string
    tipo: string
    valor: number
    saldoAnterior: number
    saldoPosterior: number
    descricao: string
    referencia?: string | null
    status?: string
    data?: Date | string
  }

  export type MovimentacaoCarteiraUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    saldoAnterior?: FloatFieldUpdateOperationsInput | number
    saldoPosterior?: FloatFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    referencia?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    carteira?: CarteiraDigitalUpdateOneRequiredWithoutMovimentacoesNestedInput
  }

  export type MovimentacaoCarteiraUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    carteiraId?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    saldoAnterior?: FloatFieldUpdateOperationsInput | number
    saldoPosterior?: FloatFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    referencia?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovimentacaoCarteiraCreateManyInput = {
    id?: string
    carteiraId: string
    tipo: string
    valor: number
    saldoAnterior: number
    saldoPosterior: number
    descricao: string
    referencia?: string | null
    status?: string
    data?: Date | string
  }

  export type MovimentacaoCarteiraUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    saldoAnterior?: FloatFieldUpdateOperationsInput | number
    saldoPosterior?: FloatFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    referencia?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovimentacaoCarteiraUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    carteiraId?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    saldoAnterior?: FloatFieldUpdateOperationsInput | number
    saldoPosterior?: FloatFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    referencia?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DadosBancariosCreateInput = {
    id?: string
    banco: string
    agencia: string
    conta: string
    tipoConta: string
    cpfCnpj: string
    nomeTitular: string
    validado?: boolean
    dataValidacao?: Date | string | null
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
    usuario: UsuarioCreateNestedOneWithoutDadosBancariosInput
  }

  export type DadosBancariosUncheckedCreateInput = {
    id?: string
    usuarioId: string
    banco: string
    agencia: string
    conta: string
    tipoConta: string
    cpfCnpj: string
    nomeTitular: string
    validado?: boolean
    dataValidacao?: Date | string | null
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
  }

  export type DadosBancariosUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    banco?: StringFieldUpdateOperationsInput | string
    agencia?: StringFieldUpdateOperationsInput | string
    conta?: StringFieldUpdateOperationsInput | string
    tipoConta?: StringFieldUpdateOperationsInput | string
    cpfCnpj?: StringFieldUpdateOperationsInput | string
    nomeTitular?: StringFieldUpdateOperationsInput | string
    validado?: BoolFieldUpdateOperationsInput | boolean
    dataValidacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UsuarioUpdateOneRequiredWithoutDadosBancariosNestedInput
  }

  export type DadosBancariosUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    banco?: StringFieldUpdateOperationsInput | string
    agencia?: StringFieldUpdateOperationsInput | string
    conta?: StringFieldUpdateOperationsInput | string
    tipoConta?: StringFieldUpdateOperationsInput | string
    cpfCnpj?: StringFieldUpdateOperationsInput | string
    nomeTitular?: StringFieldUpdateOperationsInput | string
    validado?: BoolFieldUpdateOperationsInput | boolean
    dataValidacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DadosBancariosCreateManyInput = {
    id?: string
    usuarioId: string
    banco: string
    agencia: string
    conta: string
    tipoConta: string
    cpfCnpj: string
    nomeTitular: string
    validado?: boolean
    dataValidacao?: Date | string | null
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
  }

  export type DadosBancariosUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    banco?: StringFieldUpdateOperationsInput | string
    agencia?: StringFieldUpdateOperationsInput | string
    conta?: StringFieldUpdateOperationsInput | string
    tipoConta?: StringFieldUpdateOperationsInput | string
    cpfCnpj?: StringFieldUpdateOperationsInput | string
    nomeTitular?: StringFieldUpdateOperationsInput | string
    validado?: BoolFieldUpdateOperationsInput | boolean
    dataValidacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DadosBancariosUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    banco?: StringFieldUpdateOperationsInput | string
    agencia?: StringFieldUpdateOperationsInput | string
    conta?: StringFieldUpdateOperationsInput | string
    tipoConta?: StringFieldUpdateOperationsInput | string
    cpfCnpj?: StringFieldUpdateOperationsInput | string
    nomeTitular?: StringFieldUpdateOperationsInput | string
    validado?: BoolFieldUpdateOperationsInput | boolean
    dataValidacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SaqueCreateInput = {
    id?: string
    valor: number
    taxa?: number
    valorLiquido: number
    dadosBancarios: string
    status?: string
    motivoRejeicao?: string | null
    dataSolicitacao?: Date | string
    dataProcessamento?: Date | string | null
    dataConclusao?: Date | string | null
    comprovante?: string | null
    usuario: UsuarioCreateNestedOneWithoutSaquesInput
  }

  export type SaqueUncheckedCreateInput = {
    id?: string
    usuarioId: string
    valor: number
    taxa?: number
    valorLiquido: number
    dadosBancarios: string
    status?: string
    motivoRejeicao?: string | null
    dataSolicitacao?: Date | string
    dataProcessamento?: Date | string | null
    dataConclusao?: Date | string | null
    comprovante?: string | null
  }

  export type SaqueUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    taxa?: FloatFieldUpdateOperationsInput | number
    valorLiquido?: FloatFieldUpdateOperationsInput | number
    dadosBancarios?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    motivoRejeicao?: NullableStringFieldUpdateOperationsInput | string | null
    dataSolicitacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataProcessamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataConclusao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comprovante?: NullableStringFieldUpdateOperationsInput | string | null
    usuario?: UsuarioUpdateOneRequiredWithoutSaquesNestedInput
  }

  export type SaqueUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    taxa?: FloatFieldUpdateOperationsInput | number
    valorLiquido?: FloatFieldUpdateOperationsInput | number
    dadosBancarios?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    motivoRejeicao?: NullableStringFieldUpdateOperationsInput | string | null
    dataSolicitacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataProcessamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataConclusao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comprovante?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SaqueCreateManyInput = {
    id?: string
    usuarioId: string
    valor: number
    taxa?: number
    valorLiquido: number
    dadosBancarios: string
    status?: string
    motivoRejeicao?: string | null
    dataSolicitacao?: Date | string
    dataProcessamento?: Date | string | null
    dataConclusao?: Date | string | null
    comprovante?: string | null
  }

  export type SaqueUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    taxa?: FloatFieldUpdateOperationsInput | number
    valorLiquido?: FloatFieldUpdateOperationsInput | number
    dadosBancarios?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    motivoRejeicao?: NullableStringFieldUpdateOperationsInput | string | null
    dataSolicitacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataProcessamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataConclusao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comprovante?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SaqueUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    taxa?: FloatFieldUpdateOperationsInput | number
    valorLiquido?: FloatFieldUpdateOperationsInput | number
    dadosBancarios?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    motivoRejeicao?: NullableStringFieldUpdateOperationsInput | string | null
    dataSolicitacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataProcessamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataConclusao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comprovante?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PagamentoCreateInput = {
    id?: string
    tipo: string
    valor: number
    sementesGeradas: number
    gateway: string
    gatewayId?: string | null
    status?: string
    dadosPagamento: string
    dataPagamento?: Date | string
    dataProcessamento?: Date | string | null
    usuario: UsuarioCreateNestedOneWithoutPagamentosInput
  }

  export type PagamentoUncheckedCreateInput = {
    id?: string
    usuarioId: string
    tipo: string
    valor: number
    sementesGeradas: number
    gateway: string
    gatewayId?: string | null
    status?: string
    dadosPagamento: string
    dataPagamento?: Date | string
    dataProcessamento?: Date | string | null
  }

  export type PagamentoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    sementesGeradas?: IntFieldUpdateOperationsInput | number
    gateway?: StringFieldUpdateOperationsInput | string
    gatewayId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    dadosPagamento?: StringFieldUpdateOperationsInput | string
    dataPagamento?: DateTimeFieldUpdateOperationsInput | Date | string
    dataProcessamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usuario?: UsuarioUpdateOneRequiredWithoutPagamentosNestedInput
  }

  export type PagamentoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    sementesGeradas?: IntFieldUpdateOperationsInput | number
    gateway?: StringFieldUpdateOperationsInput | string
    gatewayId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    dadosPagamento?: StringFieldUpdateOperationsInput | string
    dataPagamento?: DateTimeFieldUpdateOperationsInput | Date | string
    dataProcessamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PagamentoCreateManyInput = {
    id?: string
    usuarioId: string
    tipo: string
    valor: number
    sementesGeradas: number
    gateway: string
    gatewayId?: string | null
    status?: string
    dadosPagamento: string
    dataPagamento?: Date | string
    dataProcessamento?: Date | string | null
  }

  export type PagamentoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    sementesGeradas?: IntFieldUpdateOperationsInput | number
    gateway?: StringFieldUpdateOperationsInput | string
    gatewayId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    dadosPagamento?: StringFieldUpdateOperationsInput | string
    dataPagamento?: DateTimeFieldUpdateOperationsInput | Date | string
    dataProcessamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PagamentoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    sementesGeradas?: IntFieldUpdateOperationsInput | number
    gateway?: StringFieldUpdateOperationsInput | string
    gatewayId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    dadosPagamento?: StringFieldUpdateOperationsInput | string
    dataPagamento?: DateTimeFieldUpdateOperationsInput | Date | string
    dataProcessamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CriadorCreateInput = {
    id?: string
    nome: string
    bio: string
    categoria: string
    redesSociais: string
    portfolio: string
    nivel?: string
    sementes?: number
    apoiadores?: number
    doacoes?: number
    dataCriacao?: Date | string
    usuario: UsuarioCreateNestedOneWithoutCriadorInput
    doacoesRecebidas?: DoacaoCreateNestedManyWithoutCriadorInput
  }

  export type CriadorUncheckedCreateInput = {
    id?: string
    usuarioId: string
    nome: string
    bio: string
    categoria: string
    redesSociais: string
    portfolio: string
    nivel?: string
    sementes?: number
    apoiadores?: number
    doacoes?: number
    dataCriacao?: Date | string
    doacoesRecebidas?: DoacaoUncheckedCreateNestedManyWithoutCriadorInput
  }

  export type CriadorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    redesSociais?: StringFieldUpdateOperationsInput | string
    portfolio?: StringFieldUpdateOperationsInput | string
    nivel?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    apoiadores?: IntFieldUpdateOperationsInput | number
    doacoes?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UsuarioUpdateOneRequiredWithoutCriadorNestedInput
    doacoesRecebidas?: DoacaoUpdateManyWithoutCriadorNestedInput
  }

  export type CriadorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    redesSociais?: StringFieldUpdateOperationsInput | string
    portfolio?: StringFieldUpdateOperationsInput | string
    nivel?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    apoiadores?: IntFieldUpdateOperationsInput | number
    doacoes?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    doacoesRecebidas?: DoacaoUncheckedUpdateManyWithoutCriadorNestedInput
  }

  export type CriadorCreateManyInput = {
    id?: string
    usuarioId: string
    nome: string
    bio: string
    categoria: string
    redesSociais: string
    portfolio: string
    nivel?: string
    sementes?: number
    apoiadores?: number
    doacoes?: number
    dataCriacao?: Date | string
  }

  export type CriadorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    redesSociais?: StringFieldUpdateOperationsInput | string
    portfolio?: StringFieldUpdateOperationsInput | string
    nivel?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    apoiadores?: IntFieldUpdateOperationsInput | number
    doacoes?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CriadorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    redesSociais?: StringFieldUpdateOperationsInput | string
    portfolio?: StringFieldUpdateOperationsInput | string
    nivel?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    apoiadores?: IntFieldUpdateOperationsInput | number
    doacoes?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidaturaCriadorCreateInput = {
    id?: string
    nome: string
    email: string
    bio: string
    categoria: string
    redesSociais: string
    portfolio: string
    experiencia: string
    motivacao: string
    metas: string
    disponibilidade: string
    status?: string
    dataCandidatura?: Date | string
    dataRevisao?: Date | string | null
    observacoes?: string | null
    usuario: UsuarioCreateNestedOneWithoutCandidaturasInput
  }

  export type CandidaturaCriadorUncheckedCreateInput = {
    id?: string
    usuarioId: string
    nome: string
    email: string
    bio: string
    categoria: string
    redesSociais: string
    portfolio: string
    experiencia: string
    motivacao: string
    metas: string
    disponibilidade: string
    status?: string
    dataCandidatura?: Date | string
    dataRevisao?: Date | string | null
    observacoes?: string | null
  }

  export type CandidaturaCriadorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    redesSociais?: StringFieldUpdateOperationsInput | string
    portfolio?: StringFieldUpdateOperationsInput | string
    experiencia?: StringFieldUpdateOperationsInput | string
    motivacao?: StringFieldUpdateOperationsInput | string
    metas?: StringFieldUpdateOperationsInput | string
    disponibilidade?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dataCandidatura?: DateTimeFieldUpdateOperationsInput | Date | string
    dataRevisao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    usuario?: UsuarioUpdateOneRequiredWithoutCandidaturasNestedInput
  }

  export type CandidaturaCriadorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    redesSociais?: StringFieldUpdateOperationsInput | string
    portfolio?: StringFieldUpdateOperationsInput | string
    experiencia?: StringFieldUpdateOperationsInput | string
    motivacao?: StringFieldUpdateOperationsInput | string
    metas?: StringFieldUpdateOperationsInput | string
    disponibilidade?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dataCandidatura?: DateTimeFieldUpdateOperationsInput | Date | string
    dataRevisao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CandidaturaCriadorCreateManyInput = {
    id?: string
    usuarioId: string
    nome: string
    email: string
    bio: string
    categoria: string
    redesSociais: string
    portfolio: string
    experiencia: string
    motivacao: string
    metas: string
    disponibilidade: string
    status?: string
    dataCandidatura?: Date | string
    dataRevisao?: Date | string | null
    observacoes?: string | null
  }

  export type CandidaturaCriadorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    redesSociais?: StringFieldUpdateOperationsInput | string
    portfolio?: StringFieldUpdateOperationsInput | string
    experiencia?: StringFieldUpdateOperationsInput | string
    motivacao?: StringFieldUpdateOperationsInput | string
    metas?: StringFieldUpdateOperationsInput | string
    disponibilidade?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dataCandidatura?: DateTimeFieldUpdateOperationsInput | Date | string
    dataRevisao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CandidaturaCriadorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    redesSociais?: StringFieldUpdateOperationsInput | string
    portfolio?: StringFieldUpdateOperationsInput | string
    experiencia?: StringFieldUpdateOperationsInput | string
    motivacao?: StringFieldUpdateOperationsInput | string
    metas?: StringFieldUpdateOperationsInput | string
    disponibilidade?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dataCandidatura?: DateTimeFieldUpdateOperationsInput | Date | string
    dataRevisao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LogAuditoriaCreateInput = {
    id?: string
    acao: string
    detalhes: string
    ip?: string | null
    userAgent?: string | null
    timestamp?: Date | string
    nivel?: string
    usuario: UsuarioCreateNestedOneWithoutLogsAuditoriaInput
  }

  export type LogAuditoriaUncheckedCreateInput = {
    id?: string
    usuarioId: string
    acao: string
    detalhes: string
    ip?: string | null
    userAgent?: string | null
    timestamp?: Date | string
    nivel?: string
  }

  export type LogAuditoriaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    acao?: StringFieldUpdateOperationsInput | string
    detalhes?: StringFieldUpdateOperationsInput | string
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    nivel?: StringFieldUpdateOperationsInput | string
    usuario?: UsuarioUpdateOneRequiredWithoutLogsAuditoriaNestedInput
  }

  export type LogAuditoriaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    acao?: StringFieldUpdateOperationsInput | string
    detalhes?: StringFieldUpdateOperationsInput | string
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    nivel?: StringFieldUpdateOperationsInput | string
  }

  export type LogAuditoriaCreateManyInput = {
    id?: string
    usuarioId: string
    acao: string
    detalhes: string
    ip?: string | null
    userAgent?: string | null
    timestamp?: Date | string
    nivel?: string
  }

  export type LogAuditoriaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    acao?: StringFieldUpdateOperationsInput | string
    detalhes?: StringFieldUpdateOperationsInput | string
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    nivel?: StringFieldUpdateOperationsInput | string
  }

  export type LogAuditoriaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    acao?: StringFieldUpdateOperationsInput | string
    detalhes?: StringFieldUpdateOperationsInput | string
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    nivel?: StringFieldUpdateOperationsInput | string
  }

  export type ParceiroCreateInput = {
    id?: string
    nomeCidade: string
    comissaoMensal: number
    totalVendas?: number
    codigosGerados?: number
    usuario: UsuarioCreateNestedOneWithoutParceiroInput
    codigosCashback?: CodigoCashbackCreateNestedManyWithoutParceiroInput
  }

  export type ParceiroUncheckedCreateInput = {
    id?: string
    usuarioId: string
    nomeCidade: string
    comissaoMensal: number
    totalVendas?: number
    codigosGerados?: number
    codigosCashback?: CodigoCashbackUncheckedCreateNestedManyWithoutParceiroInput
  }

  export type ParceiroUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomeCidade?: StringFieldUpdateOperationsInput | string
    comissaoMensal?: FloatFieldUpdateOperationsInput | number
    totalVendas?: FloatFieldUpdateOperationsInput | number
    codigosGerados?: IntFieldUpdateOperationsInput | number
    usuario?: UsuarioUpdateOneRequiredWithoutParceiroNestedInput
    codigosCashback?: CodigoCashbackUpdateManyWithoutParceiroNestedInput
  }

  export type ParceiroUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    nomeCidade?: StringFieldUpdateOperationsInput | string
    comissaoMensal?: FloatFieldUpdateOperationsInput | number
    totalVendas?: FloatFieldUpdateOperationsInput | number
    codigosGerados?: IntFieldUpdateOperationsInput | number
    codigosCashback?: CodigoCashbackUncheckedUpdateManyWithoutParceiroNestedInput
  }

  export type ParceiroCreateManyInput = {
    id?: string
    usuarioId: string
    nomeCidade: string
    comissaoMensal: number
    totalVendas?: number
    codigosGerados?: number
  }

  export type ParceiroUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomeCidade?: StringFieldUpdateOperationsInput | string
    comissaoMensal?: FloatFieldUpdateOperationsInput | number
    totalVendas?: FloatFieldUpdateOperationsInput | number
    codigosGerados?: IntFieldUpdateOperationsInput | number
  }

  export type ParceiroUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    nomeCidade?: StringFieldUpdateOperationsInput | string
    comissaoMensal?: FloatFieldUpdateOperationsInput | number
    totalVendas?: FloatFieldUpdateOperationsInput | number
    codigosGerados?: IntFieldUpdateOperationsInput | number
  }

  export type SementeCreateInput = {
    id?: string
    quantidade: number
    tipo: string
    data?: Date | string
    descricao: string
    usuario: UsuarioCreateNestedOneWithoutSementesHistoricoInput
  }

  export type SementeUncheckedCreateInput = {
    id?: string
    usuarioId: string
    quantidade: number
    tipo: string
    data?: Date | string
    descricao: string
  }

  export type SementeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: StringFieldUpdateOperationsInput | string
    usuario?: UsuarioUpdateOneRequiredWithoutSementesHistoricoNestedInput
  }

  export type SementeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type SementeCreateManyInput = {
    id?: string
    usuarioId: string
    quantidade: number
    tipo: string
    data?: Date | string
    descricao: string
  }

  export type SementeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type SementeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type DoacaoCreateInput = {
    id?: string
    quantidade: number
    data?: Date | string
    mensagem?: string | null
    doador: UsuarioCreateNestedOneWithoutDoacoesFeitasInput
    criador: CriadorCreateNestedOneWithoutDoacoesRecebidasInput
  }

  export type DoacaoUncheckedCreateInput = {
    id?: string
    doadorId: string
    criadorId: string
    quantidade: number
    data?: Date | string
    mensagem?: string | null
  }

  export type DoacaoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    mensagem?: NullableStringFieldUpdateOperationsInput | string | null
    doador?: UsuarioUpdateOneRequiredWithoutDoacoesFeitasNestedInput
    criador?: CriadorUpdateOneRequiredWithoutDoacoesRecebidasNestedInput
  }

  export type DoacaoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    doadorId?: StringFieldUpdateOperationsInput | string
    criadorId?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    mensagem?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DoacaoCreateManyInput = {
    id?: string
    doadorId: string
    criadorId: string
    quantidade: number
    data?: Date | string
    mensagem?: string | null
  }

  export type DoacaoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    mensagem?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DoacaoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    doadorId?: StringFieldUpdateOperationsInput | string
    criadorId?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    mensagem?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TransacaoCreateInput = {
    id?: string
    tipo: string
    valor: number
    codigoParceiro?: string | null
    status?: string
    data?: Date | string
    usuario: UsuarioCreateNestedOneWithoutTransacoesInput
  }

  export type TransacaoUncheckedCreateInput = {
    id?: string
    usuarioId: string
    tipo: string
    valor: number
    codigoParceiro?: string | null
    status?: string
    data?: Date | string
  }

  export type TransacaoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    codigoParceiro?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UsuarioUpdateOneRequiredWithoutTransacoesNestedInput
  }

  export type TransacaoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    codigoParceiro?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransacaoCreateManyInput = {
    id?: string
    usuarioId: string
    tipo: string
    valor: number
    codigoParceiro?: string | null
    status?: string
    data?: Date | string
  }

  export type TransacaoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    codigoParceiro?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransacaoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    codigoParceiro?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CodigoCashbackCreateInput = {
    id?: string
    codigo: string
    valor: number
    usado?: boolean
    dataGeracao?: Date | string
    dataUso?: Date | string | null
    parceiro: ParceiroCreateNestedOneWithoutCodigosCashbackInput
  }

  export type CodigoCashbackUncheckedCreateInput = {
    id?: string
    parceiroId: string
    codigo: string
    valor: number
    usado?: boolean
    dataGeracao?: Date | string
    dataUso?: Date | string | null
  }

  export type CodigoCashbackUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    usado?: BoolFieldUpdateOperationsInput | boolean
    dataGeracao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataUso?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parceiro?: ParceiroUpdateOneRequiredWithoutCodigosCashbackNestedInput
  }

  export type CodigoCashbackUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    parceiroId?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    usado?: BoolFieldUpdateOperationsInput | boolean
    dataGeracao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataUso?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CodigoCashbackCreateManyInput = {
    id?: string
    parceiroId: string
    codigo: string
    valor: number
    usado?: boolean
    dataGeracao?: Date | string
    dataUso?: Date | string | null
  }

  export type CodigoCashbackUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    usado?: BoolFieldUpdateOperationsInput | boolean
    dataGeracao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataUso?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CodigoCashbackUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    parceiroId?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    usado?: BoolFieldUpdateOperationsInput | boolean
    dataGeracao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataUso?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NotificacaoCreateInput = {
    id?: string
    tipo: string
    titulo: string
    mensagem: string
    lida?: boolean
    data?: Date | string
    usuario: UsuarioCreateNestedOneWithoutNotificacoesInput
  }

  export type NotificacaoUncheckedCreateInput = {
    id?: string
    usuarioId: string
    tipo: string
    titulo: string
    mensagem: string
    lida?: boolean
    data?: Date | string
  }

  export type NotificacaoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    mensagem?: StringFieldUpdateOperationsInput | string
    lida?: BoolFieldUpdateOperationsInput | boolean
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UsuarioUpdateOneRequiredWithoutNotificacoesNestedInput
  }

  export type NotificacaoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    mensagem?: StringFieldUpdateOperationsInput | string
    lida?: BoolFieldUpdateOperationsInput | boolean
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificacaoCreateManyInput = {
    id?: string
    usuarioId: string
    tipo: string
    titulo: string
    mensagem: string
    lida?: boolean
    data?: Date | string
  }

  export type NotificacaoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    mensagem?: StringFieldUpdateOperationsInput | string
    lida?: BoolFieldUpdateOperationsInput | boolean
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificacaoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    mensagem?: StringFieldUpdateOperationsInput | string
    lida?: BoolFieldUpdateOperationsInput | boolean
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenRecuperacaoCreateInput = {
    id?: string
    token: string
    usado?: boolean
    expiraEm: Date | string
    dataCriacao?: Date | string
    usuario: UsuarioCreateNestedOneWithoutTokensRecuperacaoInput
  }

  export type TokenRecuperacaoUncheckedCreateInput = {
    id?: string
    usuarioId: string
    token: string
    usado?: boolean
    expiraEm: Date | string
    dataCriacao?: Date | string
  }

  export type TokenRecuperacaoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    usado?: BoolFieldUpdateOperationsInput | boolean
    expiraEm?: DateTimeFieldUpdateOperationsInput | Date | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UsuarioUpdateOneRequiredWithoutTokensRecuperacaoNestedInput
  }

  export type TokenRecuperacaoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    usado?: BoolFieldUpdateOperationsInput | boolean
    expiraEm?: DateTimeFieldUpdateOperationsInput | Date | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenRecuperacaoCreateManyInput = {
    id?: string
    usuarioId: string
    token: string
    usado?: boolean
    expiraEm: Date | string
    dataCriacao?: Date | string
  }

  export type TokenRecuperacaoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    usado?: BoolFieldUpdateOperationsInput | boolean
    expiraEm?: DateTimeFieldUpdateOperationsInput | Date | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenRecuperacaoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    usado?: BoolFieldUpdateOperationsInput | boolean
    expiraEm?: DateTimeFieldUpdateOperationsInput | Date | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CriadorNullableRelationFilter = {
    is?: CriadorWhereInput | null
    isNot?: CriadorWhereInput | null
  }

  export type ParceiroNullableRelationFilter = {
    is?: ParceiroWhereInput | null
    isNot?: ParceiroWhereInput | null
  }

  export type SementeListRelationFilter = {
    every?: SementeWhereInput
    some?: SementeWhereInput
    none?: SementeWhereInput
  }

  export type DoacaoListRelationFilter = {
    every?: DoacaoWhereInput
    some?: DoacaoWhereInput
    none?: DoacaoWhereInput
  }

  export type TransacaoListRelationFilter = {
    every?: TransacaoWhereInput
    some?: TransacaoWhereInput
    none?: TransacaoWhereInput
  }

  export type NotificacaoListRelationFilter = {
    every?: NotificacaoWhereInput
    some?: NotificacaoWhereInput
    none?: NotificacaoWhereInput
  }

  export type CandidaturaCriadorListRelationFilter = {
    every?: CandidaturaCriadorWhereInput
    some?: CandidaturaCriadorWhereInput
    none?: CandidaturaCriadorWhereInput
  }

  export type LogAuditoriaListRelationFilter = {
    every?: LogAuditoriaWhereInput
    some?: LogAuditoriaWhereInput
    none?: LogAuditoriaWhereInput
  }

  export type CarteiraDigitalNullableRelationFilter = {
    is?: CarteiraDigitalWhereInput | null
    isNot?: CarteiraDigitalWhereInput | null
  }

  export type DadosBancariosNullableRelationFilter = {
    is?: DadosBancariosWhereInput | null
    isNot?: DadosBancariosWhereInput | null
  }

  export type SaqueListRelationFilter = {
    every?: SaqueWhereInput
    some?: SaqueWhereInput
    none?: SaqueWhereInput
  }

  export type PagamentoListRelationFilter = {
    every?: PagamentoWhereInput
    some?: PagamentoWhereInput
    none?: PagamentoWhereInput
  }

  export type TokenRecuperacaoListRelationFilter = {
    every?: TokenRecuperacaoWhereInput
    some?: TokenRecuperacaoWhereInput
    none?: TokenRecuperacaoWhereInput
  }

  export type SementeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DoacaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TransacaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificacaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CandidaturaCriadorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LogAuditoriaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SaqueOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PagamentoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TokenRecuperacaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    tipo?: SortOrder
    sementes?: SortOrder
    nivel?: SortOrder
    pontuacao?: SortOrder
    dataCriacao?: SortOrder
    dataAtualizacao?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    sementes?: SortOrder
    pontuacao?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    tipo?: SortOrder
    sementes?: SortOrder
    nivel?: SortOrder
    pontuacao?: SortOrder
    dataCriacao?: SortOrder
    dataAtualizacao?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    tipo?: SortOrder
    sementes?: SortOrder
    nivel?: SortOrder
    pontuacao?: SortOrder
    dataCriacao?: SortOrder
    dataAtualizacao?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    sementes?: SortOrder
    pontuacao?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type UsuarioRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type MovimentacaoCarteiraListRelationFilter = {
    every?: MovimentacaoCarteiraWhereInput
    some?: MovimentacaoCarteiraWhereInput
    none?: MovimentacaoCarteiraWhereInput
  }

  export type MovimentacaoCarteiraOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CarteiraDigitalCountOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    saldo?: SortOrder
    saldoPendente?: SortOrder
    totalRecebido?: SortOrder
    totalSacado?: SortOrder
    dataCriacao?: SortOrder
    dataAtualizacao?: SortOrder
  }

  export type CarteiraDigitalAvgOrderByAggregateInput = {
    saldo?: SortOrder
    saldoPendente?: SortOrder
    totalRecebido?: SortOrder
    totalSacado?: SortOrder
  }

  export type CarteiraDigitalMaxOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    saldo?: SortOrder
    saldoPendente?: SortOrder
    totalRecebido?: SortOrder
    totalSacado?: SortOrder
    dataCriacao?: SortOrder
    dataAtualizacao?: SortOrder
  }

  export type CarteiraDigitalMinOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    saldo?: SortOrder
    saldoPendente?: SortOrder
    totalRecebido?: SortOrder
    totalSacado?: SortOrder
    dataCriacao?: SortOrder
    dataAtualizacao?: SortOrder
  }

  export type CarteiraDigitalSumOrderByAggregateInput = {
    saldo?: SortOrder
    saldoPendente?: SortOrder
    totalRecebido?: SortOrder
    totalSacado?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type CarteiraDigitalRelationFilter = {
    is?: CarteiraDigitalWhereInput
    isNot?: CarteiraDigitalWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type MovimentacaoCarteiraCountOrderByAggregateInput = {
    id?: SortOrder
    carteiraId?: SortOrder
    tipo?: SortOrder
    valor?: SortOrder
    saldoAnterior?: SortOrder
    saldoPosterior?: SortOrder
    descricao?: SortOrder
    referencia?: SortOrder
    status?: SortOrder
    data?: SortOrder
  }

  export type MovimentacaoCarteiraAvgOrderByAggregateInput = {
    valor?: SortOrder
    saldoAnterior?: SortOrder
    saldoPosterior?: SortOrder
  }

  export type MovimentacaoCarteiraMaxOrderByAggregateInput = {
    id?: SortOrder
    carteiraId?: SortOrder
    tipo?: SortOrder
    valor?: SortOrder
    saldoAnterior?: SortOrder
    saldoPosterior?: SortOrder
    descricao?: SortOrder
    referencia?: SortOrder
    status?: SortOrder
    data?: SortOrder
  }

  export type MovimentacaoCarteiraMinOrderByAggregateInput = {
    id?: SortOrder
    carteiraId?: SortOrder
    tipo?: SortOrder
    valor?: SortOrder
    saldoAnterior?: SortOrder
    saldoPosterior?: SortOrder
    descricao?: SortOrder
    referencia?: SortOrder
    status?: SortOrder
    data?: SortOrder
  }

  export type MovimentacaoCarteiraSumOrderByAggregateInput = {
    valor?: SortOrder
    saldoAnterior?: SortOrder
    saldoPosterior?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DadosBancariosCountOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    banco?: SortOrder
    agencia?: SortOrder
    conta?: SortOrder
    tipoConta?: SortOrder
    cpfCnpj?: SortOrder
    nomeTitular?: SortOrder
    validado?: SortOrder
    dataValidacao?: SortOrder
    dataCriacao?: SortOrder
    dataAtualizacao?: SortOrder
  }

  export type DadosBancariosMaxOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    banco?: SortOrder
    agencia?: SortOrder
    conta?: SortOrder
    tipoConta?: SortOrder
    cpfCnpj?: SortOrder
    nomeTitular?: SortOrder
    validado?: SortOrder
    dataValidacao?: SortOrder
    dataCriacao?: SortOrder
    dataAtualizacao?: SortOrder
  }

  export type DadosBancariosMinOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    banco?: SortOrder
    agencia?: SortOrder
    conta?: SortOrder
    tipoConta?: SortOrder
    cpfCnpj?: SortOrder
    nomeTitular?: SortOrder
    validado?: SortOrder
    dataValidacao?: SortOrder
    dataCriacao?: SortOrder
    dataAtualizacao?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type SaqueCountOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    valor?: SortOrder
    taxa?: SortOrder
    valorLiquido?: SortOrder
    dadosBancarios?: SortOrder
    status?: SortOrder
    motivoRejeicao?: SortOrder
    dataSolicitacao?: SortOrder
    dataProcessamento?: SortOrder
    dataConclusao?: SortOrder
    comprovante?: SortOrder
  }

  export type SaqueAvgOrderByAggregateInput = {
    valor?: SortOrder
    taxa?: SortOrder
    valorLiquido?: SortOrder
  }

  export type SaqueMaxOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    valor?: SortOrder
    taxa?: SortOrder
    valorLiquido?: SortOrder
    dadosBancarios?: SortOrder
    status?: SortOrder
    motivoRejeicao?: SortOrder
    dataSolicitacao?: SortOrder
    dataProcessamento?: SortOrder
    dataConclusao?: SortOrder
    comprovante?: SortOrder
  }

  export type SaqueMinOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    valor?: SortOrder
    taxa?: SortOrder
    valorLiquido?: SortOrder
    dadosBancarios?: SortOrder
    status?: SortOrder
    motivoRejeicao?: SortOrder
    dataSolicitacao?: SortOrder
    dataProcessamento?: SortOrder
    dataConclusao?: SortOrder
    comprovante?: SortOrder
  }

  export type SaqueSumOrderByAggregateInput = {
    valor?: SortOrder
    taxa?: SortOrder
    valorLiquido?: SortOrder
  }

  export type PagamentoCountOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipo?: SortOrder
    valor?: SortOrder
    sementesGeradas?: SortOrder
    gateway?: SortOrder
    gatewayId?: SortOrder
    status?: SortOrder
    dadosPagamento?: SortOrder
    dataPagamento?: SortOrder
    dataProcessamento?: SortOrder
  }

  export type PagamentoAvgOrderByAggregateInput = {
    valor?: SortOrder
    sementesGeradas?: SortOrder
  }

  export type PagamentoMaxOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipo?: SortOrder
    valor?: SortOrder
    sementesGeradas?: SortOrder
    gateway?: SortOrder
    gatewayId?: SortOrder
    status?: SortOrder
    dadosPagamento?: SortOrder
    dataPagamento?: SortOrder
    dataProcessamento?: SortOrder
  }

  export type PagamentoMinOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipo?: SortOrder
    valor?: SortOrder
    sementesGeradas?: SortOrder
    gateway?: SortOrder
    gatewayId?: SortOrder
    status?: SortOrder
    dadosPagamento?: SortOrder
    dataPagamento?: SortOrder
    dataProcessamento?: SortOrder
  }

  export type PagamentoSumOrderByAggregateInput = {
    valor?: SortOrder
    sementesGeradas?: SortOrder
  }

  export type CriadorCountOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    nome?: SortOrder
    bio?: SortOrder
    categoria?: SortOrder
    redesSociais?: SortOrder
    portfolio?: SortOrder
    nivel?: SortOrder
    sementes?: SortOrder
    apoiadores?: SortOrder
    doacoes?: SortOrder
    dataCriacao?: SortOrder
  }

  export type CriadorAvgOrderByAggregateInput = {
    sementes?: SortOrder
    apoiadores?: SortOrder
    doacoes?: SortOrder
  }

  export type CriadorMaxOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    nome?: SortOrder
    bio?: SortOrder
    categoria?: SortOrder
    redesSociais?: SortOrder
    portfolio?: SortOrder
    nivel?: SortOrder
    sementes?: SortOrder
    apoiadores?: SortOrder
    doacoes?: SortOrder
    dataCriacao?: SortOrder
  }

  export type CriadorMinOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    nome?: SortOrder
    bio?: SortOrder
    categoria?: SortOrder
    redesSociais?: SortOrder
    portfolio?: SortOrder
    nivel?: SortOrder
    sementes?: SortOrder
    apoiadores?: SortOrder
    doacoes?: SortOrder
    dataCriacao?: SortOrder
  }

  export type CriadorSumOrderByAggregateInput = {
    sementes?: SortOrder
    apoiadores?: SortOrder
    doacoes?: SortOrder
  }

  export type CandidaturaCriadorCountOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    bio?: SortOrder
    categoria?: SortOrder
    redesSociais?: SortOrder
    portfolio?: SortOrder
    experiencia?: SortOrder
    motivacao?: SortOrder
    metas?: SortOrder
    disponibilidade?: SortOrder
    status?: SortOrder
    dataCandidatura?: SortOrder
    dataRevisao?: SortOrder
    observacoes?: SortOrder
  }

  export type CandidaturaCriadorMaxOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    bio?: SortOrder
    categoria?: SortOrder
    redesSociais?: SortOrder
    portfolio?: SortOrder
    experiencia?: SortOrder
    motivacao?: SortOrder
    metas?: SortOrder
    disponibilidade?: SortOrder
    status?: SortOrder
    dataCandidatura?: SortOrder
    dataRevisao?: SortOrder
    observacoes?: SortOrder
  }

  export type CandidaturaCriadorMinOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    bio?: SortOrder
    categoria?: SortOrder
    redesSociais?: SortOrder
    portfolio?: SortOrder
    experiencia?: SortOrder
    motivacao?: SortOrder
    metas?: SortOrder
    disponibilidade?: SortOrder
    status?: SortOrder
    dataCandidatura?: SortOrder
    dataRevisao?: SortOrder
    observacoes?: SortOrder
  }

  export type LogAuditoriaCountOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    acao?: SortOrder
    detalhes?: SortOrder
    ip?: SortOrder
    userAgent?: SortOrder
    timestamp?: SortOrder
    nivel?: SortOrder
  }

  export type LogAuditoriaMaxOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    acao?: SortOrder
    detalhes?: SortOrder
    ip?: SortOrder
    userAgent?: SortOrder
    timestamp?: SortOrder
    nivel?: SortOrder
  }

  export type LogAuditoriaMinOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    acao?: SortOrder
    detalhes?: SortOrder
    ip?: SortOrder
    userAgent?: SortOrder
    timestamp?: SortOrder
    nivel?: SortOrder
  }

  export type CodigoCashbackListRelationFilter = {
    every?: CodigoCashbackWhereInput
    some?: CodigoCashbackWhereInput
    none?: CodigoCashbackWhereInput
  }

  export type CodigoCashbackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ParceiroCountOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    nomeCidade?: SortOrder
    comissaoMensal?: SortOrder
    totalVendas?: SortOrder
    codigosGerados?: SortOrder
  }

  export type ParceiroAvgOrderByAggregateInput = {
    comissaoMensal?: SortOrder
    totalVendas?: SortOrder
    codigosGerados?: SortOrder
  }

  export type ParceiroMaxOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    nomeCidade?: SortOrder
    comissaoMensal?: SortOrder
    totalVendas?: SortOrder
    codigosGerados?: SortOrder
  }

  export type ParceiroMinOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    nomeCidade?: SortOrder
    comissaoMensal?: SortOrder
    totalVendas?: SortOrder
    codigosGerados?: SortOrder
  }

  export type ParceiroSumOrderByAggregateInput = {
    comissaoMensal?: SortOrder
    totalVendas?: SortOrder
    codigosGerados?: SortOrder
  }

  export type SementeCountOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    quantidade?: SortOrder
    tipo?: SortOrder
    data?: SortOrder
    descricao?: SortOrder
  }

  export type SementeAvgOrderByAggregateInput = {
    quantidade?: SortOrder
  }

  export type SementeMaxOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    quantidade?: SortOrder
    tipo?: SortOrder
    data?: SortOrder
    descricao?: SortOrder
  }

  export type SementeMinOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    quantidade?: SortOrder
    tipo?: SortOrder
    data?: SortOrder
    descricao?: SortOrder
  }

  export type SementeSumOrderByAggregateInput = {
    quantidade?: SortOrder
  }

  export type CriadorRelationFilter = {
    is?: CriadorWhereInput
    isNot?: CriadorWhereInput
  }

  export type DoacaoCountOrderByAggregateInput = {
    id?: SortOrder
    doadorId?: SortOrder
    criadorId?: SortOrder
    quantidade?: SortOrder
    data?: SortOrder
    mensagem?: SortOrder
  }

  export type DoacaoAvgOrderByAggregateInput = {
    quantidade?: SortOrder
  }

  export type DoacaoMaxOrderByAggregateInput = {
    id?: SortOrder
    doadorId?: SortOrder
    criadorId?: SortOrder
    quantidade?: SortOrder
    data?: SortOrder
    mensagem?: SortOrder
  }

  export type DoacaoMinOrderByAggregateInput = {
    id?: SortOrder
    doadorId?: SortOrder
    criadorId?: SortOrder
    quantidade?: SortOrder
    data?: SortOrder
    mensagem?: SortOrder
  }

  export type DoacaoSumOrderByAggregateInput = {
    quantidade?: SortOrder
  }

  export type TransacaoCountOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipo?: SortOrder
    valor?: SortOrder
    codigoParceiro?: SortOrder
    status?: SortOrder
    data?: SortOrder
  }

  export type TransacaoAvgOrderByAggregateInput = {
    valor?: SortOrder
  }

  export type TransacaoMaxOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipo?: SortOrder
    valor?: SortOrder
    codigoParceiro?: SortOrder
    status?: SortOrder
    data?: SortOrder
  }

  export type TransacaoMinOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipo?: SortOrder
    valor?: SortOrder
    codigoParceiro?: SortOrder
    status?: SortOrder
    data?: SortOrder
  }

  export type TransacaoSumOrderByAggregateInput = {
    valor?: SortOrder
  }

  export type ParceiroRelationFilter = {
    is?: ParceiroWhereInput
    isNot?: ParceiroWhereInput
  }

  export type CodigoCashbackCountOrderByAggregateInput = {
    id?: SortOrder
    parceiroId?: SortOrder
    codigo?: SortOrder
    valor?: SortOrder
    usado?: SortOrder
    dataGeracao?: SortOrder
    dataUso?: SortOrder
  }

  export type CodigoCashbackAvgOrderByAggregateInput = {
    valor?: SortOrder
  }

  export type CodigoCashbackMaxOrderByAggregateInput = {
    id?: SortOrder
    parceiroId?: SortOrder
    codigo?: SortOrder
    valor?: SortOrder
    usado?: SortOrder
    dataGeracao?: SortOrder
    dataUso?: SortOrder
  }

  export type CodigoCashbackMinOrderByAggregateInput = {
    id?: SortOrder
    parceiroId?: SortOrder
    codigo?: SortOrder
    valor?: SortOrder
    usado?: SortOrder
    dataGeracao?: SortOrder
    dataUso?: SortOrder
  }

  export type CodigoCashbackSumOrderByAggregateInput = {
    valor?: SortOrder
  }

  export type NotificacaoCountOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipo?: SortOrder
    titulo?: SortOrder
    mensagem?: SortOrder
    lida?: SortOrder
    data?: SortOrder
  }

  export type NotificacaoMaxOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipo?: SortOrder
    titulo?: SortOrder
    mensagem?: SortOrder
    lida?: SortOrder
    data?: SortOrder
  }

  export type NotificacaoMinOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipo?: SortOrder
    titulo?: SortOrder
    mensagem?: SortOrder
    lida?: SortOrder
    data?: SortOrder
  }

  export type TokenRecuperacaoCountOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    token?: SortOrder
    usado?: SortOrder
    expiraEm?: SortOrder
    dataCriacao?: SortOrder
  }

  export type TokenRecuperacaoMaxOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    token?: SortOrder
    usado?: SortOrder
    expiraEm?: SortOrder
    dataCriacao?: SortOrder
  }

  export type TokenRecuperacaoMinOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    token?: SortOrder
    usado?: SortOrder
    expiraEm?: SortOrder
    dataCriacao?: SortOrder
  }

  export type CriadorCreateNestedOneWithoutUsuarioInput = {
    create?: XOR<CriadorCreateWithoutUsuarioInput, CriadorUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: CriadorCreateOrConnectWithoutUsuarioInput
    connect?: CriadorWhereUniqueInput
  }

  export type ParceiroCreateNestedOneWithoutUsuarioInput = {
    create?: XOR<ParceiroCreateWithoutUsuarioInput, ParceiroUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: ParceiroCreateOrConnectWithoutUsuarioInput
    connect?: ParceiroWhereUniqueInput
  }

  export type SementeCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<SementeCreateWithoutUsuarioInput, SementeUncheckedCreateWithoutUsuarioInput> | SementeCreateWithoutUsuarioInput[] | SementeUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: SementeCreateOrConnectWithoutUsuarioInput | SementeCreateOrConnectWithoutUsuarioInput[]
    createMany?: SementeCreateManyUsuarioInputEnvelope
    connect?: SementeWhereUniqueInput | SementeWhereUniqueInput[]
  }

  export type DoacaoCreateNestedManyWithoutDoadorInput = {
    create?: XOR<DoacaoCreateWithoutDoadorInput, DoacaoUncheckedCreateWithoutDoadorInput> | DoacaoCreateWithoutDoadorInput[] | DoacaoUncheckedCreateWithoutDoadorInput[]
    connectOrCreate?: DoacaoCreateOrConnectWithoutDoadorInput | DoacaoCreateOrConnectWithoutDoadorInput[]
    createMany?: DoacaoCreateManyDoadorInputEnvelope
    connect?: DoacaoWhereUniqueInput | DoacaoWhereUniqueInput[]
  }

  export type TransacaoCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<TransacaoCreateWithoutUsuarioInput, TransacaoUncheckedCreateWithoutUsuarioInput> | TransacaoCreateWithoutUsuarioInput[] | TransacaoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: TransacaoCreateOrConnectWithoutUsuarioInput | TransacaoCreateOrConnectWithoutUsuarioInput[]
    createMany?: TransacaoCreateManyUsuarioInputEnvelope
    connect?: TransacaoWhereUniqueInput | TransacaoWhereUniqueInput[]
  }

  export type NotificacaoCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<NotificacaoCreateWithoutUsuarioInput, NotificacaoUncheckedCreateWithoutUsuarioInput> | NotificacaoCreateWithoutUsuarioInput[] | NotificacaoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: NotificacaoCreateOrConnectWithoutUsuarioInput | NotificacaoCreateOrConnectWithoutUsuarioInput[]
    createMany?: NotificacaoCreateManyUsuarioInputEnvelope
    connect?: NotificacaoWhereUniqueInput | NotificacaoWhereUniqueInput[]
  }

  export type CandidaturaCriadorCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<CandidaturaCriadorCreateWithoutUsuarioInput, CandidaturaCriadorUncheckedCreateWithoutUsuarioInput> | CandidaturaCriadorCreateWithoutUsuarioInput[] | CandidaturaCriadorUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: CandidaturaCriadorCreateOrConnectWithoutUsuarioInput | CandidaturaCriadorCreateOrConnectWithoutUsuarioInput[]
    createMany?: CandidaturaCriadorCreateManyUsuarioInputEnvelope
    connect?: CandidaturaCriadorWhereUniqueInput | CandidaturaCriadorWhereUniqueInput[]
  }

  export type LogAuditoriaCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<LogAuditoriaCreateWithoutUsuarioInput, LogAuditoriaUncheckedCreateWithoutUsuarioInput> | LogAuditoriaCreateWithoutUsuarioInput[] | LogAuditoriaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: LogAuditoriaCreateOrConnectWithoutUsuarioInput | LogAuditoriaCreateOrConnectWithoutUsuarioInput[]
    createMany?: LogAuditoriaCreateManyUsuarioInputEnvelope
    connect?: LogAuditoriaWhereUniqueInput | LogAuditoriaWhereUniqueInput[]
  }

  export type CarteiraDigitalCreateNestedOneWithoutUsuarioInput = {
    create?: XOR<CarteiraDigitalCreateWithoutUsuarioInput, CarteiraDigitalUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: CarteiraDigitalCreateOrConnectWithoutUsuarioInput
    connect?: CarteiraDigitalWhereUniqueInput
  }

  export type DadosBancariosCreateNestedOneWithoutUsuarioInput = {
    create?: XOR<DadosBancariosCreateWithoutUsuarioInput, DadosBancariosUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: DadosBancariosCreateOrConnectWithoutUsuarioInput
    connect?: DadosBancariosWhereUniqueInput
  }

  export type SaqueCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<SaqueCreateWithoutUsuarioInput, SaqueUncheckedCreateWithoutUsuarioInput> | SaqueCreateWithoutUsuarioInput[] | SaqueUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: SaqueCreateOrConnectWithoutUsuarioInput | SaqueCreateOrConnectWithoutUsuarioInput[]
    createMany?: SaqueCreateManyUsuarioInputEnvelope
    connect?: SaqueWhereUniqueInput | SaqueWhereUniqueInput[]
  }

  export type PagamentoCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<PagamentoCreateWithoutUsuarioInput, PagamentoUncheckedCreateWithoutUsuarioInput> | PagamentoCreateWithoutUsuarioInput[] | PagamentoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: PagamentoCreateOrConnectWithoutUsuarioInput | PagamentoCreateOrConnectWithoutUsuarioInput[]
    createMany?: PagamentoCreateManyUsuarioInputEnvelope
    connect?: PagamentoWhereUniqueInput | PagamentoWhereUniqueInput[]
  }

  export type TokenRecuperacaoCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<TokenRecuperacaoCreateWithoutUsuarioInput, TokenRecuperacaoUncheckedCreateWithoutUsuarioInput> | TokenRecuperacaoCreateWithoutUsuarioInput[] | TokenRecuperacaoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: TokenRecuperacaoCreateOrConnectWithoutUsuarioInput | TokenRecuperacaoCreateOrConnectWithoutUsuarioInput[]
    createMany?: TokenRecuperacaoCreateManyUsuarioInputEnvelope
    connect?: TokenRecuperacaoWhereUniqueInput | TokenRecuperacaoWhereUniqueInput[]
  }

  export type CriadorUncheckedCreateNestedOneWithoutUsuarioInput = {
    create?: XOR<CriadorCreateWithoutUsuarioInput, CriadorUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: CriadorCreateOrConnectWithoutUsuarioInput
    connect?: CriadorWhereUniqueInput
  }

  export type ParceiroUncheckedCreateNestedOneWithoutUsuarioInput = {
    create?: XOR<ParceiroCreateWithoutUsuarioInput, ParceiroUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: ParceiroCreateOrConnectWithoutUsuarioInput
    connect?: ParceiroWhereUniqueInput
  }

  export type SementeUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<SementeCreateWithoutUsuarioInput, SementeUncheckedCreateWithoutUsuarioInput> | SementeCreateWithoutUsuarioInput[] | SementeUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: SementeCreateOrConnectWithoutUsuarioInput | SementeCreateOrConnectWithoutUsuarioInput[]
    createMany?: SementeCreateManyUsuarioInputEnvelope
    connect?: SementeWhereUniqueInput | SementeWhereUniqueInput[]
  }

  export type DoacaoUncheckedCreateNestedManyWithoutDoadorInput = {
    create?: XOR<DoacaoCreateWithoutDoadorInput, DoacaoUncheckedCreateWithoutDoadorInput> | DoacaoCreateWithoutDoadorInput[] | DoacaoUncheckedCreateWithoutDoadorInput[]
    connectOrCreate?: DoacaoCreateOrConnectWithoutDoadorInput | DoacaoCreateOrConnectWithoutDoadorInput[]
    createMany?: DoacaoCreateManyDoadorInputEnvelope
    connect?: DoacaoWhereUniqueInput | DoacaoWhereUniqueInput[]
  }

  export type TransacaoUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<TransacaoCreateWithoutUsuarioInput, TransacaoUncheckedCreateWithoutUsuarioInput> | TransacaoCreateWithoutUsuarioInput[] | TransacaoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: TransacaoCreateOrConnectWithoutUsuarioInput | TransacaoCreateOrConnectWithoutUsuarioInput[]
    createMany?: TransacaoCreateManyUsuarioInputEnvelope
    connect?: TransacaoWhereUniqueInput | TransacaoWhereUniqueInput[]
  }

  export type NotificacaoUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<NotificacaoCreateWithoutUsuarioInput, NotificacaoUncheckedCreateWithoutUsuarioInput> | NotificacaoCreateWithoutUsuarioInput[] | NotificacaoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: NotificacaoCreateOrConnectWithoutUsuarioInput | NotificacaoCreateOrConnectWithoutUsuarioInput[]
    createMany?: NotificacaoCreateManyUsuarioInputEnvelope
    connect?: NotificacaoWhereUniqueInput | NotificacaoWhereUniqueInput[]
  }

  export type CandidaturaCriadorUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<CandidaturaCriadorCreateWithoutUsuarioInput, CandidaturaCriadorUncheckedCreateWithoutUsuarioInput> | CandidaturaCriadorCreateWithoutUsuarioInput[] | CandidaturaCriadorUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: CandidaturaCriadorCreateOrConnectWithoutUsuarioInput | CandidaturaCriadorCreateOrConnectWithoutUsuarioInput[]
    createMany?: CandidaturaCriadorCreateManyUsuarioInputEnvelope
    connect?: CandidaturaCriadorWhereUniqueInput | CandidaturaCriadorWhereUniqueInput[]
  }

  export type LogAuditoriaUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<LogAuditoriaCreateWithoutUsuarioInput, LogAuditoriaUncheckedCreateWithoutUsuarioInput> | LogAuditoriaCreateWithoutUsuarioInput[] | LogAuditoriaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: LogAuditoriaCreateOrConnectWithoutUsuarioInput | LogAuditoriaCreateOrConnectWithoutUsuarioInput[]
    createMany?: LogAuditoriaCreateManyUsuarioInputEnvelope
    connect?: LogAuditoriaWhereUniqueInput | LogAuditoriaWhereUniqueInput[]
  }

  export type CarteiraDigitalUncheckedCreateNestedOneWithoutUsuarioInput = {
    create?: XOR<CarteiraDigitalCreateWithoutUsuarioInput, CarteiraDigitalUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: CarteiraDigitalCreateOrConnectWithoutUsuarioInput
    connect?: CarteiraDigitalWhereUniqueInput
  }

  export type DadosBancariosUncheckedCreateNestedOneWithoutUsuarioInput = {
    create?: XOR<DadosBancariosCreateWithoutUsuarioInput, DadosBancariosUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: DadosBancariosCreateOrConnectWithoutUsuarioInput
    connect?: DadosBancariosWhereUniqueInput
  }

  export type SaqueUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<SaqueCreateWithoutUsuarioInput, SaqueUncheckedCreateWithoutUsuarioInput> | SaqueCreateWithoutUsuarioInput[] | SaqueUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: SaqueCreateOrConnectWithoutUsuarioInput | SaqueCreateOrConnectWithoutUsuarioInput[]
    createMany?: SaqueCreateManyUsuarioInputEnvelope
    connect?: SaqueWhereUniqueInput | SaqueWhereUniqueInput[]
  }

  export type PagamentoUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<PagamentoCreateWithoutUsuarioInput, PagamentoUncheckedCreateWithoutUsuarioInput> | PagamentoCreateWithoutUsuarioInput[] | PagamentoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: PagamentoCreateOrConnectWithoutUsuarioInput | PagamentoCreateOrConnectWithoutUsuarioInput[]
    createMany?: PagamentoCreateManyUsuarioInputEnvelope
    connect?: PagamentoWhereUniqueInput | PagamentoWhereUniqueInput[]
  }

  export type TokenRecuperacaoUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<TokenRecuperacaoCreateWithoutUsuarioInput, TokenRecuperacaoUncheckedCreateWithoutUsuarioInput> | TokenRecuperacaoCreateWithoutUsuarioInput[] | TokenRecuperacaoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: TokenRecuperacaoCreateOrConnectWithoutUsuarioInput | TokenRecuperacaoCreateOrConnectWithoutUsuarioInput[]
    createMany?: TokenRecuperacaoCreateManyUsuarioInputEnvelope
    connect?: TokenRecuperacaoWhereUniqueInput | TokenRecuperacaoWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CriadorUpdateOneWithoutUsuarioNestedInput = {
    create?: XOR<CriadorCreateWithoutUsuarioInput, CriadorUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: CriadorCreateOrConnectWithoutUsuarioInput
    upsert?: CriadorUpsertWithoutUsuarioInput
    disconnect?: CriadorWhereInput | boolean
    delete?: CriadorWhereInput | boolean
    connect?: CriadorWhereUniqueInput
    update?: XOR<XOR<CriadorUpdateToOneWithWhereWithoutUsuarioInput, CriadorUpdateWithoutUsuarioInput>, CriadorUncheckedUpdateWithoutUsuarioInput>
  }

  export type ParceiroUpdateOneWithoutUsuarioNestedInput = {
    create?: XOR<ParceiroCreateWithoutUsuarioInput, ParceiroUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: ParceiroCreateOrConnectWithoutUsuarioInput
    upsert?: ParceiroUpsertWithoutUsuarioInput
    disconnect?: ParceiroWhereInput | boolean
    delete?: ParceiroWhereInput | boolean
    connect?: ParceiroWhereUniqueInput
    update?: XOR<XOR<ParceiroUpdateToOneWithWhereWithoutUsuarioInput, ParceiroUpdateWithoutUsuarioInput>, ParceiroUncheckedUpdateWithoutUsuarioInput>
  }

  export type SementeUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<SementeCreateWithoutUsuarioInput, SementeUncheckedCreateWithoutUsuarioInput> | SementeCreateWithoutUsuarioInput[] | SementeUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: SementeCreateOrConnectWithoutUsuarioInput | SementeCreateOrConnectWithoutUsuarioInput[]
    upsert?: SementeUpsertWithWhereUniqueWithoutUsuarioInput | SementeUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: SementeCreateManyUsuarioInputEnvelope
    set?: SementeWhereUniqueInput | SementeWhereUniqueInput[]
    disconnect?: SementeWhereUniqueInput | SementeWhereUniqueInput[]
    delete?: SementeWhereUniqueInput | SementeWhereUniqueInput[]
    connect?: SementeWhereUniqueInput | SementeWhereUniqueInput[]
    update?: SementeUpdateWithWhereUniqueWithoutUsuarioInput | SementeUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: SementeUpdateManyWithWhereWithoutUsuarioInput | SementeUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: SementeScalarWhereInput | SementeScalarWhereInput[]
  }

  export type DoacaoUpdateManyWithoutDoadorNestedInput = {
    create?: XOR<DoacaoCreateWithoutDoadorInput, DoacaoUncheckedCreateWithoutDoadorInput> | DoacaoCreateWithoutDoadorInput[] | DoacaoUncheckedCreateWithoutDoadorInput[]
    connectOrCreate?: DoacaoCreateOrConnectWithoutDoadorInput | DoacaoCreateOrConnectWithoutDoadorInput[]
    upsert?: DoacaoUpsertWithWhereUniqueWithoutDoadorInput | DoacaoUpsertWithWhereUniqueWithoutDoadorInput[]
    createMany?: DoacaoCreateManyDoadorInputEnvelope
    set?: DoacaoWhereUniqueInput | DoacaoWhereUniqueInput[]
    disconnect?: DoacaoWhereUniqueInput | DoacaoWhereUniqueInput[]
    delete?: DoacaoWhereUniqueInput | DoacaoWhereUniqueInput[]
    connect?: DoacaoWhereUniqueInput | DoacaoWhereUniqueInput[]
    update?: DoacaoUpdateWithWhereUniqueWithoutDoadorInput | DoacaoUpdateWithWhereUniqueWithoutDoadorInput[]
    updateMany?: DoacaoUpdateManyWithWhereWithoutDoadorInput | DoacaoUpdateManyWithWhereWithoutDoadorInput[]
    deleteMany?: DoacaoScalarWhereInput | DoacaoScalarWhereInput[]
  }

  export type TransacaoUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<TransacaoCreateWithoutUsuarioInput, TransacaoUncheckedCreateWithoutUsuarioInput> | TransacaoCreateWithoutUsuarioInput[] | TransacaoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: TransacaoCreateOrConnectWithoutUsuarioInput | TransacaoCreateOrConnectWithoutUsuarioInput[]
    upsert?: TransacaoUpsertWithWhereUniqueWithoutUsuarioInput | TransacaoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: TransacaoCreateManyUsuarioInputEnvelope
    set?: TransacaoWhereUniqueInput | TransacaoWhereUniqueInput[]
    disconnect?: TransacaoWhereUniqueInput | TransacaoWhereUniqueInput[]
    delete?: TransacaoWhereUniqueInput | TransacaoWhereUniqueInput[]
    connect?: TransacaoWhereUniqueInput | TransacaoWhereUniqueInput[]
    update?: TransacaoUpdateWithWhereUniqueWithoutUsuarioInput | TransacaoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: TransacaoUpdateManyWithWhereWithoutUsuarioInput | TransacaoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: TransacaoScalarWhereInput | TransacaoScalarWhereInput[]
  }

  export type NotificacaoUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<NotificacaoCreateWithoutUsuarioInput, NotificacaoUncheckedCreateWithoutUsuarioInput> | NotificacaoCreateWithoutUsuarioInput[] | NotificacaoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: NotificacaoCreateOrConnectWithoutUsuarioInput | NotificacaoCreateOrConnectWithoutUsuarioInput[]
    upsert?: NotificacaoUpsertWithWhereUniqueWithoutUsuarioInput | NotificacaoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: NotificacaoCreateManyUsuarioInputEnvelope
    set?: NotificacaoWhereUniqueInput | NotificacaoWhereUniqueInput[]
    disconnect?: NotificacaoWhereUniqueInput | NotificacaoWhereUniqueInput[]
    delete?: NotificacaoWhereUniqueInput | NotificacaoWhereUniqueInput[]
    connect?: NotificacaoWhereUniqueInput | NotificacaoWhereUniqueInput[]
    update?: NotificacaoUpdateWithWhereUniqueWithoutUsuarioInput | NotificacaoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: NotificacaoUpdateManyWithWhereWithoutUsuarioInput | NotificacaoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: NotificacaoScalarWhereInput | NotificacaoScalarWhereInput[]
  }

  export type CandidaturaCriadorUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<CandidaturaCriadorCreateWithoutUsuarioInput, CandidaturaCriadorUncheckedCreateWithoutUsuarioInput> | CandidaturaCriadorCreateWithoutUsuarioInput[] | CandidaturaCriadorUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: CandidaturaCriadorCreateOrConnectWithoutUsuarioInput | CandidaturaCriadorCreateOrConnectWithoutUsuarioInput[]
    upsert?: CandidaturaCriadorUpsertWithWhereUniqueWithoutUsuarioInput | CandidaturaCriadorUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: CandidaturaCriadorCreateManyUsuarioInputEnvelope
    set?: CandidaturaCriadorWhereUniqueInput | CandidaturaCriadorWhereUniqueInput[]
    disconnect?: CandidaturaCriadorWhereUniqueInput | CandidaturaCriadorWhereUniqueInput[]
    delete?: CandidaturaCriadorWhereUniqueInput | CandidaturaCriadorWhereUniqueInput[]
    connect?: CandidaturaCriadorWhereUniqueInput | CandidaturaCriadorWhereUniqueInput[]
    update?: CandidaturaCriadorUpdateWithWhereUniqueWithoutUsuarioInput | CandidaturaCriadorUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: CandidaturaCriadorUpdateManyWithWhereWithoutUsuarioInput | CandidaturaCriadorUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: CandidaturaCriadorScalarWhereInput | CandidaturaCriadorScalarWhereInput[]
  }

  export type LogAuditoriaUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<LogAuditoriaCreateWithoutUsuarioInput, LogAuditoriaUncheckedCreateWithoutUsuarioInput> | LogAuditoriaCreateWithoutUsuarioInput[] | LogAuditoriaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: LogAuditoriaCreateOrConnectWithoutUsuarioInput | LogAuditoriaCreateOrConnectWithoutUsuarioInput[]
    upsert?: LogAuditoriaUpsertWithWhereUniqueWithoutUsuarioInput | LogAuditoriaUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: LogAuditoriaCreateManyUsuarioInputEnvelope
    set?: LogAuditoriaWhereUniqueInput | LogAuditoriaWhereUniqueInput[]
    disconnect?: LogAuditoriaWhereUniqueInput | LogAuditoriaWhereUniqueInput[]
    delete?: LogAuditoriaWhereUniqueInput | LogAuditoriaWhereUniqueInput[]
    connect?: LogAuditoriaWhereUniqueInput | LogAuditoriaWhereUniqueInput[]
    update?: LogAuditoriaUpdateWithWhereUniqueWithoutUsuarioInput | LogAuditoriaUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: LogAuditoriaUpdateManyWithWhereWithoutUsuarioInput | LogAuditoriaUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: LogAuditoriaScalarWhereInput | LogAuditoriaScalarWhereInput[]
  }

  export type CarteiraDigitalUpdateOneWithoutUsuarioNestedInput = {
    create?: XOR<CarteiraDigitalCreateWithoutUsuarioInput, CarteiraDigitalUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: CarteiraDigitalCreateOrConnectWithoutUsuarioInput
    upsert?: CarteiraDigitalUpsertWithoutUsuarioInput
    disconnect?: CarteiraDigitalWhereInput | boolean
    delete?: CarteiraDigitalWhereInput | boolean
    connect?: CarteiraDigitalWhereUniqueInput
    update?: XOR<XOR<CarteiraDigitalUpdateToOneWithWhereWithoutUsuarioInput, CarteiraDigitalUpdateWithoutUsuarioInput>, CarteiraDigitalUncheckedUpdateWithoutUsuarioInput>
  }

  export type DadosBancariosUpdateOneWithoutUsuarioNestedInput = {
    create?: XOR<DadosBancariosCreateWithoutUsuarioInput, DadosBancariosUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: DadosBancariosCreateOrConnectWithoutUsuarioInput
    upsert?: DadosBancariosUpsertWithoutUsuarioInput
    disconnect?: DadosBancariosWhereInput | boolean
    delete?: DadosBancariosWhereInput | boolean
    connect?: DadosBancariosWhereUniqueInput
    update?: XOR<XOR<DadosBancariosUpdateToOneWithWhereWithoutUsuarioInput, DadosBancariosUpdateWithoutUsuarioInput>, DadosBancariosUncheckedUpdateWithoutUsuarioInput>
  }

  export type SaqueUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<SaqueCreateWithoutUsuarioInput, SaqueUncheckedCreateWithoutUsuarioInput> | SaqueCreateWithoutUsuarioInput[] | SaqueUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: SaqueCreateOrConnectWithoutUsuarioInput | SaqueCreateOrConnectWithoutUsuarioInput[]
    upsert?: SaqueUpsertWithWhereUniqueWithoutUsuarioInput | SaqueUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: SaqueCreateManyUsuarioInputEnvelope
    set?: SaqueWhereUniqueInput | SaqueWhereUniqueInput[]
    disconnect?: SaqueWhereUniqueInput | SaqueWhereUniqueInput[]
    delete?: SaqueWhereUniqueInput | SaqueWhereUniqueInput[]
    connect?: SaqueWhereUniqueInput | SaqueWhereUniqueInput[]
    update?: SaqueUpdateWithWhereUniqueWithoutUsuarioInput | SaqueUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: SaqueUpdateManyWithWhereWithoutUsuarioInput | SaqueUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: SaqueScalarWhereInput | SaqueScalarWhereInput[]
  }

  export type PagamentoUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<PagamentoCreateWithoutUsuarioInput, PagamentoUncheckedCreateWithoutUsuarioInput> | PagamentoCreateWithoutUsuarioInput[] | PagamentoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: PagamentoCreateOrConnectWithoutUsuarioInput | PagamentoCreateOrConnectWithoutUsuarioInput[]
    upsert?: PagamentoUpsertWithWhereUniqueWithoutUsuarioInput | PagamentoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: PagamentoCreateManyUsuarioInputEnvelope
    set?: PagamentoWhereUniqueInput | PagamentoWhereUniqueInput[]
    disconnect?: PagamentoWhereUniqueInput | PagamentoWhereUniqueInput[]
    delete?: PagamentoWhereUniqueInput | PagamentoWhereUniqueInput[]
    connect?: PagamentoWhereUniqueInput | PagamentoWhereUniqueInput[]
    update?: PagamentoUpdateWithWhereUniqueWithoutUsuarioInput | PagamentoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: PagamentoUpdateManyWithWhereWithoutUsuarioInput | PagamentoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: PagamentoScalarWhereInput | PagamentoScalarWhereInput[]
  }

  export type TokenRecuperacaoUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<TokenRecuperacaoCreateWithoutUsuarioInput, TokenRecuperacaoUncheckedCreateWithoutUsuarioInput> | TokenRecuperacaoCreateWithoutUsuarioInput[] | TokenRecuperacaoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: TokenRecuperacaoCreateOrConnectWithoutUsuarioInput | TokenRecuperacaoCreateOrConnectWithoutUsuarioInput[]
    upsert?: TokenRecuperacaoUpsertWithWhereUniqueWithoutUsuarioInput | TokenRecuperacaoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: TokenRecuperacaoCreateManyUsuarioInputEnvelope
    set?: TokenRecuperacaoWhereUniqueInput | TokenRecuperacaoWhereUniqueInput[]
    disconnect?: TokenRecuperacaoWhereUniqueInput | TokenRecuperacaoWhereUniqueInput[]
    delete?: TokenRecuperacaoWhereUniqueInput | TokenRecuperacaoWhereUniqueInput[]
    connect?: TokenRecuperacaoWhereUniqueInput | TokenRecuperacaoWhereUniqueInput[]
    update?: TokenRecuperacaoUpdateWithWhereUniqueWithoutUsuarioInput | TokenRecuperacaoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: TokenRecuperacaoUpdateManyWithWhereWithoutUsuarioInput | TokenRecuperacaoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: TokenRecuperacaoScalarWhereInput | TokenRecuperacaoScalarWhereInput[]
  }

  export type CriadorUncheckedUpdateOneWithoutUsuarioNestedInput = {
    create?: XOR<CriadorCreateWithoutUsuarioInput, CriadorUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: CriadorCreateOrConnectWithoutUsuarioInput
    upsert?: CriadorUpsertWithoutUsuarioInput
    disconnect?: CriadorWhereInput | boolean
    delete?: CriadorWhereInput | boolean
    connect?: CriadorWhereUniqueInput
    update?: XOR<XOR<CriadorUpdateToOneWithWhereWithoutUsuarioInput, CriadorUpdateWithoutUsuarioInput>, CriadorUncheckedUpdateWithoutUsuarioInput>
  }

  export type ParceiroUncheckedUpdateOneWithoutUsuarioNestedInput = {
    create?: XOR<ParceiroCreateWithoutUsuarioInput, ParceiroUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: ParceiroCreateOrConnectWithoutUsuarioInput
    upsert?: ParceiroUpsertWithoutUsuarioInput
    disconnect?: ParceiroWhereInput | boolean
    delete?: ParceiroWhereInput | boolean
    connect?: ParceiroWhereUniqueInput
    update?: XOR<XOR<ParceiroUpdateToOneWithWhereWithoutUsuarioInput, ParceiroUpdateWithoutUsuarioInput>, ParceiroUncheckedUpdateWithoutUsuarioInput>
  }

  export type SementeUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<SementeCreateWithoutUsuarioInput, SementeUncheckedCreateWithoutUsuarioInput> | SementeCreateWithoutUsuarioInput[] | SementeUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: SementeCreateOrConnectWithoutUsuarioInput | SementeCreateOrConnectWithoutUsuarioInput[]
    upsert?: SementeUpsertWithWhereUniqueWithoutUsuarioInput | SementeUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: SementeCreateManyUsuarioInputEnvelope
    set?: SementeWhereUniqueInput | SementeWhereUniqueInput[]
    disconnect?: SementeWhereUniqueInput | SementeWhereUniqueInput[]
    delete?: SementeWhereUniqueInput | SementeWhereUniqueInput[]
    connect?: SementeWhereUniqueInput | SementeWhereUniqueInput[]
    update?: SementeUpdateWithWhereUniqueWithoutUsuarioInput | SementeUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: SementeUpdateManyWithWhereWithoutUsuarioInput | SementeUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: SementeScalarWhereInput | SementeScalarWhereInput[]
  }

  export type DoacaoUncheckedUpdateManyWithoutDoadorNestedInput = {
    create?: XOR<DoacaoCreateWithoutDoadorInput, DoacaoUncheckedCreateWithoutDoadorInput> | DoacaoCreateWithoutDoadorInput[] | DoacaoUncheckedCreateWithoutDoadorInput[]
    connectOrCreate?: DoacaoCreateOrConnectWithoutDoadorInput | DoacaoCreateOrConnectWithoutDoadorInput[]
    upsert?: DoacaoUpsertWithWhereUniqueWithoutDoadorInput | DoacaoUpsertWithWhereUniqueWithoutDoadorInput[]
    createMany?: DoacaoCreateManyDoadorInputEnvelope
    set?: DoacaoWhereUniqueInput | DoacaoWhereUniqueInput[]
    disconnect?: DoacaoWhereUniqueInput | DoacaoWhereUniqueInput[]
    delete?: DoacaoWhereUniqueInput | DoacaoWhereUniqueInput[]
    connect?: DoacaoWhereUniqueInput | DoacaoWhereUniqueInput[]
    update?: DoacaoUpdateWithWhereUniqueWithoutDoadorInput | DoacaoUpdateWithWhereUniqueWithoutDoadorInput[]
    updateMany?: DoacaoUpdateManyWithWhereWithoutDoadorInput | DoacaoUpdateManyWithWhereWithoutDoadorInput[]
    deleteMany?: DoacaoScalarWhereInput | DoacaoScalarWhereInput[]
  }

  export type TransacaoUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<TransacaoCreateWithoutUsuarioInput, TransacaoUncheckedCreateWithoutUsuarioInput> | TransacaoCreateWithoutUsuarioInput[] | TransacaoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: TransacaoCreateOrConnectWithoutUsuarioInput | TransacaoCreateOrConnectWithoutUsuarioInput[]
    upsert?: TransacaoUpsertWithWhereUniqueWithoutUsuarioInput | TransacaoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: TransacaoCreateManyUsuarioInputEnvelope
    set?: TransacaoWhereUniqueInput | TransacaoWhereUniqueInput[]
    disconnect?: TransacaoWhereUniqueInput | TransacaoWhereUniqueInput[]
    delete?: TransacaoWhereUniqueInput | TransacaoWhereUniqueInput[]
    connect?: TransacaoWhereUniqueInput | TransacaoWhereUniqueInput[]
    update?: TransacaoUpdateWithWhereUniqueWithoutUsuarioInput | TransacaoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: TransacaoUpdateManyWithWhereWithoutUsuarioInput | TransacaoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: TransacaoScalarWhereInput | TransacaoScalarWhereInput[]
  }

  export type NotificacaoUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<NotificacaoCreateWithoutUsuarioInput, NotificacaoUncheckedCreateWithoutUsuarioInput> | NotificacaoCreateWithoutUsuarioInput[] | NotificacaoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: NotificacaoCreateOrConnectWithoutUsuarioInput | NotificacaoCreateOrConnectWithoutUsuarioInput[]
    upsert?: NotificacaoUpsertWithWhereUniqueWithoutUsuarioInput | NotificacaoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: NotificacaoCreateManyUsuarioInputEnvelope
    set?: NotificacaoWhereUniqueInput | NotificacaoWhereUniqueInput[]
    disconnect?: NotificacaoWhereUniqueInput | NotificacaoWhereUniqueInput[]
    delete?: NotificacaoWhereUniqueInput | NotificacaoWhereUniqueInput[]
    connect?: NotificacaoWhereUniqueInput | NotificacaoWhereUniqueInput[]
    update?: NotificacaoUpdateWithWhereUniqueWithoutUsuarioInput | NotificacaoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: NotificacaoUpdateManyWithWhereWithoutUsuarioInput | NotificacaoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: NotificacaoScalarWhereInput | NotificacaoScalarWhereInput[]
  }

  export type CandidaturaCriadorUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<CandidaturaCriadorCreateWithoutUsuarioInput, CandidaturaCriadorUncheckedCreateWithoutUsuarioInput> | CandidaturaCriadorCreateWithoutUsuarioInput[] | CandidaturaCriadorUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: CandidaturaCriadorCreateOrConnectWithoutUsuarioInput | CandidaturaCriadorCreateOrConnectWithoutUsuarioInput[]
    upsert?: CandidaturaCriadorUpsertWithWhereUniqueWithoutUsuarioInput | CandidaturaCriadorUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: CandidaturaCriadorCreateManyUsuarioInputEnvelope
    set?: CandidaturaCriadorWhereUniqueInput | CandidaturaCriadorWhereUniqueInput[]
    disconnect?: CandidaturaCriadorWhereUniqueInput | CandidaturaCriadorWhereUniqueInput[]
    delete?: CandidaturaCriadorWhereUniqueInput | CandidaturaCriadorWhereUniqueInput[]
    connect?: CandidaturaCriadorWhereUniqueInput | CandidaturaCriadorWhereUniqueInput[]
    update?: CandidaturaCriadorUpdateWithWhereUniqueWithoutUsuarioInput | CandidaturaCriadorUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: CandidaturaCriadorUpdateManyWithWhereWithoutUsuarioInput | CandidaturaCriadorUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: CandidaturaCriadorScalarWhereInput | CandidaturaCriadorScalarWhereInput[]
  }

  export type LogAuditoriaUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<LogAuditoriaCreateWithoutUsuarioInput, LogAuditoriaUncheckedCreateWithoutUsuarioInput> | LogAuditoriaCreateWithoutUsuarioInput[] | LogAuditoriaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: LogAuditoriaCreateOrConnectWithoutUsuarioInput | LogAuditoriaCreateOrConnectWithoutUsuarioInput[]
    upsert?: LogAuditoriaUpsertWithWhereUniqueWithoutUsuarioInput | LogAuditoriaUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: LogAuditoriaCreateManyUsuarioInputEnvelope
    set?: LogAuditoriaWhereUniqueInput | LogAuditoriaWhereUniqueInput[]
    disconnect?: LogAuditoriaWhereUniqueInput | LogAuditoriaWhereUniqueInput[]
    delete?: LogAuditoriaWhereUniqueInput | LogAuditoriaWhereUniqueInput[]
    connect?: LogAuditoriaWhereUniqueInput | LogAuditoriaWhereUniqueInput[]
    update?: LogAuditoriaUpdateWithWhereUniqueWithoutUsuarioInput | LogAuditoriaUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: LogAuditoriaUpdateManyWithWhereWithoutUsuarioInput | LogAuditoriaUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: LogAuditoriaScalarWhereInput | LogAuditoriaScalarWhereInput[]
  }

  export type CarteiraDigitalUncheckedUpdateOneWithoutUsuarioNestedInput = {
    create?: XOR<CarteiraDigitalCreateWithoutUsuarioInput, CarteiraDigitalUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: CarteiraDigitalCreateOrConnectWithoutUsuarioInput
    upsert?: CarteiraDigitalUpsertWithoutUsuarioInput
    disconnect?: CarteiraDigitalWhereInput | boolean
    delete?: CarteiraDigitalWhereInput | boolean
    connect?: CarteiraDigitalWhereUniqueInput
    update?: XOR<XOR<CarteiraDigitalUpdateToOneWithWhereWithoutUsuarioInput, CarteiraDigitalUpdateWithoutUsuarioInput>, CarteiraDigitalUncheckedUpdateWithoutUsuarioInput>
  }

  export type DadosBancariosUncheckedUpdateOneWithoutUsuarioNestedInput = {
    create?: XOR<DadosBancariosCreateWithoutUsuarioInput, DadosBancariosUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: DadosBancariosCreateOrConnectWithoutUsuarioInput
    upsert?: DadosBancariosUpsertWithoutUsuarioInput
    disconnect?: DadosBancariosWhereInput | boolean
    delete?: DadosBancariosWhereInput | boolean
    connect?: DadosBancariosWhereUniqueInput
    update?: XOR<XOR<DadosBancariosUpdateToOneWithWhereWithoutUsuarioInput, DadosBancariosUpdateWithoutUsuarioInput>, DadosBancariosUncheckedUpdateWithoutUsuarioInput>
  }

  export type SaqueUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<SaqueCreateWithoutUsuarioInput, SaqueUncheckedCreateWithoutUsuarioInput> | SaqueCreateWithoutUsuarioInput[] | SaqueUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: SaqueCreateOrConnectWithoutUsuarioInput | SaqueCreateOrConnectWithoutUsuarioInput[]
    upsert?: SaqueUpsertWithWhereUniqueWithoutUsuarioInput | SaqueUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: SaqueCreateManyUsuarioInputEnvelope
    set?: SaqueWhereUniqueInput | SaqueWhereUniqueInput[]
    disconnect?: SaqueWhereUniqueInput | SaqueWhereUniqueInput[]
    delete?: SaqueWhereUniqueInput | SaqueWhereUniqueInput[]
    connect?: SaqueWhereUniqueInput | SaqueWhereUniqueInput[]
    update?: SaqueUpdateWithWhereUniqueWithoutUsuarioInput | SaqueUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: SaqueUpdateManyWithWhereWithoutUsuarioInput | SaqueUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: SaqueScalarWhereInput | SaqueScalarWhereInput[]
  }

  export type PagamentoUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<PagamentoCreateWithoutUsuarioInput, PagamentoUncheckedCreateWithoutUsuarioInput> | PagamentoCreateWithoutUsuarioInput[] | PagamentoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: PagamentoCreateOrConnectWithoutUsuarioInput | PagamentoCreateOrConnectWithoutUsuarioInput[]
    upsert?: PagamentoUpsertWithWhereUniqueWithoutUsuarioInput | PagamentoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: PagamentoCreateManyUsuarioInputEnvelope
    set?: PagamentoWhereUniqueInput | PagamentoWhereUniqueInput[]
    disconnect?: PagamentoWhereUniqueInput | PagamentoWhereUniqueInput[]
    delete?: PagamentoWhereUniqueInput | PagamentoWhereUniqueInput[]
    connect?: PagamentoWhereUniqueInput | PagamentoWhereUniqueInput[]
    update?: PagamentoUpdateWithWhereUniqueWithoutUsuarioInput | PagamentoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: PagamentoUpdateManyWithWhereWithoutUsuarioInput | PagamentoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: PagamentoScalarWhereInput | PagamentoScalarWhereInput[]
  }

  export type TokenRecuperacaoUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<TokenRecuperacaoCreateWithoutUsuarioInput, TokenRecuperacaoUncheckedCreateWithoutUsuarioInput> | TokenRecuperacaoCreateWithoutUsuarioInput[] | TokenRecuperacaoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: TokenRecuperacaoCreateOrConnectWithoutUsuarioInput | TokenRecuperacaoCreateOrConnectWithoutUsuarioInput[]
    upsert?: TokenRecuperacaoUpsertWithWhereUniqueWithoutUsuarioInput | TokenRecuperacaoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: TokenRecuperacaoCreateManyUsuarioInputEnvelope
    set?: TokenRecuperacaoWhereUniqueInput | TokenRecuperacaoWhereUniqueInput[]
    disconnect?: TokenRecuperacaoWhereUniqueInput | TokenRecuperacaoWhereUniqueInput[]
    delete?: TokenRecuperacaoWhereUniqueInput | TokenRecuperacaoWhereUniqueInput[]
    connect?: TokenRecuperacaoWhereUniqueInput | TokenRecuperacaoWhereUniqueInput[]
    update?: TokenRecuperacaoUpdateWithWhereUniqueWithoutUsuarioInput | TokenRecuperacaoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: TokenRecuperacaoUpdateManyWithWhereWithoutUsuarioInput | TokenRecuperacaoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: TokenRecuperacaoScalarWhereInput | TokenRecuperacaoScalarWhereInput[]
  }

  export type UsuarioCreateNestedOneWithoutCarteiraInput = {
    create?: XOR<UsuarioCreateWithoutCarteiraInput, UsuarioUncheckedCreateWithoutCarteiraInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutCarteiraInput
    connect?: UsuarioWhereUniqueInput
  }

  export type MovimentacaoCarteiraCreateNestedManyWithoutCarteiraInput = {
    create?: XOR<MovimentacaoCarteiraCreateWithoutCarteiraInput, MovimentacaoCarteiraUncheckedCreateWithoutCarteiraInput> | MovimentacaoCarteiraCreateWithoutCarteiraInput[] | MovimentacaoCarteiraUncheckedCreateWithoutCarteiraInput[]
    connectOrCreate?: MovimentacaoCarteiraCreateOrConnectWithoutCarteiraInput | MovimentacaoCarteiraCreateOrConnectWithoutCarteiraInput[]
    createMany?: MovimentacaoCarteiraCreateManyCarteiraInputEnvelope
    connect?: MovimentacaoCarteiraWhereUniqueInput | MovimentacaoCarteiraWhereUniqueInput[]
  }

  export type MovimentacaoCarteiraUncheckedCreateNestedManyWithoutCarteiraInput = {
    create?: XOR<MovimentacaoCarteiraCreateWithoutCarteiraInput, MovimentacaoCarteiraUncheckedCreateWithoutCarteiraInput> | MovimentacaoCarteiraCreateWithoutCarteiraInput[] | MovimentacaoCarteiraUncheckedCreateWithoutCarteiraInput[]
    connectOrCreate?: MovimentacaoCarteiraCreateOrConnectWithoutCarteiraInput | MovimentacaoCarteiraCreateOrConnectWithoutCarteiraInput[]
    createMany?: MovimentacaoCarteiraCreateManyCarteiraInputEnvelope
    connect?: MovimentacaoCarteiraWhereUniqueInput | MovimentacaoCarteiraWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UsuarioUpdateOneRequiredWithoutCarteiraNestedInput = {
    create?: XOR<UsuarioCreateWithoutCarteiraInput, UsuarioUncheckedCreateWithoutCarteiraInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutCarteiraInput
    upsert?: UsuarioUpsertWithoutCarteiraInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutCarteiraInput, UsuarioUpdateWithoutCarteiraInput>, UsuarioUncheckedUpdateWithoutCarteiraInput>
  }

  export type MovimentacaoCarteiraUpdateManyWithoutCarteiraNestedInput = {
    create?: XOR<MovimentacaoCarteiraCreateWithoutCarteiraInput, MovimentacaoCarteiraUncheckedCreateWithoutCarteiraInput> | MovimentacaoCarteiraCreateWithoutCarteiraInput[] | MovimentacaoCarteiraUncheckedCreateWithoutCarteiraInput[]
    connectOrCreate?: MovimentacaoCarteiraCreateOrConnectWithoutCarteiraInput | MovimentacaoCarteiraCreateOrConnectWithoutCarteiraInput[]
    upsert?: MovimentacaoCarteiraUpsertWithWhereUniqueWithoutCarteiraInput | MovimentacaoCarteiraUpsertWithWhereUniqueWithoutCarteiraInput[]
    createMany?: MovimentacaoCarteiraCreateManyCarteiraInputEnvelope
    set?: MovimentacaoCarteiraWhereUniqueInput | MovimentacaoCarteiraWhereUniqueInput[]
    disconnect?: MovimentacaoCarteiraWhereUniqueInput | MovimentacaoCarteiraWhereUniqueInput[]
    delete?: MovimentacaoCarteiraWhereUniqueInput | MovimentacaoCarteiraWhereUniqueInput[]
    connect?: MovimentacaoCarteiraWhereUniqueInput | MovimentacaoCarteiraWhereUniqueInput[]
    update?: MovimentacaoCarteiraUpdateWithWhereUniqueWithoutCarteiraInput | MovimentacaoCarteiraUpdateWithWhereUniqueWithoutCarteiraInput[]
    updateMany?: MovimentacaoCarteiraUpdateManyWithWhereWithoutCarteiraInput | MovimentacaoCarteiraUpdateManyWithWhereWithoutCarteiraInput[]
    deleteMany?: MovimentacaoCarteiraScalarWhereInput | MovimentacaoCarteiraScalarWhereInput[]
  }

  export type MovimentacaoCarteiraUncheckedUpdateManyWithoutCarteiraNestedInput = {
    create?: XOR<MovimentacaoCarteiraCreateWithoutCarteiraInput, MovimentacaoCarteiraUncheckedCreateWithoutCarteiraInput> | MovimentacaoCarteiraCreateWithoutCarteiraInput[] | MovimentacaoCarteiraUncheckedCreateWithoutCarteiraInput[]
    connectOrCreate?: MovimentacaoCarteiraCreateOrConnectWithoutCarteiraInput | MovimentacaoCarteiraCreateOrConnectWithoutCarteiraInput[]
    upsert?: MovimentacaoCarteiraUpsertWithWhereUniqueWithoutCarteiraInput | MovimentacaoCarteiraUpsertWithWhereUniqueWithoutCarteiraInput[]
    createMany?: MovimentacaoCarteiraCreateManyCarteiraInputEnvelope
    set?: MovimentacaoCarteiraWhereUniqueInput | MovimentacaoCarteiraWhereUniqueInput[]
    disconnect?: MovimentacaoCarteiraWhereUniqueInput | MovimentacaoCarteiraWhereUniqueInput[]
    delete?: MovimentacaoCarteiraWhereUniqueInput | MovimentacaoCarteiraWhereUniqueInput[]
    connect?: MovimentacaoCarteiraWhereUniqueInput | MovimentacaoCarteiraWhereUniqueInput[]
    update?: MovimentacaoCarteiraUpdateWithWhereUniqueWithoutCarteiraInput | MovimentacaoCarteiraUpdateWithWhereUniqueWithoutCarteiraInput[]
    updateMany?: MovimentacaoCarteiraUpdateManyWithWhereWithoutCarteiraInput | MovimentacaoCarteiraUpdateManyWithWhereWithoutCarteiraInput[]
    deleteMany?: MovimentacaoCarteiraScalarWhereInput | MovimentacaoCarteiraScalarWhereInput[]
  }

  export type CarteiraDigitalCreateNestedOneWithoutMovimentacoesInput = {
    create?: XOR<CarteiraDigitalCreateWithoutMovimentacoesInput, CarteiraDigitalUncheckedCreateWithoutMovimentacoesInput>
    connectOrCreate?: CarteiraDigitalCreateOrConnectWithoutMovimentacoesInput
    connect?: CarteiraDigitalWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type CarteiraDigitalUpdateOneRequiredWithoutMovimentacoesNestedInput = {
    create?: XOR<CarteiraDigitalCreateWithoutMovimentacoesInput, CarteiraDigitalUncheckedCreateWithoutMovimentacoesInput>
    connectOrCreate?: CarteiraDigitalCreateOrConnectWithoutMovimentacoesInput
    upsert?: CarteiraDigitalUpsertWithoutMovimentacoesInput
    connect?: CarteiraDigitalWhereUniqueInput
    update?: XOR<XOR<CarteiraDigitalUpdateToOneWithWhereWithoutMovimentacoesInput, CarteiraDigitalUpdateWithoutMovimentacoesInput>, CarteiraDigitalUncheckedUpdateWithoutMovimentacoesInput>
  }

  export type UsuarioCreateNestedOneWithoutDadosBancariosInput = {
    create?: XOR<UsuarioCreateWithoutDadosBancariosInput, UsuarioUncheckedCreateWithoutDadosBancariosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutDadosBancariosInput
    connect?: UsuarioWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UsuarioUpdateOneRequiredWithoutDadosBancariosNestedInput = {
    create?: XOR<UsuarioCreateWithoutDadosBancariosInput, UsuarioUncheckedCreateWithoutDadosBancariosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutDadosBancariosInput
    upsert?: UsuarioUpsertWithoutDadosBancariosInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutDadosBancariosInput, UsuarioUpdateWithoutDadosBancariosInput>, UsuarioUncheckedUpdateWithoutDadosBancariosInput>
  }

  export type UsuarioCreateNestedOneWithoutSaquesInput = {
    create?: XOR<UsuarioCreateWithoutSaquesInput, UsuarioUncheckedCreateWithoutSaquesInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutSaquesInput
    connect?: UsuarioWhereUniqueInput
  }

  export type UsuarioUpdateOneRequiredWithoutSaquesNestedInput = {
    create?: XOR<UsuarioCreateWithoutSaquesInput, UsuarioUncheckedCreateWithoutSaquesInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutSaquesInput
    upsert?: UsuarioUpsertWithoutSaquesInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutSaquesInput, UsuarioUpdateWithoutSaquesInput>, UsuarioUncheckedUpdateWithoutSaquesInput>
  }

  export type UsuarioCreateNestedOneWithoutPagamentosInput = {
    create?: XOR<UsuarioCreateWithoutPagamentosInput, UsuarioUncheckedCreateWithoutPagamentosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutPagamentosInput
    connect?: UsuarioWhereUniqueInput
  }

  export type UsuarioUpdateOneRequiredWithoutPagamentosNestedInput = {
    create?: XOR<UsuarioCreateWithoutPagamentosInput, UsuarioUncheckedCreateWithoutPagamentosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutPagamentosInput
    upsert?: UsuarioUpsertWithoutPagamentosInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutPagamentosInput, UsuarioUpdateWithoutPagamentosInput>, UsuarioUncheckedUpdateWithoutPagamentosInput>
  }

  export type UsuarioCreateNestedOneWithoutCriadorInput = {
    create?: XOR<UsuarioCreateWithoutCriadorInput, UsuarioUncheckedCreateWithoutCriadorInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutCriadorInput
    connect?: UsuarioWhereUniqueInput
  }

  export type DoacaoCreateNestedManyWithoutCriadorInput = {
    create?: XOR<DoacaoCreateWithoutCriadorInput, DoacaoUncheckedCreateWithoutCriadorInput> | DoacaoCreateWithoutCriadorInput[] | DoacaoUncheckedCreateWithoutCriadorInput[]
    connectOrCreate?: DoacaoCreateOrConnectWithoutCriadorInput | DoacaoCreateOrConnectWithoutCriadorInput[]
    createMany?: DoacaoCreateManyCriadorInputEnvelope
    connect?: DoacaoWhereUniqueInput | DoacaoWhereUniqueInput[]
  }

  export type DoacaoUncheckedCreateNestedManyWithoutCriadorInput = {
    create?: XOR<DoacaoCreateWithoutCriadorInput, DoacaoUncheckedCreateWithoutCriadorInput> | DoacaoCreateWithoutCriadorInput[] | DoacaoUncheckedCreateWithoutCriadorInput[]
    connectOrCreate?: DoacaoCreateOrConnectWithoutCriadorInput | DoacaoCreateOrConnectWithoutCriadorInput[]
    createMany?: DoacaoCreateManyCriadorInputEnvelope
    connect?: DoacaoWhereUniqueInput | DoacaoWhereUniqueInput[]
  }

  export type UsuarioUpdateOneRequiredWithoutCriadorNestedInput = {
    create?: XOR<UsuarioCreateWithoutCriadorInput, UsuarioUncheckedCreateWithoutCriadorInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutCriadorInput
    upsert?: UsuarioUpsertWithoutCriadorInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutCriadorInput, UsuarioUpdateWithoutCriadorInput>, UsuarioUncheckedUpdateWithoutCriadorInput>
  }

  export type DoacaoUpdateManyWithoutCriadorNestedInput = {
    create?: XOR<DoacaoCreateWithoutCriadorInput, DoacaoUncheckedCreateWithoutCriadorInput> | DoacaoCreateWithoutCriadorInput[] | DoacaoUncheckedCreateWithoutCriadorInput[]
    connectOrCreate?: DoacaoCreateOrConnectWithoutCriadorInput | DoacaoCreateOrConnectWithoutCriadorInput[]
    upsert?: DoacaoUpsertWithWhereUniqueWithoutCriadorInput | DoacaoUpsertWithWhereUniqueWithoutCriadorInput[]
    createMany?: DoacaoCreateManyCriadorInputEnvelope
    set?: DoacaoWhereUniqueInput | DoacaoWhereUniqueInput[]
    disconnect?: DoacaoWhereUniqueInput | DoacaoWhereUniqueInput[]
    delete?: DoacaoWhereUniqueInput | DoacaoWhereUniqueInput[]
    connect?: DoacaoWhereUniqueInput | DoacaoWhereUniqueInput[]
    update?: DoacaoUpdateWithWhereUniqueWithoutCriadorInput | DoacaoUpdateWithWhereUniqueWithoutCriadorInput[]
    updateMany?: DoacaoUpdateManyWithWhereWithoutCriadorInput | DoacaoUpdateManyWithWhereWithoutCriadorInput[]
    deleteMany?: DoacaoScalarWhereInput | DoacaoScalarWhereInput[]
  }

  export type DoacaoUncheckedUpdateManyWithoutCriadorNestedInput = {
    create?: XOR<DoacaoCreateWithoutCriadorInput, DoacaoUncheckedCreateWithoutCriadorInput> | DoacaoCreateWithoutCriadorInput[] | DoacaoUncheckedCreateWithoutCriadorInput[]
    connectOrCreate?: DoacaoCreateOrConnectWithoutCriadorInput | DoacaoCreateOrConnectWithoutCriadorInput[]
    upsert?: DoacaoUpsertWithWhereUniqueWithoutCriadorInput | DoacaoUpsertWithWhereUniqueWithoutCriadorInput[]
    createMany?: DoacaoCreateManyCriadorInputEnvelope
    set?: DoacaoWhereUniqueInput | DoacaoWhereUniqueInput[]
    disconnect?: DoacaoWhereUniqueInput | DoacaoWhereUniqueInput[]
    delete?: DoacaoWhereUniqueInput | DoacaoWhereUniqueInput[]
    connect?: DoacaoWhereUniqueInput | DoacaoWhereUniqueInput[]
    update?: DoacaoUpdateWithWhereUniqueWithoutCriadorInput | DoacaoUpdateWithWhereUniqueWithoutCriadorInput[]
    updateMany?: DoacaoUpdateManyWithWhereWithoutCriadorInput | DoacaoUpdateManyWithWhereWithoutCriadorInput[]
    deleteMany?: DoacaoScalarWhereInput | DoacaoScalarWhereInput[]
  }

  export type UsuarioCreateNestedOneWithoutCandidaturasInput = {
    create?: XOR<UsuarioCreateWithoutCandidaturasInput, UsuarioUncheckedCreateWithoutCandidaturasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutCandidaturasInput
    connect?: UsuarioWhereUniqueInput
  }

  export type UsuarioUpdateOneRequiredWithoutCandidaturasNestedInput = {
    create?: XOR<UsuarioCreateWithoutCandidaturasInput, UsuarioUncheckedCreateWithoutCandidaturasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutCandidaturasInput
    upsert?: UsuarioUpsertWithoutCandidaturasInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutCandidaturasInput, UsuarioUpdateWithoutCandidaturasInput>, UsuarioUncheckedUpdateWithoutCandidaturasInput>
  }

  export type UsuarioCreateNestedOneWithoutLogsAuditoriaInput = {
    create?: XOR<UsuarioCreateWithoutLogsAuditoriaInput, UsuarioUncheckedCreateWithoutLogsAuditoriaInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutLogsAuditoriaInput
    connect?: UsuarioWhereUniqueInput
  }

  export type UsuarioUpdateOneRequiredWithoutLogsAuditoriaNestedInput = {
    create?: XOR<UsuarioCreateWithoutLogsAuditoriaInput, UsuarioUncheckedCreateWithoutLogsAuditoriaInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutLogsAuditoriaInput
    upsert?: UsuarioUpsertWithoutLogsAuditoriaInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutLogsAuditoriaInput, UsuarioUpdateWithoutLogsAuditoriaInput>, UsuarioUncheckedUpdateWithoutLogsAuditoriaInput>
  }

  export type UsuarioCreateNestedOneWithoutParceiroInput = {
    create?: XOR<UsuarioCreateWithoutParceiroInput, UsuarioUncheckedCreateWithoutParceiroInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutParceiroInput
    connect?: UsuarioWhereUniqueInput
  }

  export type CodigoCashbackCreateNestedManyWithoutParceiroInput = {
    create?: XOR<CodigoCashbackCreateWithoutParceiroInput, CodigoCashbackUncheckedCreateWithoutParceiroInput> | CodigoCashbackCreateWithoutParceiroInput[] | CodigoCashbackUncheckedCreateWithoutParceiroInput[]
    connectOrCreate?: CodigoCashbackCreateOrConnectWithoutParceiroInput | CodigoCashbackCreateOrConnectWithoutParceiroInput[]
    createMany?: CodigoCashbackCreateManyParceiroInputEnvelope
    connect?: CodigoCashbackWhereUniqueInput | CodigoCashbackWhereUniqueInput[]
  }

  export type CodigoCashbackUncheckedCreateNestedManyWithoutParceiroInput = {
    create?: XOR<CodigoCashbackCreateWithoutParceiroInput, CodigoCashbackUncheckedCreateWithoutParceiroInput> | CodigoCashbackCreateWithoutParceiroInput[] | CodigoCashbackUncheckedCreateWithoutParceiroInput[]
    connectOrCreate?: CodigoCashbackCreateOrConnectWithoutParceiroInput | CodigoCashbackCreateOrConnectWithoutParceiroInput[]
    createMany?: CodigoCashbackCreateManyParceiroInputEnvelope
    connect?: CodigoCashbackWhereUniqueInput | CodigoCashbackWhereUniqueInput[]
  }

  export type UsuarioUpdateOneRequiredWithoutParceiroNestedInput = {
    create?: XOR<UsuarioCreateWithoutParceiroInput, UsuarioUncheckedCreateWithoutParceiroInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutParceiroInput
    upsert?: UsuarioUpsertWithoutParceiroInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutParceiroInput, UsuarioUpdateWithoutParceiroInput>, UsuarioUncheckedUpdateWithoutParceiroInput>
  }

  export type CodigoCashbackUpdateManyWithoutParceiroNestedInput = {
    create?: XOR<CodigoCashbackCreateWithoutParceiroInput, CodigoCashbackUncheckedCreateWithoutParceiroInput> | CodigoCashbackCreateWithoutParceiroInput[] | CodigoCashbackUncheckedCreateWithoutParceiroInput[]
    connectOrCreate?: CodigoCashbackCreateOrConnectWithoutParceiroInput | CodigoCashbackCreateOrConnectWithoutParceiroInput[]
    upsert?: CodigoCashbackUpsertWithWhereUniqueWithoutParceiroInput | CodigoCashbackUpsertWithWhereUniqueWithoutParceiroInput[]
    createMany?: CodigoCashbackCreateManyParceiroInputEnvelope
    set?: CodigoCashbackWhereUniqueInput | CodigoCashbackWhereUniqueInput[]
    disconnect?: CodigoCashbackWhereUniqueInput | CodigoCashbackWhereUniqueInput[]
    delete?: CodigoCashbackWhereUniqueInput | CodigoCashbackWhereUniqueInput[]
    connect?: CodigoCashbackWhereUniqueInput | CodigoCashbackWhereUniqueInput[]
    update?: CodigoCashbackUpdateWithWhereUniqueWithoutParceiroInput | CodigoCashbackUpdateWithWhereUniqueWithoutParceiroInput[]
    updateMany?: CodigoCashbackUpdateManyWithWhereWithoutParceiroInput | CodigoCashbackUpdateManyWithWhereWithoutParceiroInput[]
    deleteMany?: CodigoCashbackScalarWhereInput | CodigoCashbackScalarWhereInput[]
  }

  export type CodigoCashbackUncheckedUpdateManyWithoutParceiroNestedInput = {
    create?: XOR<CodigoCashbackCreateWithoutParceiroInput, CodigoCashbackUncheckedCreateWithoutParceiroInput> | CodigoCashbackCreateWithoutParceiroInput[] | CodigoCashbackUncheckedCreateWithoutParceiroInput[]
    connectOrCreate?: CodigoCashbackCreateOrConnectWithoutParceiroInput | CodigoCashbackCreateOrConnectWithoutParceiroInput[]
    upsert?: CodigoCashbackUpsertWithWhereUniqueWithoutParceiroInput | CodigoCashbackUpsertWithWhereUniqueWithoutParceiroInput[]
    createMany?: CodigoCashbackCreateManyParceiroInputEnvelope
    set?: CodigoCashbackWhereUniqueInput | CodigoCashbackWhereUniqueInput[]
    disconnect?: CodigoCashbackWhereUniqueInput | CodigoCashbackWhereUniqueInput[]
    delete?: CodigoCashbackWhereUniqueInput | CodigoCashbackWhereUniqueInput[]
    connect?: CodigoCashbackWhereUniqueInput | CodigoCashbackWhereUniqueInput[]
    update?: CodigoCashbackUpdateWithWhereUniqueWithoutParceiroInput | CodigoCashbackUpdateWithWhereUniqueWithoutParceiroInput[]
    updateMany?: CodigoCashbackUpdateManyWithWhereWithoutParceiroInput | CodigoCashbackUpdateManyWithWhereWithoutParceiroInput[]
    deleteMany?: CodigoCashbackScalarWhereInput | CodigoCashbackScalarWhereInput[]
  }

  export type UsuarioCreateNestedOneWithoutSementesHistoricoInput = {
    create?: XOR<UsuarioCreateWithoutSementesHistoricoInput, UsuarioUncheckedCreateWithoutSementesHistoricoInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutSementesHistoricoInput
    connect?: UsuarioWhereUniqueInput
  }

  export type UsuarioUpdateOneRequiredWithoutSementesHistoricoNestedInput = {
    create?: XOR<UsuarioCreateWithoutSementesHistoricoInput, UsuarioUncheckedCreateWithoutSementesHistoricoInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutSementesHistoricoInput
    upsert?: UsuarioUpsertWithoutSementesHistoricoInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutSementesHistoricoInput, UsuarioUpdateWithoutSementesHistoricoInput>, UsuarioUncheckedUpdateWithoutSementesHistoricoInput>
  }

  export type UsuarioCreateNestedOneWithoutDoacoesFeitasInput = {
    create?: XOR<UsuarioCreateWithoutDoacoesFeitasInput, UsuarioUncheckedCreateWithoutDoacoesFeitasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutDoacoesFeitasInput
    connect?: UsuarioWhereUniqueInput
  }

  export type CriadorCreateNestedOneWithoutDoacoesRecebidasInput = {
    create?: XOR<CriadorCreateWithoutDoacoesRecebidasInput, CriadorUncheckedCreateWithoutDoacoesRecebidasInput>
    connectOrCreate?: CriadorCreateOrConnectWithoutDoacoesRecebidasInput
    connect?: CriadorWhereUniqueInput
  }

  export type UsuarioUpdateOneRequiredWithoutDoacoesFeitasNestedInput = {
    create?: XOR<UsuarioCreateWithoutDoacoesFeitasInput, UsuarioUncheckedCreateWithoutDoacoesFeitasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutDoacoesFeitasInput
    upsert?: UsuarioUpsertWithoutDoacoesFeitasInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutDoacoesFeitasInput, UsuarioUpdateWithoutDoacoesFeitasInput>, UsuarioUncheckedUpdateWithoutDoacoesFeitasInput>
  }

  export type CriadorUpdateOneRequiredWithoutDoacoesRecebidasNestedInput = {
    create?: XOR<CriadorCreateWithoutDoacoesRecebidasInput, CriadorUncheckedCreateWithoutDoacoesRecebidasInput>
    connectOrCreate?: CriadorCreateOrConnectWithoutDoacoesRecebidasInput
    upsert?: CriadorUpsertWithoutDoacoesRecebidasInput
    connect?: CriadorWhereUniqueInput
    update?: XOR<XOR<CriadorUpdateToOneWithWhereWithoutDoacoesRecebidasInput, CriadorUpdateWithoutDoacoesRecebidasInput>, CriadorUncheckedUpdateWithoutDoacoesRecebidasInput>
  }

  export type UsuarioCreateNestedOneWithoutTransacoesInput = {
    create?: XOR<UsuarioCreateWithoutTransacoesInput, UsuarioUncheckedCreateWithoutTransacoesInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutTransacoesInput
    connect?: UsuarioWhereUniqueInput
  }

  export type UsuarioUpdateOneRequiredWithoutTransacoesNestedInput = {
    create?: XOR<UsuarioCreateWithoutTransacoesInput, UsuarioUncheckedCreateWithoutTransacoesInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutTransacoesInput
    upsert?: UsuarioUpsertWithoutTransacoesInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutTransacoesInput, UsuarioUpdateWithoutTransacoesInput>, UsuarioUncheckedUpdateWithoutTransacoesInput>
  }

  export type ParceiroCreateNestedOneWithoutCodigosCashbackInput = {
    create?: XOR<ParceiroCreateWithoutCodigosCashbackInput, ParceiroUncheckedCreateWithoutCodigosCashbackInput>
    connectOrCreate?: ParceiroCreateOrConnectWithoutCodigosCashbackInput
    connect?: ParceiroWhereUniqueInput
  }

  export type ParceiroUpdateOneRequiredWithoutCodigosCashbackNestedInput = {
    create?: XOR<ParceiroCreateWithoutCodigosCashbackInput, ParceiroUncheckedCreateWithoutCodigosCashbackInput>
    connectOrCreate?: ParceiroCreateOrConnectWithoutCodigosCashbackInput
    upsert?: ParceiroUpsertWithoutCodigosCashbackInput
    connect?: ParceiroWhereUniqueInput
    update?: XOR<XOR<ParceiroUpdateToOneWithWhereWithoutCodigosCashbackInput, ParceiroUpdateWithoutCodigosCashbackInput>, ParceiroUncheckedUpdateWithoutCodigosCashbackInput>
  }

  export type UsuarioCreateNestedOneWithoutNotificacoesInput = {
    create?: XOR<UsuarioCreateWithoutNotificacoesInput, UsuarioUncheckedCreateWithoutNotificacoesInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutNotificacoesInput
    connect?: UsuarioWhereUniqueInput
  }

  export type UsuarioUpdateOneRequiredWithoutNotificacoesNestedInput = {
    create?: XOR<UsuarioCreateWithoutNotificacoesInput, UsuarioUncheckedCreateWithoutNotificacoesInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutNotificacoesInput
    upsert?: UsuarioUpsertWithoutNotificacoesInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutNotificacoesInput, UsuarioUpdateWithoutNotificacoesInput>, UsuarioUncheckedUpdateWithoutNotificacoesInput>
  }

  export type UsuarioCreateNestedOneWithoutTokensRecuperacaoInput = {
    create?: XOR<UsuarioCreateWithoutTokensRecuperacaoInput, UsuarioUncheckedCreateWithoutTokensRecuperacaoInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutTokensRecuperacaoInput
    connect?: UsuarioWhereUniqueInput
  }

  export type UsuarioUpdateOneRequiredWithoutTokensRecuperacaoNestedInput = {
    create?: XOR<UsuarioCreateWithoutTokensRecuperacaoInput, UsuarioUncheckedCreateWithoutTokensRecuperacaoInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutTokensRecuperacaoInput
    upsert?: UsuarioUpsertWithoutTokensRecuperacaoInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutTokensRecuperacaoInput, UsuarioUpdateWithoutTokensRecuperacaoInput>, UsuarioUncheckedUpdateWithoutTokensRecuperacaoInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type CriadorCreateWithoutUsuarioInput = {
    id?: string
    nome: string
    bio: string
    categoria: string
    redesSociais: string
    portfolio: string
    nivel?: string
    sementes?: number
    apoiadores?: number
    doacoes?: number
    dataCriacao?: Date | string
    doacoesRecebidas?: DoacaoCreateNestedManyWithoutCriadorInput
  }

  export type CriadorUncheckedCreateWithoutUsuarioInput = {
    id?: string
    nome: string
    bio: string
    categoria: string
    redesSociais: string
    portfolio: string
    nivel?: string
    sementes?: number
    apoiadores?: number
    doacoes?: number
    dataCriacao?: Date | string
    doacoesRecebidas?: DoacaoUncheckedCreateNestedManyWithoutCriadorInput
  }

  export type CriadorCreateOrConnectWithoutUsuarioInput = {
    where: CriadorWhereUniqueInput
    create: XOR<CriadorCreateWithoutUsuarioInput, CriadorUncheckedCreateWithoutUsuarioInput>
  }

  export type ParceiroCreateWithoutUsuarioInput = {
    id?: string
    nomeCidade: string
    comissaoMensal: number
    totalVendas?: number
    codigosGerados?: number
    codigosCashback?: CodigoCashbackCreateNestedManyWithoutParceiroInput
  }

  export type ParceiroUncheckedCreateWithoutUsuarioInput = {
    id?: string
    nomeCidade: string
    comissaoMensal: number
    totalVendas?: number
    codigosGerados?: number
    codigosCashback?: CodigoCashbackUncheckedCreateNestedManyWithoutParceiroInput
  }

  export type ParceiroCreateOrConnectWithoutUsuarioInput = {
    where: ParceiroWhereUniqueInput
    create: XOR<ParceiroCreateWithoutUsuarioInput, ParceiroUncheckedCreateWithoutUsuarioInput>
  }

  export type SementeCreateWithoutUsuarioInput = {
    id?: string
    quantidade: number
    tipo: string
    data?: Date | string
    descricao: string
  }

  export type SementeUncheckedCreateWithoutUsuarioInput = {
    id?: string
    quantidade: number
    tipo: string
    data?: Date | string
    descricao: string
  }

  export type SementeCreateOrConnectWithoutUsuarioInput = {
    where: SementeWhereUniqueInput
    create: XOR<SementeCreateWithoutUsuarioInput, SementeUncheckedCreateWithoutUsuarioInput>
  }

  export type SementeCreateManyUsuarioInputEnvelope = {
    data: SementeCreateManyUsuarioInput | SementeCreateManyUsuarioInput[]
  }

  export type DoacaoCreateWithoutDoadorInput = {
    id?: string
    quantidade: number
    data?: Date | string
    mensagem?: string | null
    criador: CriadorCreateNestedOneWithoutDoacoesRecebidasInput
  }

  export type DoacaoUncheckedCreateWithoutDoadorInput = {
    id?: string
    criadorId: string
    quantidade: number
    data?: Date | string
    mensagem?: string | null
  }

  export type DoacaoCreateOrConnectWithoutDoadorInput = {
    where: DoacaoWhereUniqueInput
    create: XOR<DoacaoCreateWithoutDoadorInput, DoacaoUncheckedCreateWithoutDoadorInput>
  }

  export type DoacaoCreateManyDoadorInputEnvelope = {
    data: DoacaoCreateManyDoadorInput | DoacaoCreateManyDoadorInput[]
  }

  export type TransacaoCreateWithoutUsuarioInput = {
    id?: string
    tipo: string
    valor: number
    codigoParceiro?: string | null
    status?: string
    data?: Date | string
  }

  export type TransacaoUncheckedCreateWithoutUsuarioInput = {
    id?: string
    tipo: string
    valor: number
    codigoParceiro?: string | null
    status?: string
    data?: Date | string
  }

  export type TransacaoCreateOrConnectWithoutUsuarioInput = {
    where: TransacaoWhereUniqueInput
    create: XOR<TransacaoCreateWithoutUsuarioInput, TransacaoUncheckedCreateWithoutUsuarioInput>
  }

  export type TransacaoCreateManyUsuarioInputEnvelope = {
    data: TransacaoCreateManyUsuarioInput | TransacaoCreateManyUsuarioInput[]
  }

  export type NotificacaoCreateWithoutUsuarioInput = {
    id?: string
    tipo: string
    titulo: string
    mensagem: string
    lida?: boolean
    data?: Date | string
  }

  export type NotificacaoUncheckedCreateWithoutUsuarioInput = {
    id?: string
    tipo: string
    titulo: string
    mensagem: string
    lida?: boolean
    data?: Date | string
  }

  export type NotificacaoCreateOrConnectWithoutUsuarioInput = {
    where: NotificacaoWhereUniqueInput
    create: XOR<NotificacaoCreateWithoutUsuarioInput, NotificacaoUncheckedCreateWithoutUsuarioInput>
  }

  export type NotificacaoCreateManyUsuarioInputEnvelope = {
    data: NotificacaoCreateManyUsuarioInput | NotificacaoCreateManyUsuarioInput[]
  }

  export type CandidaturaCriadorCreateWithoutUsuarioInput = {
    id?: string
    nome: string
    email: string
    bio: string
    categoria: string
    redesSociais: string
    portfolio: string
    experiencia: string
    motivacao: string
    metas: string
    disponibilidade: string
    status?: string
    dataCandidatura?: Date | string
    dataRevisao?: Date | string | null
    observacoes?: string | null
  }

  export type CandidaturaCriadorUncheckedCreateWithoutUsuarioInput = {
    id?: string
    nome: string
    email: string
    bio: string
    categoria: string
    redesSociais: string
    portfolio: string
    experiencia: string
    motivacao: string
    metas: string
    disponibilidade: string
    status?: string
    dataCandidatura?: Date | string
    dataRevisao?: Date | string | null
    observacoes?: string | null
  }

  export type CandidaturaCriadorCreateOrConnectWithoutUsuarioInput = {
    where: CandidaturaCriadorWhereUniqueInput
    create: XOR<CandidaturaCriadorCreateWithoutUsuarioInput, CandidaturaCriadorUncheckedCreateWithoutUsuarioInput>
  }

  export type CandidaturaCriadorCreateManyUsuarioInputEnvelope = {
    data: CandidaturaCriadorCreateManyUsuarioInput | CandidaturaCriadorCreateManyUsuarioInput[]
  }

  export type LogAuditoriaCreateWithoutUsuarioInput = {
    id?: string
    acao: string
    detalhes: string
    ip?: string | null
    userAgent?: string | null
    timestamp?: Date | string
    nivel?: string
  }

  export type LogAuditoriaUncheckedCreateWithoutUsuarioInput = {
    id?: string
    acao: string
    detalhes: string
    ip?: string | null
    userAgent?: string | null
    timestamp?: Date | string
    nivel?: string
  }

  export type LogAuditoriaCreateOrConnectWithoutUsuarioInput = {
    where: LogAuditoriaWhereUniqueInput
    create: XOR<LogAuditoriaCreateWithoutUsuarioInput, LogAuditoriaUncheckedCreateWithoutUsuarioInput>
  }

  export type LogAuditoriaCreateManyUsuarioInputEnvelope = {
    data: LogAuditoriaCreateManyUsuarioInput | LogAuditoriaCreateManyUsuarioInput[]
  }

  export type CarteiraDigitalCreateWithoutUsuarioInput = {
    id?: string
    saldo?: number
    saldoPendente?: number
    totalRecebido?: number
    totalSacado?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
    movimentacoes?: MovimentacaoCarteiraCreateNestedManyWithoutCarteiraInput
  }

  export type CarteiraDigitalUncheckedCreateWithoutUsuarioInput = {
    id?: string
    saldo?: number
    saldoPendente?: number
    totalRecebido?: number
    totalSacado?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
    movimentacoes?: MovimentacaoCarteiraUncheckedCreateNestedManyWithoutCarteiraInput
  }

  export type CarteiraDigitalCreateOrConnectWithoutUsuarioInput = {
    where: CarteiraDigitalWhereUniqueInput
    create: XOR<CarteiraDigitalCreateWithoutUsuarioInput, CarteiraDigitalUncheckedCreateWithoutUsuarioInput>
  }

  export type DadosBancariosCreateWithoutUsuarioInput = {
    id?: string
    banco: string
    agencia: string
    conta: string
    tipoConta: string
    cpfCnpj: string
    nomeTitular: string
    validado?: boolean
    dataValidacao?: Date | string | null
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
  }

  export type DadosBancariosUncheckedCreateWithoutUsuarioInput = {
    id?: string
    banco: string
    agencia: string
    conta: string
    tipoConta: string
    cpfCnpj: string
    nomeTitular: string
    validado?: boolean
    dataValidacao?: Date | string | null
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
  }

  export type DadosBancariosCreateOrConnectWithoutUsuarioInput = {
    where: DadosBancariosWhereUniqueInput
    create: XOR<DadosBancariosCreateWithoutUsuarioInput, DadosBancariosUncheckedCreateWithoutUsuarioInput>
  }

  export type SaqueCreateWithoutUsuarioInput = {
    id?: string
    valor: number
    taxa?: number
    valorLiquido: number
    dadosBancarios: string
    status?: string
    motivoRejeicao?: string | null
    dataSolicitacao?: Date | string
    dataProcessamento?: Date | string | null
    dataConclusao?: Date | string | null
    comprovante?: string | null
  }

  export type SaqueUncheckedCreateWithoutUsuarioInput = {
    id?: string
    valor: number
    taxa?: number
    valorLiquido: number
    dadosBancarios: string
    status?: string
    motivoRejeicao?: string | null
    dataSolicitacao?: Date | string
    dataProcessamento?: Date | string | null
    dataConclusao?: Date | string | null
    comprovante?: string | null
  }

  export type SaqueCreateOrConnectWithoutUsuarioInput = {
    where: SaqueWhereUniqueInput
    create: XOR<SaqueCreateWithoutUsuarioInput, SaqueUncheckedCreateWithoutUsuarioInput>
  }

  export type SaqueCreateManyUsuarioInputEnvelope = {
    data: SaqueCreateManyUsuarioInput | SaqueCreateManyUsuarioInput[]
  }

  export type PagamentoCreateWithoutUsuarioInput = {
    id?: string
    tipo: string
    valor: number
    sementesGeradas: number
    gateway: string
    gatewayId?: string | null
    status?: string
    dadosPagamento: string
    dataPagamento?: Date | string
    dataProcessamento?: Date | string | null
  }

  export type PagamentoUncheckedCreateWithoutUsuarioInput = {
    id?: string
    tipo: string
    valor: number
    sementesGeradas: number
    gateway: string
    gatewayId?: string | null
    status?: string
    dadosPagamento: string
    dataPagamento?: Date | string
    dataProcessamento?: Date | string | null
  }

  export type PagamentoCreateOrConnectWithoutUsuarioInput = {
    where: PagamentoWhereUniqueInput
    create: XOR<PagamentoCreateWithoutUsuarioInput, PagamentoUncheckedCreateWithoutUsuarioInput>
  }

  export type PagamentoCreateManyUsuarioInputEnvelope = {
    data: PagamentoCreateManyUsuarioInput | PagamentoCreateManyUsuarioInput[]
  }

  export type TokenRecuperacaoCreateWithoutUsuarioInput = {
    id?: string
    token: string
    usado?: boolean
    expiraEm: Date | string
    dataCriacao?: Date | string
  }

  export type TokenRecuperacaoUncheckedCreateWithoutUsuarioInput = {
    id?: string
    token: string
    usado?: boolean
    expiraEm: Date | string
    dataCriacao?: Date | string
  }

  export type TokenRecuperacaoCreateOrConnectWithoutUsuarioInput = {
    where: TokenRecuperacaoWhereUniqueInput
    create: XOR<TokenRecuperacaoCreateWithoutUsuarioInput, TokenRecuperacaoUncheckedCreateWithoutUsuarioInput>
  }

  export type TokenRecuperacaoCreateManyUsuarioInputEnvelope = {
    data: TokenRecuperacaoCreateManyUsuarioInput | TokenRecuperacaoCreateManyUsuarioInput[]
  }

  export type CriadorUpsertWithoutUsuarioInput = {
    update: XOR<CriadorUpdateWithoutUsuarioInput, CriadorUncheckedUpdateWithoutUsuarioInput>
    create: XOR<CriadorCreateWithoutUsuarioInput, CriadorUncheckedCreateWithoutUsuarioInput>
    where?: CriadorWhereInput
  }

  export type CriadorUpdateToOneWithWhereWithoutUsuarioInput = {
    where?: CriadorWhereInput
    data: XOR<CriadorUpdateWithoutUsuarioInput, CriadorUncheckedUpdateWithoutUsuarioInput>
  }

  export type CriadorUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    redesSociais?: StringFieldUpdateOperationsInput | string
    portfolio?: StringFieldUpdateOperationsInput | string
    nivel?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    apoiadores?: IntFieldUpdateOperationsInput | number
    doacoes?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    doacoesRecebidas?: DoacaoUpdateManyWithoutCriadorNestedInput
  }

  export type CriadorUncheckedUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    redesSociais?: StringFieldUpdateOperationsInput | string
    portfolio?: StringFieldUpdateOperationsInput | string
    nivel?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    apoiadores?: IntFieldUpdateOperationsInput | number
    doacoes?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    doacoesRecebidas?: DoacaoUncheckedUpdateManyWithoutCriadorNestedInput
  }

  export type ParceiroUpsertWithoutUsuarioInput = {
    update: XOR<ParceiroUpdateWithoutUsuarioInput, ParceiroUncheckedUpdateWithoutUsuarioInput>
    create: XOR<ParceiroCreateWithoutUsuarioInput, ParceiroUncheckedCreateWithoutUsuarioInput>
    where?: ParceiroWhereInput
  }

  export type ParceiroUpdateToOneWithWhereWithoutUsuarioInput = {
    where?: ParceiroWhereInput
    data: XOR<ParceiroUpdateWithoutUsuarioInput, ParceiroUncheckedUpdateWithoutUsuarioInput>
  }

  export type ParceiroUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomeCidade?: StringFieldUpdateOperationsInput | string
    comissaoMensal?: FloatFieldUpdateOperationsInput | number
    totalVendas?: FloatFieldUpdateOperationsInput | number
    codigosGerados?: IntFieldUpdateOperationsInput | number
    codigosCashback?: CodigoCashbackUpdateManyWithoutParceiroNestedInput
  }

  export type ParceiroUncheckedUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomeCidade?: StringFieldUpdateOperationsInput | string
    comissaoMensal?: FloatFieldUpdateOperationsInput | number
    totalVendas?: FloatFieldUpdateOperationsInput | number
    codigosGerados?: IntFieldUpdateOperationsInput | number
    codigosCashback?: CodigoCashbackUncheckedUpdateManyWithoutParceiroNestedInput
  }

  export type SementeUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: SementeWhereUniqueInput
    update: XOR<SementeUpdateWithoutUsuarioInput, SementeUncheckedUpdateWithoutUsuarioInput>
    create: XOR<SementeCreateWithoutUsuarioInput, SementeUncheckedCreateWithoutUsuarioInput>
  }

  export type SementeUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: SementeWhereUniqueInput
    data: XOR<SementeUpdateWithoutUsuarioInput, SementeUncheckedUpdateWithoutUsuarioInput>
  }

  export type SementeUpdateManyWithWhereWithoutUsuarioInput = {
    where: SementeScalarWhereInput
    data: XOR<SementeUpdateManyMutationInput, SementeUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type SementeScalarWhereInput = {
    AND?: SementeScalarWhereInput | SementeScalarWhereInput[]
    OR?: SementeScalarWhereInput[]
    NOT?: SementeScalarWhereInput | SementeScalarWhereInput[]
    id?: StringFilter<"Semente"> | string
    usuarioId?: StringFilter<"Semente"> | string
    quantidade?: IntFilter<"Semente"> | number
    tipo?: StringFilter<"Semente"> | string
    data?: DateTimeFilter<"Semente"> | Date | string
    descricao?: StringFilter<"Semente"> | string
  }

  export type DoacaoUpsertWithWhereUniqueWithoutDoadorInput = {
    where: DoacaoWhereUniqueInput
    update: XOR<DoacaoUpdateWithoutDoadorInput, DoacaoUncheckedUpdateWithoutDoadorInput>
    create: XOR<DoacaoCreateWithoutDoadorInput, DoacaoUncheckedCreateWithoutDoadorInput>
  }

  export type DoacaoUpdateWithWhereUniqueWithoutDoadorInput = {
    where: DoacaoWhereUniqueInput
    data: XOR<DoacaoUpdateWithoutDoadorInput, DoacaoUncheckedUpdateWithoutDoadorInput>
  }

  export type DoacaoUpdateManyWithWhereWithoutDoadorInput = {
    where: DoacaoScalarWhereInput
    data: XOR<DoacaoUpdateManyMutationInput, DoacaoUncheckedUpdateManyWithoutDoadorInput>
  }

  export type DoacaoScalarWhereInput = {
    AND?: DoacaoScalarWhereInput | DoacaoScalarWhereInput[]
    OR?: DoacaoScalarWhereInput[]
    NOT?: DoacaoScalarWhereInput | DoacaoScalarWhereInput[]
    id?: StringFilter<"Doacao"> | string
    doadorId?: StringFilter<"Doacao"> | string
    criadorId?: StringFilter<"Doacao"> | string
    quantidade?: IntFilter<"Doacao"> | number
    data?: DateTimeFilter<"Doacao"> | Date | string
    mensagem?: StringNullableFilter<"Doacao"> | string | null
  }

  export type TransacaoUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: TransacaoWhereUniqueInput
    update: XOR<TransacaoUpdateWithoutUsuarioInput, TransacaoUncheckedUpdateWithoutUsuarioInput>
    create: XOR<TransacaoCreateWithoutUsuarioInput, TransacaoUncheckedCreateWithoutUsuarioInput>
  }

  export type TransacaoUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: TransacaoWhereUniqueInput
    data: XOR<TransacaoUpdateWithoutUsuarioInput, TransacaoUncheckedUpdateWithoutUsuarioInput>
  }

  export type TransacaoUpdateManyWithWhereWithoutUsuarioInput = {
    where: TransacaoScalarWhereInput
    data: XOR<TransacaoUpdateManyMutationInput, TransacaoUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type TransacaoScalarWhereInput = {
    AND?: TransacaoScalarWhereInput | TransacaoScalarWhereInput[]
    OR?: TransacaoScalarWhereInput[]
    NOT?: TransacaoScalarWhereInput | TransacaoScalarWhereInput[]
    id?: StringFilter<"Transacao"> | string
    usuarioId?: StringFilter<"Transacao"> | string
    tipo?: StringFilter<"Transacao"> | string
    valor?: FloatFilter<"Transacao"> | number
    codigoParceiro?: StringNullableFilter<"Transacao"> | string | null
    status?: StringFilter<"Transacao"> | string
    data?: DateTimeFilter<"Transacao"> | Date | string
  }

  export type NotificacaoUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: NotificacaoWhereUniqueInput
    update: XOR<NotificacaoUpdateWithoutUsuarioInput, NotificacaoUncheckedUpdateWithoutUsuarioInput>
    create: XOR<NotificacaoCreateWithoutUsuarioInput, NotificacaoUncheckedCreateWithoutUsuarioInput>
  }

  export type NotificacaoUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: NotificacaoWhereUniqueInput
    data: XOR<NotificacaoUpdateWithoutUsuarioInput, NotificacaoUncheckedUpdateWithoutUsuarioInput>
  }

  export type NotificacaoUpdateManyWithWhereWithoutUsuarioInput = {
    where: NotificacaoScalarWhereInput
    data: XOR<NotificacaoUpdateManyMutationInput, NotificacaoUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type NotificacaoScalarWhereInput = {
    AND?: NotificacaoScalarWhereInput | NotificacaoScalarWhereInput[]
    OR?: NotificacaoScalarWhereInput[]
    NOT?: NotificacaoScalarWhereInput | NotificacaoScalarWhereInput[]
    id?: StringFilter<"Notificacao"> | string
    usuarioId?: StringFilter<"Notificacao"> | string
    tipo?: StringFilter<"Notificacao"> | string
    titulo?: StringFilter<"Notificacao"> | string
    mensagem?: StringFilter<"Notificacao"> | string
    lida?: BoolFilter<"Notificacao"> | boolean
    data?: DateTimeFilter<"Notificacao"> | Date | string
  }

  export type CandidaturaCriadorUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: CandidaturaCriadorWhereUniqueInput
    update: XOR<CandidaturaCriadorUpdateWithoutUsuarioInput, CandidaturaCriadorUncheckedUpdateWithoutUsuarioInput>
    create: XOR<CandidaturaCriadorCreateWithoutUsuarioInput, CandidaturaCriadorUncheckedCreateWithoutUsuarioInput>
  }

  export type CandidaturaCriadorUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: CandidaturaCriadorWhereUniqueInput
    data: XOR<CandidaturaCriadorUpdateWithoutUsuarioInput, CandidaturaCriadorUncheckedUpdateWithoutUsuarioInput>
  }

  export type CandidaturaCriadorUpdateManyWithWhereWithoutUsuarioInput = {
    where: CandidaturaCriadorScalarWhereInput
    data: XOR<CandidaturaCriadorUpdateManyMutationInput, CandidaturaCriadorUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type CandidaturaCriadorScalarWhereInput = {
    AND?: CandidaturaCriadorScalarWhereInput | CandidaturaCriadorScalarWhereInput[]
    OR?: CandidaturaCriadorScalarWhereInput[]
    NOT?: CandidaturaCriadorScalarWhereInput | CandidaturaCriadorScalarWhereInput[]
    id?: StringFilter<"CandidaturaCriador"> | string
    usuarioId?: StringFilter<"CandidaturaCriador"> | string
    nome?: StringFilter<"CandidaturaCriador"> | string
    email?: StringFilter<"CandidaturaCriador"> | string
    bio?: StringFilter<"CandidaturaCriador"> | string
    categoria?: StringFilter<"CandidaturaCriador"> | string
    redesSociais?: StringFilter<"CandidaturaCriador"> | string
    portfolio?: StringFilter<"CandidaturaCriador"> | string
    experiencia?: StringFilter<"CandidaturaCriador"> | string
    motivacao?: StringFilter<"CandidaturaCriador"> | string
    metas?: StringFilter<"CandidaturaCriador"> | string
    disponibilidade?: StringFilter<"CandidaturaCriador"> | string
    status?: StringFilter<"CandidaturaCriador"> | string
    dataCandidatura?: DateTimeFilter<"CandidaturaCriador"> | Date | string
    dataRevisao?: DateTimeNullableFilter<"CandidaturaCriador"> | Date | string | null
    observacoes?: StringNullableFilter<"CandidaturaCriador"> | string | null
  }

  export type LogAuditoriaUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: LogAuditoriaWhereUniqueInput
    update: XOR<LogAuditoriaUpdateWithoutUsuarioInput, LogAuditoriaUncheckedUpdateWithoutUsuarioInput>
    create: XOR<LogAuditoriaCreateWithoutUsuarioInput, LogAuditoriaUncheckedCreateWithoutUsuarioInput>
  }

  export type LogAuditoriaUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: LogAuditoriaWhereUniqueInput
    data: XOR<LogAuditoriaUpdateWithoutUsuarioInput, LogAuditoriaUncheckedUpdateWithoutUsuarioInput>
  }

  export type LogAuditoriaUpdateManyWithWhereWithoutUsuarioInput = {
    where: LogAuditoriaScalarWhereInput
    data: XOR<LogAuditoriaUpdateManyMutationInput, LogAuditoriaUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type LogAuditoriaScalarWhereInput = {
    AND?: LogAuditoriaScalarWhereInput | LogAuditoriaScalarWhereInput[]
    OR?: LogAuditoriaScalarWhereInput[]
    NOT?: LogAuditoriaScalarWhereInput | LogAuditoriaScalarWhereInput[]
    id?: StringFilter<"LogAuditoria"> | string
    usuarioId?: StringFilter<"LogAuditoria"> | string
    acao?: StringFilter<"LogAuditoria"> | string
    detalhes?: StringFilter<"LogAuditoria"> | string
    ip?: StringNullableFilter<"LogAuditoria"> | string | null
    userAgent?: StringNullableFilter<"LogAuditoria"> | string | null
    timestamp?: DateTimeFilter<"LogAuditoria"> | Date | string
    nivel?: StringFilter<"LogAuditoria"> | string
  }

  export type CarteiraDigitalUpsertWithoutUsuarioInput = {
    update: XOR<CarteiraDigitalUpdateWithoutUsuarioInput, CarteiraDigitalUncheckedUpdateWithoutUsuarioInput>
    create: XOR<CarteiraDigitalCreateWithoutUsuarioInput, CarteiraDigitalUncheckedCreateWithoutUsuarioInput>
    where?: CarteiraDigitalWhereInput
  }

  export type CarteiraDigitalUpdateToOneWithWhereWithoutUsuarioInput = {
    where?: CarteiraDigitalWhereInput
    data: XOR<CarteiraDigitalUpdateWithoutUsuarioInput, CarteiraDigitalUncheckedUpdateWithoutUsuarioInput>
  }

  export type CarteiraDigitalUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    saldo?: FloatFieldUpdateOperationsInput | number
    saldoPendente?: FloatFieldUpdateOperationsInput | number
    totalRecebido?: FloatFieldUpdateOperationsInput | number
    totalSacado?: FloatFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    movimentacoes?: MovimentacaoCarteiraUpdateManyWithoutCarteiraNestedInput
  }

  export type CarteiraDigitalUncheckedUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    saldo?: FloatFieldUpdateOperationsInput | number
    saldoPendente?: FloatFieldUpdateOperationsInput | number
    totalRecebido?: FloatFieldUpdateOperationsInput | number
    totalSacado?: FloatFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    movimentacoes?: MovimentacaoCarteiraUncheckedUpdateManyWithoutCarteiraNestedInput
  }

  export type DadosBancariosUpsertWithoutUsuarioInput = {
    update: XOR<DadosBancariosUpdateWithoutUsuarioInput, DadosBancariosUncheckedUpdateWithoutUsuarioInput>
    create: XOR<DadosBancariosCreateWithoutUsuarioInput, DadosBancariosUncheckedCreateWithoutUsuarioInput>
    where?: DadosBancariosWhereInput
  }

  export type DadosBancariosUpdateToOneWithWhereWithoutUsuarioInput = {
    where?: DadosBancariosWhereInput
    data: XOR<DadosBancariosUpdateWithoutUsuarioInput, DadosBancariosUncheckedUpdateWithoutUsuarioInput>
  }

  export type DadosBancariosUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    banco?: StringFieldUpdateOperationsInput | string
    agencia?: StringFieldUpdateOperationsInput | string
    conta?: StringFieldUpdateOperationsInput | string
    tipoConta?: StringFieldUpdateOperationsInput | string
    cpfCnpj?: StringFieldUpdateOperationsInput | string
    nomeTitular?: StringFieldUpdateOperationsInput | string
    validado?: BoolFieldUpdateOperationsInput | boolean
    dataValidacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DadosBancariosUncheckedUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    banco?: StringFieldUpdateOperationsInput | string
    agencia?: StringFieldUpdateOperationsInput | string
    conta?: StringFieldUpdateOperationsInput | string
    tipoConta?: StringFieldUpdateOperationsInput | string
    cpfCnpj?: StringFieldUpdateOperationsInput | string
    nomeTitular?: StringFieldUpdateOperationsInput | string
    validado?: BoolFieldUpdateOperationsInput | boolean
    dataValidacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SaqueUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: SaqueWhereUniqueInput
    update: XOR<SaqueUpdateWithoutUsuarioInput, SaqueUncheckedUpdateWithoutUsuarioInput>
    create: XOR<SaqueCreateWithoutUsuarioInput, SaqueUncheckedCreateWithoutUsuarioInput>
  }

  export type SaqueUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: SaqueWhereUniqueInput
    data: XOR<SaqueUpdateWithoutUsuarioInput, SaqueUncheckedUpdateWithoutUsuarioInput>
  }

  export type SaqueUpdateManyWithWhereWithoutUsuarioInput = {
    where: SaqueScalarWhereInput
    data: XOR<SaqueUpdateManyMutationInput, SaqueUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type SaqueScalarWhereInput = {
    AND?: SaqueScalarWhereInput | SaqueScalarWhereInput[]
    OR?: SaqueScalarWhereInput[]
    NOT?: SaqueScalarWhereInput | SaqueScalarWhereInput[]
    id?: StringFilter<"Saque"> | string
    usuarioId?: StringFilter<"Saque"> | string
    valor?: FloatFilter<"Saque"> | number
    taxa?: FloatFilter<"Saque"> | number
    valorLiquido?: FloatFilter<"Saque"> | number
    dadosBancarios?: StringFilter<"Saque"> | string
    status?: StringFilter<"Saque"> | string
    motivoRejeicao?: StringNullableFilter<"Saque"> | string | null
    dataSolicitacao?: DateTimeFilter<"Saque"> | Date | string
    dataProcessamento?: DateTimeNullableFilter<"Saque"> | Date | string | null
    dataConclusao?: DateTimeNullableFilter<"Saque"> | Date | string | null
    comprovante?: StringNullableFilter<"Saque"> | string | null
  }

  export type PagamentoUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: PagamentoWhereUniqueInput
    update: XOR<PagamentoUpdateWithoutUsuarioInput, PagamentoUncheckedUpdateWithoutUsuarioInput>
    create: XOR<PagamentoCreateWithoutUsuarioInput, PagamentoUncheckedCreateWithoutUsuarioInput>
  }

  export type PagamentoUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: PagamentoWhereUniqueInput
    data: XOR<PagamentoUpdateWithoutUsuarioInput, PagamentoUncheckedUpdateWithoutUsuarioInput>
  }

  export type PagamentoUpdateManyWithWhereWithoutUsuarioInput = {
    where: PagamentoScalarWhereInput
    data: XOR<PagamentoUpdateManyMutationInput, PagamentoUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type PagamentoScalarWhereInput = {
    AND?: PagamentoScalarWhereInput | PagamentoScalarWhereInput[]
    OR?: PagamentoScalarWhereInput[]
    NOT?: PagamentoScalarWhereInput | PagamentoScalarWhereInput[]
    id?: StringFilter<"Pagamento"> | string
    usuarioId?: StringFilter<"Pagamento"> | string
    tipo?: StringFilter<"Pagamento"> | string
    valor?: FloatFilter<"Pagamento"> | number
    sementesGeradas?: IntFilter<"Pagamento"> | number
    gateway?: StringFilter<"Pagamento"> | string
    gatewayId?: StringNullableFilter<"Pagamento"> | string | null
    status?: StringFilter<"Pagamento"> | string
    dadosPagamento?: StringFilter<"Pagamento"> | string
    dataPagamento?: DateTimeFilter<"Pagamento"> | Date | string
    dataProcessamento?: DateTimeNullableFilter<"Pagamento"> | Date | string | null
  }

  export type TokenRecuperacaoUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: TokenRecuperacaoWhereUniqueInput
    update: XOR<TokenRecuperacaoUpdateWithoutUsuarioInput, TokenRecuperacaoUncheckedUpdateWithoutUsuarioInput>
    create: XOR<TokenRecuperacaoCreateWithoutUsuarioInput, TokenRecuperacaoUncheckedCreateWithoutUsuarioInput>
  }

  export type TokenRecuperacaoUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: TokenRecuperacaoWhereUniqueInput
    data: XOR<TokenRecuperacaoUpdateWithoutUsuarioInput, TokenRecuperacaoUncheckedUpdateWithoutUsuarioInput>
  }

  export type TokenRecuperacaoUpdateManyWithWhereWithoutUsuarioInput = {
    where: TokenRecuperacaoScalarWhereInput
    data: XOR<TokenRecuperacaoUpdateManyMutationInput, TokenRecuperacaoUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type TokenRecuperacaoScalarWhereInput = {
    AND?: TokenRecuperacaoScalarWhereInput | TokenRecuperacaoScalarWhereInput[]
    OR?: TokenRecuperacaoScalarWhereInput[]
    NOT?: TokenRecuperacaoScalarWhereInput | TokenRecuperacaoScalarWhereInput[]
    id?: StringFilter<"TokenRecuperacao"> | string
    usuarioId?: StringFilter<"TokenRecuperacao"> | string
    token?: StringFilter<"TokenRecuperacao"> | string
    usado?: BoolFilter<"TokenRecuperacao"> | boolean
    expiraEm?: DateTimeFilter<"TokenRecuperacao"> | Date | string
    dataCriacao?: DateTimeFilter<"TokenRecuperacao"> | Date | string
  }

  export type UsuarioCreateWithoutCarteiraInput = {
    id?: string
    nome: string
    email: string
    senha: string
    tipo?: string
    sementes?: number
    nivel?: string
    pontuacao?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
    criador?: CriadorCreateNestedOneWithoutUsuarioInput
    parceiro?: ParceiroCreateNestedOneWithoutUsuarioInput
    sementesHistorico?: SementeCreateNestedManyWithoutUsuarioInput
    doacoesFeitas?: DoacaoCreateNestedManyWithoutDoadorInput
    transacoes?: TransacaoCreateNestedManyWithoutUsuarioInput
    notificacoes?: NotificacaoCreateNestedManyWithoutUsuarioInput
    candidaturas?: CandidaturaCriadorCreateNestedManyWithoutUsuarioInput
    logsAuditoria?: LogAuditoriaCreateNestedManyWithoutUsuarioInput
    dadosBancarios?: DadosBancariosCreateNestedOneWithoutUsuarioInput
    saques?: SaqueCreateNestedManyWithoutUsuarioInput
    pagamentos?: PagamentoCreateNestedManyWithoutUsuarioInput
    tokensRecuperacao?: TokenRecuperacaoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutCarteiraInput = {
    id?: string
    nome: string
    email: string
    senha: string
    tipo?: string
    sementes?: number
    nivel?: string
    pontuacao?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
    criador?: CriadorUncheckedCreateNestedOneWithoutUsuarioInput
    parceiro?: ParceiroUncheckedCreateNestedOneWithoutUsuarioInput
    sementesHistorico?: SementeUncheckedCreateNestedManyWithoutUsuarioInput
    doacoesFeitas?: DoacaoUncheckedCreateNestedManyWithoutDoadorInput
    transacoes?: TransacaoUncheckedCreateNestedManyWithoutUsuarioInput
    notificacoes?: NotificacaoUncheckedCreateNestedManyWithoutUsuarioInput
    candidaturas?: CandidaturaCriadorUncheckedCreateNestedManyWithoutUsuarioInput
    logsAuditoria?: LogAuditoriaUncheckedCreateNestedManyWithoutUsuarioInput
    dadosBancarios?: DadosBancariosUncheckedCreateNestedOneWithoutUsuarioInput
    saques?: SaqueUncheckedCreateNestedManyWithoutUsuarioInput
    pagamentos?: PagamentoUncheckedCreateNestedManyWithoutUsuarioInput
    tokensRecuperacao?: TokenRecuperacaoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutCarteiraInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutCarteiraInput, UsuarioUncheckedCreateWithoutCarteiraInput>
  }

  export type MovimentacaoCarteiraCreateWithoutCarteiraInput = {
    id?: string
    tipo: string
    valor: number
    saldoAnterior: number
    saldoPosterior: number
    descricao: string
    referencia?: string | null
    status?: string
    data?: Date | string
  }

  export type MovimentacaoCarteiraUncheckedCreateWithoutCarteiraInput = {
    id?: string
    tipo: string
    valor: number
    saldoAnterior: number
    saldoPosterior: number
    descricao: string
    referencia?: string | null
    status?: string
    data?: Date | string
  }

  export type MovimentacaoCarteiraCreateOrConnectWithoutCarteiraInput = {
    where: MovimentacaoCarteiraWhereUniqueInput
    create: XOR<MovimentacaoCarteiraCreateWithoutCarteiraInput, MovimentacaoCarteiraUncheckedCreateWithoutCarteiraInput>
  }

  export type MovimentacaoCarteiraCreateManyCarteiraInputEnvelope = {
    data: MovimentacaoCarteiraCreateManyCarteiraInput | MovimentacaoCarteiraCreateManyCarteiraInput[]
  }

  export type UsuarioUpsertWithoutCarteiraInput = {
    update: XOR<UsuarioUpdateWithoutCarteiraInput, UsuarioUncheckedUpdateWithoutCarteiraInput>
    create: XOR<UsuarioCreateWithoutCarteiraInput, UsuarioUncheckedCreateWithoutCarteiraInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutCarteiraInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutCarteiraInput, UsuarioUncheckedUpdateWithoutCarteiraInput>
  }

  export type UsuarioUpdateWithoutCarteiraInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    nivel?: StringFieldUpdateOperationsInput | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criador?: CriadorUpdateOneWithoutUsuarioNestedInput
    parceiro?: ParceiroUpdateOneWithoutUsuarioNestedInput
    sementesHistorico?: SementeUpdateManyWithoutUsuarioNestedInput
    doacoesFeitas?: DoacaoUpdateManyWithoutDoadorNestedInput
    transacoes?: TransacaoUpdateManyWithoutUsuarioNestedInput
    notificacoes?: NotificacaoUpdateManyWithoutUsuarioNestedInput
    candidaturas?: CandidaturaCriadorUpdateManyWithoutUsuarioNestedInput
    logsAuditoria?: LogAuditoriaUpdateManyWithoutUsuarioNestedInput
    dadosBancarios?: DadosBancariosUpdateOneWithoutUsuarioNestedInput
    saques?: SaqueUpdateManyWithoutUsuarioNestedInput
    pagamentos?: PagamentoUpdateManyWithoutUsuarioNestedInput
    tokensRecuperacao?: TokenRecuperacaoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutCarteiraInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    nivel?: StringFieldUpdateOperationsInput | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criador?: CriadorUncheckedUpdateOneWithoutUsuarioNestedInput
    parceiro?: ParceiroUncheckedUpdateOneWithoutUsuarioNestedInput
    sementesHistorico?: SementeUncheckedUpdateManyWithoutUsuarioNestedInput
    doacoesFeitas?: DoacaoUncheckedUpdateManyWithoutDoadorNestedInput
    transacoes?: TransacaoUncheckedUpdateManyWithoutUsuarioNestedInput
    notificacoes?: NotificacaoUncheckedUpdateManyWithoutUsuarioNestedInput
    candidaturas?: CandidaturaCriadorUncheckedUpdateManyWithoutUsuarioNestedInput
    logsAuditoria?: LogAuditoriaUncheckedUpdateManyWithoutUsuarioNestedInput
    dadosBancarios?: DadosBancariosUncheckedUpdateOneWithoutUsuarioNestedInput
    saques?: SaqueUncheckedUpdateManyWithoutUsuarioNestedInput
    pagamentos?: PagamentoUncheckedUpdateManyWithoutUsuarioNestedInput
    tokensRecuperacao?: TokenRecuperacaoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type MovimentacaoCarteiraUpsertWithWhereUniqueWithoutCarteiraInput = {
    where: MovimentacaoCarteiraWhereUniqueInput
    update: XOR<MovimentacaoCarteiraUpdateWithoutCarteiraInput, MovimentacaoCarteiraUncheckedUpdateWithoutCarteiraInput>
    create: XOR<MovimentacaoCarteiraCreateWithoutCarteiraInput, MovimentacaoCarteiraUncheckedCreateWithoutCarteiraInput>
  }

  export type MovimentacaoCarteiraUpdateWithWhereUniqueWithoutCarteiraInput = {
    where: MovimentacaoCarteiraWhereUniqueInput
    data: XOR<MovimentacaoCarteiraUpdateWithoutCarteiraInput, MovimentacaoCarteiraUncheckedUpdateWithoutCarteiraInput>
  }

  export type MovimentacaoCarteiraUpdateManyWithWhereWithoutCarteiraInput = {
    where: MovimentacaoCarteiraScalarWhereInput
    data: XOR<MovimentacaoCarteiraUpdateManyMutationInput, MovimentacaoCarteiraUncheckedUpdateManyWithoutCarteiraInput>
  }

  export type MovimentacaoCarteiraScalarWhereInput = {
    AND?: MovimentacaoCarteiraScalarWhereInput | MovimentacaoCarteiraScalarWhereInput[]
    OR?: MovimentacaoCarteiraScalarWhereInput[]
    NOT?: MovimentacaoCarteiraScalarWhereInput | MovimentacaoCarteiraScalarWhereInput[]
    id?: StringFilter<"MovimentacaoCarteira"> | string
    carteiraId?: StringFilter<"MovimentacaoCarteira"> | string
    tipo?: StringFilter<"MovimentacaoCarteira"> | string
    valor?: FloatFilter<"MovimentacaoCarteira"> | number
    saldoAnterior?: FloatFilter<"MovimentacaoCarteira"> | number
    saldoPosterior?: FloatFilter<"MovimentacaoCarteira"> | number
    descricao?: StringFilter<"MovimentacaoCarteira"> | string
    referencia?: StringNullableFilter<"MovimentacaoCarteira"> | string | null
    status?: StringFilter<"MovimentacaoCarteira"> | string
    data?: DateTimeFilter<"MovimentacaoCarteira"> | Date | string
  }

  export type CarteiraDigitalCreateWithoutMovimentacoesInput = {
    id?: string
    saldo?: number
    saldoPendente?: number
    totalRecebido?: number
    totalSacado?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
    usuario: UsuarioCreateNestedOneWithoutCarteiraInput
  }

  export type CarteiraDigitalUncheckedCreateWithoutMovimentacoesInput = {
    id?: string
    usuarioId: string
    saldo?: number
    saldoPendente?: number
    totalRecebido?: number
    totalSacado?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
  }

  export type CarteiraDigitalCreateOrConnectWithoutMovimentacoesInput = {
    where: CarteiraDigitalWhereUniqueInput
    create: XOR<CarteiraDigitalCreateWithoutMovimentacoesInput, CarteiraDigitalUncheckedCreateWithoutMovimentacoesInput>
  }

  export type CarteiraDigitalUpsertWithoutMovimentacoesInput = {
    update: XOR<CarteiraDigitalUpdateWithoutMovimentacoesInput, CarteiraDigitalUncheckedUpdateWithoutMovimentacoesInput>
    create: XOR<CarteiraDigitalCreateWithoutMovimentacoesInput, CarteiraDigitalUncheckedCreateWithoutMovimentacoesInput>
    where?: CarteiraDigitalWhereInput
  }

  export type CarteiraDigitalUpdateToOneWithWhereWithoutMovimentacoesInput = {
    where?: CarteiraDigitalWhereInput
    data: XOR<CarteiraDigitalUpdateWithoutMovimentacoesInput, CarteiraDigitalUncheckedUpdateWithoutMovimentacoesInput>
  }

  export type CarteiraDigitalUpdateWithoutMovimentacoesInput = {
    id?: StringFieldUpdateOperationsInput | string
    saldo?: FloatFieldUpdateOperationsInput | number
    saldoPendente?: FloatFieldUpdateOperationsInput | number
    totalRecebido?: FloatFieldUpdateOperationsInput | number
    totalSacado?: FloatFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UsuarioUpdateOneRequiredWithoutCarteiraNestedInput
  }

  export type CarteiraDigitalUncheckedUpdateWithoutMovimentacoesInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    saldo?: FloatFieldUpdateOperationsInput | number
    saldoPendente?: FloatFieldUpdateOperationsInput | number
    totalRecebido?: FloatFieldUpdateOperationsInput | number
    totalSacado?: FloatFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsuarioCreateWithoutDadosBancariosInput = {
    id?: string
    nome: string
    email: string
    senha: string
    tipo?: string
    sementes?: number
    nivel?: string
    pontuacao?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
    criador?: CriadorCreateNestedOneWithoutUsuarioInput
    parceiro?: ParceiroCreateNestedOneWithoutUsuarioInput
    sementesHistorico?: SementeCreateNestedManyWithoutUsuarioInput
    doacoesFeitas?: DoacaoCreateNestedManyWithoutDoadorInput
    transacoes?: TransacaoCreateNestedManyWithoutUsuarioInput
    notificacoes?: NotificacaoCreateNestedManyWithoutUsuarioInput
    candidaturas?: CandidaturaCriadorCreateNestedManyWithoutUsuarioInput
    logsAuditoria?: LogAuditoriaCreateNestedManyWithoutUsuarioInput
    carteira?: CarteiraDigitalCreateNestedOneWithoutUsuarioInput
    saques?: SaqueCreateNestedManyWithoutUsuarioInput
    pagamentos?: PagamentoCreateNestedManyWithoutUsuarioInput
    tokensRecuperacao?: TokenRecuperacaoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutDadosBancariosInput = {
    id?: string
    nome: string
    email: string
    senha: string
    tipo?: string
    sementes?: number
    nivel?: string
    pontuacao?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
    criador?: CriadorUncheckedCreateNestedOneWithoutUsuarioInput
    parceiro?: ParceiroUncheckedCreateNestedOneWithoutUsuarioInput
    sementesHistorico?: SementeUncheckedCreateNestedManyWithoutUsuarioInput
    doacoesFeitas?: DoacaoUncheckedCreateNestedManyWithoutDoadorInput
    transacoes?: TransacaoUncheckedCreateNestedManyWithoutUsuarioInput
    notificacoes?: NotificacaoUncheckedCreateNestedManyWithoutUsuarioInput
    candidaturas?: CandidaturaCriadorUncheckedCreateNestedManyWithoutUsuarioInput
    logsAuditoria?: LogAuditoriaUncheckedCreateNestedManyWithoutUsuarioInput
    carteira?: CarteiraDigitalUncheckedCreateNestedOneWithoutUsuarioInput
    saques?: SaqueUncheckedCreateNestedManyWithoutUsuarioInput
    pagamentos?: PagamentoUncheckedCreateNestedManyWithoutUsuarioInput
    tokensRecuperacao?: TokenRecuperacaoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutDadosBancariosInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutDadosBancariosInput, UsuarioUncheckedCreateWithoutDadosBancariosInput>
  }

  export type UsuarioUpsertWithoutDadosBancariosInput = {
    update: XOR<UsuarioUpdateWithoutDadosBancariosInput, UsuarioUncheckedUpdateWithoutDadosBancariosInput>
    create: XOR<UsuarioCreateWithoutDadosBancariosInput, UsuarioUncheckedCreateWithoutDadosBancariosInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutDadosBancariosInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutDadosBancariosInput, UsuarioUncheckedUpdateWithoutDadosBancariosInput>
  }

  export type UsuarioUpdateWithoutDadosBancariosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    nivel?: StringFieldUpdateOperationsInput | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criador?: CriadorUpdateOneWithoutUsuarioNestedInput
    parceiro?: ParceiroUpdateOneWithoutUsuarioNestedInput
    sementesHistorico?: SementeUpdateManyWithoutUsuarioNestedInput
    doacoesFeitas?: DoacaoUpdateManyWithoutDoadorNestedInput
    transacoes?: TransacaoUpdateManyWithoutUsuarioNestedInput
    notificacoes?: NotificacaoUpdateManyWithoutUsuarioNestedInput
    candidaturas?: CandidaturaCriadorUpdateManyWithoutUsuarioNestedInput
    logsAuditoria?: LogAuditoriaUpdateManyWithoutUsuarioNestedInput
    carteira?: CarteiraDigitalUpdateOneWithoutUsuarioNestedInput
    saques?: SaqueUpdateManyWithoutUsuarioNestedInput
    pagamentos?: PagamentoUpdateManyWithoutUsuarioNestedInput
    tokensRecuperacao?: TokenRecuperacaoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutDadosBancariosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    nivel?: StringFieldUpdateOperationsInput | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criador?: CriadorUncheckedUpdateOneWithoutUsuarioNestedInput
    parceiro?: ParceiroUncheckedUpdateOneWithoutUsuarioNestedInput
    sementesHistorico?: SementeUncheckedUpdateManyWithoutUsuarioNestedInput
    doacoesFeitas?: DoacaoUncheckedUpdateManyWithoutDoadorNestedInput
    transacoes?: TransacaoUncheckedUpdateManyWithoutUsuarioNestedInput
    notificacoes?: NotificacaoUncheckedUpdateManyWithoutUsuarioNestedInput
    candidaturas?: CandidaturaCriadorUncheckedUpdateManyWithoutUsuarioNestedInput
    logsAuditoria?: LogAuditoriaUncheckedUpdateManyWithoutUsuarioNestedInput
    carteira?: CarteiraDigitalUncheckedUpdateOneWithoutUsuarioNestedInput
    saques?: SaqueUncheckedUpdateManyWithoutUsuarioNestedInput
    pagamentos?: PagamentoUncheckedUpdateManyWithoutUsuarioNestedInput
    tokensRecuperacao?: TokenRecuperacaoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateWithoutSaquesInput = {
    id?: string
    nome: string
    email: string
    senha: string
    tipo?: string
    sementes?: number
    nivel?: string
    pontuacao?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
    criador?: CriadorCreateNestedOneWithoutUsuarioInput
    parceiro?: ParceiroCreateNestedOneWithoutUsuarioInput
    sementesHistorico?: SementeCreateNestedManyWithoutUsuarioInput
    doacoesFeitas?: DoacaoCreateNestedManyWithoutDoadorInput
    transacoes?: TransacaoCreateNestedManyWithoutUsuarioInput
    notificacoes?: NotificacaoCreateNestedManyWithoutUsuarioInput
    candidaturas?: CandidaturaCriadorCreateNestedManyWithoutUsuarioInput
    logsAuditoria?: LogAuditoriaCreateNestedManyWithoutUsuarioInput
    carteira?: CarteiraDigitalCreateNestedOneWithoutUsuarioInput
    dadosBancarios?: DadosBancariosCreateNestedOneWithoutUsuarioInput
    pagamentos?: PagamentoCreateNestedManyWithoutUsuarioInput
    tokensRecuperacao?: TokenRecuperacaoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutSaquesInput = {
    id?: string
    nome: string
    email: string
    senha: string
    tipo?: string
    sementes?: number
    nivel?: string
    pontuacao?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
    criador?: CriadorUncheckedCreateNestedOneWithoutUsuarioInput
    parceiro?: ParceiroUncheckedCreateNestedOneWithoutUsuarioInput
    sementesHistorico?: SementeUncheckedCreateNestedManyWithoutUsuarioInput
    doacoesFeitas?: DoacaoUncheckedCreateNestedManyWithoutDoadorInput
    transacoes?: TransacaoUncheckedCreateNestedManyWithoutUsuarioInput
    notificacoes?: NotificacaoUncheckedCreateNestedManyWithoutUsuarioInput
    candidaturas?: CandidaturaCriadorUncheckedCreateNestedManyWithoutUsuarioInput
    logsAuditoria?: LogAuditoriaUncheckedCreateNestedManyWithoutUsuarioInput
    carteira?: CarteiraDigitalUncheckedCreateNestedOneWithoutUsuarioInput
    dadosBancarios?: DadosBancariosUncheckedCreateNestedOneWithoutUsuarioInput
    pagamentos?: PagamentoUncheckedCreateNestedManyWithoutUsuarioInput
    tokensRecuperacao?: TokenRecuperacaoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutSaquesInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutSaquesInput, UsuarioUncheckedCreateWithoutSaquesInput>
  }

  export type UsuarioUpsertWithoutSaquesInput = {
    update: XOR<UsuarioUpdateWithoutSaquesInput, UsuarioUncheckedUpdateWithoutSaquesInput>
    create: XOR<UsuarioCreateWithoutSaquesInput, UsuarioUncheckedCreateWithoutSaquesInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutSaquesInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutSaquesInput, UsuarioUncheckedUpdateWithoutSaquesInput>
  }

  export type UsuarioUpdateWithoutSaquesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    nivel?: StringFieldUpdateOperationsInput | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criador?: CriadorUpdateOneWithoutUsuarioNestedInput
    parceiro?: ParceiroUpdateOneWithoutUsuarioNestedInput
    sementesHistorico?: SementeUpdateManyWithoutUsuarioNestedInput
    doacoesFeitas?: DoacaoUpdateManyWithoutDoadorNestedInput
    transacoes?: TransacaoUpdateManyWithoutUsuarioNestedInput
    notificacoes?: NotificacaoUpdateManyWithoutUsuarioNestedInput
    candidaturas?: CandidaturaCriadorUpdateManyWithoutUsuarioNestedInput
    logsAuditoria?: LogAuditoriaUpdateManyWithoutUsuarioNestedInput
    carteira?: CarteiraDigitalUpdateOneWithoutUsuarioNestedInput
    dadosBancarios?: DadosBancariosUpdateOneWithoutUsuarioNestedInput
    pagamentos?: PagamentoUpdateManyWithoutUsuarioNestedInput
    tokensRecuperacao?: TokenRecuperacaoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutSaquesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    nivel?: StringFieldUpdateOperationsInput | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criador?: CriadorUncheckedUpdateOneWithoutUsuarioNestedInput
    parceiro?: ParceiroUncheckedUpdateOneWithoutUsuarioNestedInput
    sementesHistorico?: SementeUncheckedUpdateManyWithoutUsuarioNestedInput
    doacoesFeitas?: DoacaoUncheckedUpdateManyWithoutDoadorNestedInput
    transacoes?: TransacaoUncheckedUpdateManyWithoutUsuarioNestedInput
    notificacoes?: NotificacaoUncheckedUpdateManyWithoutUsuarioNestedInput
    candidaturas?: CandidaturaCriadorUncheckedUpdateManyWithoutUsuarioNestedInput
    logsAuditoria?: LogAuditoriaUncheckedUpdateManyWithoutUsuarioNestedInput
    carteira?: CarteiraDigitalUncheckedUpdateOneWithoutUsuarioNestedInput
    dadosBancarios?: DadosBancariosUncheckedUpdateOneWithoutUsuarioNestedInput
    pagamentos?: PagamentoUncheckedUpdateManyWithoutUsuarioNestedInput
    tokensRecuperacao?: TokenRecuperacaoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateWithoutPagamentosInput = {
    id?: string
    nome: string
    email: string
    senha: string
    tipo?: string
    sementes?: number
    nivel?: string
    pontuacao?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
    criador?: CriadorCreateNestedOneWithoutUsuarioInput
    parceiro?: ParceiroCreateNestedOneWithoutUsuarioInput
    sementesHistorico?: SementeCreateNestedManyWithoutUsuarioInput
    doacoesFeitas?: DoacaoCreateNestedManyWithoutDoadorInput
    transacoes?: TransacaoCreateNestedManyWithoutUsuarioInput
    notificacoes?: NotificacaoCreateNestedManyWithoutUsuarioInput
    candidaturas?: CandidaturaCriadorCreateNestedManyWithoutUsuarioInput
    logsAuditoria?: LogAuditoriaCreateNestedManyWithoutUsuarioInput
    carteira?: CarteiraDigitalCreateNestedOneWithoutUsuarioInput
    dadosBancarios?: DadosBancariosCreateNestedOneWithoutUsuarioInput
    saques?: SaqueCreateNestedManyWithoutUsuarioInput
    tokensRecuperacao?: TokenRecuperacaoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutPagamentosInput = {
    id?: string
    nome: string
    email: string
    senha: string
    tipo?: string
    sementes?: number
    nivel?: string
    pontuacao?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
    criador?: CriadorUncheckedCreateNestedOneWithoutUsuarioInput
    parceiro?: ParceiroUncheckedCreateNestedOneWithoutUsuarioInput
    sementesHistorico?: SementeUncheckedCreateNestedManyWithoutUsuarioInput
    doacoesFeitas?: DoacaoUncheckedCreateNestedManyWithoutDoadorInput
    transacoes?: TransacaoUncheckedCreateNestedManyWithoutUsuarioInput
    notificacoes?: NotificacaoUncheckedCreateNestedManyWithoutUsuarioInput
    candidaturas?: CandidaturaCriadorUncheckedCreateNestedManyWithoutUsuarioInput
    logsAuditoria?: LogAuditoriaUncheckedCreateNestedManyWithoutUsuarioInput
    carteira?: CarteiraDigitalUncheckedCreateNestedOneWithoutUsuarioInput
    dadosBancarios?: DadosBancariosUncheckedCreateNestedOneWithoutUsuarioInput
    saques?: SaqueUncheckedCreateNestedManyWithoutUsuarioInput
    tokensRecuperacao?: TokenRecuperacaoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutPagamentosInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutPagamentosInput, UsuarioUncheckedCreateWithoutPagamentosInput>
  }

  export type UsuarioUpsertWithoutPagamentosInput = {
    update: XOR<UsuarioUpdateWithoutPagamentosInput, UsuarioUncheckedUpdateWithoutPagamentosInput>
    create: XOR<UsuarioCreateWithoutPagamentosInput, UsuarioUncheckedCreateWithoutPagamentosInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutPagamentosInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutPagamentosInput, UsuarioUncheckedUpdateWithoutPagamentosInput>
  }

  export type UsuarioUpdateWithoutPagamentosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    nivel?: StringFieldUpdateOperationsInput | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criador?: CriadorUpdateOneWithoutUsuarioNestedInput
    parceiro?: ParceiroUpdateOneWithoutUsuarioNestedInput
    sementesHistorico?: SementeUpdateManyWithoutUsuarioNestedInput
    doacoesFeitas?: DoacaoUpdateManyWithoutDoadorNestedInput
    transacoes?: TransacaoUpdateManyWithoutUsuarioNestedInput
    notificacoes?: NotificacaoUpdateManyWithoutUsuarioNestedInput
    candidaturas?: CandidaturaCriadorUpdateManyWithoutUsuarioNestedInput
    logsAuditoria?: LogAuditoriaUpdateManyWithoutUsuarioNestedInput
    carteira?: CarteiraDigitalUpdateOneWithoutUsuarioNestedInput
    dadosBancarios?: DadosBancariosUpdateOneWithoutUsuarioNestedInput
    saques?: SaqueUpdateManyWithoutUsuarioNestedInput
    tokensRecuperacao?: TokenRecuperacaoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutPagamentosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    nivel?: StringFieldUpdateOperationsInput | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criador?: CriadorUncheckedUpdateOneWithoutUsuarioNestedInput
    parceiro?: ParceiroUncheckedUpdateOneWithoutUsuarioNestedInput
    sementesHistorico?: SementeUncheckedUpdateManyWithoutUsuarioNestedInput
    doacoesFeitas?: DoacaoUncheckedUpdateManyWithoutDoadorNestedInput
    transacoes?: TransacaoUncheckedUpdateManyWithoutUsuarioNestedInput
    notificacoes?: NotificacaoUncheckedUpdateManyWithoutUsuarioNestedInput
    candidaturas?: CandidaturaCriadorUncheckedUpdateManyWithoutUsuarioNestedInput
    logsAuditoria?: LogAuditoriaUncheckedUpdateManyWithoutUsuarioNestedInput
    carteira?: CarteiraDigitalUncheckedUpdateOneWithoutUsuarioNestedInput
    dadosBancarios?: DadosBancariosUncheckedUpdateOneWithoutUsuarioNestedInput
    saques?: SaqueUncheckedUpdateManyWithoutUsuarioNestedInput
    tokensRecuperacao?: TokenRecuperacaoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateWithoutCriadorInput = {
    id?: string
    nome: string
    email: string
    senha: string
    tipo?: string
    sementes?: number
    nivel?: string
    pontuacao?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
    parceiro?: ParceiroCreateNestedOneWithoutUsuarioInput
    sementesHistorico?: SementeCreateNestedManyWithoutUsuarioInput
    doacoesFeitas?: DoacaoCreateNestedManyWithoutDoadorInput
    transacoes?: TransacaoCreateNestedManyWithoutUsuarioInput
    notificacoes?: NotificacaoCreateNestedManyWithoutUsuarioInput
    candidaturas?: CandidaturaCriadorCreateNestedManyWithoutUsuarioInput
    logsAuditoria?: LogAuditoriaCreateNestedManyWithoutUsuarioInput
    carteira?: CarteiraDigitalCreateNestedOneWithoutUsuarioInput
    dadosBancarios?: DadosBancariosCreateNestedOneWithoutUsuarioInput
    saques?: SaqueCreateNestedManyWithoutUsuarioInput
    pagamentos?: PagamentoCreateNestedManyWithoutUsuarioInput
    tokensRecuperacao?: TokenRecuperacaoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutCriadorInput = {
    id?: string
    nome: string
    email: string
    senha: string
    tipo?: string
    sementes?: number
    nivel?: string
    pontuacao?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
    parceiro?: ParceiroUncheckedCreateNestedOneWithoutUsuarioInput
    sementesHistorico?: SementeUncheckedCreateNestedManyWithoutUsuarioInput
    doacoesFeitas?: DoacaoUncheckedCreateNestedManyWithoutDoadorInput
    transacoes?: TransacaoUncheckedCreateNestedManyWithoutUsuarioInput
    notificacoes?: NotificacaoUncheckedCreateNestedManyWithoutUsuarioInput
    candidaturas?: CandidaturaCriadorUncheckedCreateNestedManyWithoutUsuarioInput
    logsAuditoria?: LogAuditoriaUncheckedCreateNestedManyWithoutUsuarioInput
    carteira?: CarteiraDigitalUncheckedCreateNestedOneWithoutUsuarioInput
    dadosBancarios?: DadosBancariosUncheckedCreateNestedOneWithoutUsuarioInput
    saques?: SaqueUncheckedCreateNestedManyWithoutUsuarioInput
    pagamentos?: PagamentoUncheckedCreateNestedManyWithoutUsuarioInput
    tokensRecuperacao?: TokenRecuperacaoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutCriadorInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutCriadorInput, UsuarioUncheckedCreateWithoutCriadorInput>
  }

  export type DoacaoCreateWithoutCriadorInput = {
    id?: string
    quantidade: number
    data?: Date | string
    mensagem?: string | null
    doador: UsuarioCreateNestedOneWithoutDoacoesFeitasInput
  }

  export type DoacaoUncheckedCreateWithoutCriadorInput = {
    id?: string
    doadorId: string
    quantidade: number
    data?: Date | string
    mensagem?: string | null
  }

  export type DoacaoCreateOrConnectWithoutCriadorInput = {
    where: DoacaoWhereUniqueInput
    create: XOR<DoacaoCreateWithoutCriadorInput, DoacaoUncheckedCreateWithoutCriadorInput>
  }

  export type DoacaoCreateManyCriadorInputEnvelope = {
    data: DoacaoCreateManyCriadorInput | DoacaoCreateManyCriadorInput[]
  }

  export type UsuarioUpsertWithoutCriadorInput = {
    update: XOR<UsuarioUpdateWithoutCriadorInput, UsuarioUncheckedUpdateWithoutCriadorInput>
    create: XOR<UsuarioCreateWithoutCriadorInput, UsuarioUncheckedCreateWithoutCriadorInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutCriadorInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutCriadorInput, UsuarioUncheckedUpdateWithoutCriadorInput>
  }

  export type UsuarioUpdateWithoutCriadorInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    nivel?: StringFieldUpdateOperationsInput | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    parceiro?: ParceiroUpdateOneWithoutUsuarioNestedInput
    sementesHistorico?: SementeUpdateManyWithoutUsuarioNestedInput
    doacoesFeitas?: DoacaoUpdateManyWithoutDoadorNestedInput
    transacoes?: TransacaoUpdateManyWithoutUsuarioNestedInput
    notificacoes?: NotificacaoUpdateManyWithoutUsuarioNestedInput
    candidaturas?: CandidaturaCriadorUpdateManyWithoutUsuarioNestedInput
    logsAuditoria?: LogAuditoriaUpdateManyWithoutUsuarioNestedInput
    carteira?: CarteiraDigitalUpdateOneWithoutUsuarioNestedInput
    dadosBancarios?: DadosBancariosUpdateOneWithoutUsuarioNestedInput
    saques?: SaqueUpdateManyWithoutUsuarioNestedInput
    pagamentos?: PagamentoUpdateManyWithoutUsuarioNestedInput
    tokensRecuperacao?: TokenRecuperacaoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutCriadorInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    nivel?: StringFieldUpdateOperationsInput | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    parceiro?: ParceiroUncheckedUpdateOneWithoutUsuarioNestedInput
    sementesHistorico?: SementeUncheckedUpdateManyWithoutUsuarioNestedInput
    doacoesFeitas?: DoacaoUncheckedUpdateManyWithoutDoadorNestedInput
    transacoes?: TransacaoUncheckedUpdateManyWithoutUsuarioNestedInput
    notificacoes?: NotificacaoUncheckedUpdateManyWithoutUsuarioNestedInput
    candidaturas?: CandidaturaCriadorUncheckedUpdateManyWithoutUsuarioNestedInput
    logsAuditoria?: LogAuditoriaUncheckedUpdateManyWithoutUsuarioNestedInput
    carteira?: CarteiraDigitalUncheckedUpdateOneWithoutUsuarioNestedInput
    dadosBancarios?: DadosBancariosUncheckedUpdateOneWithoutUsuarioNestedInput
    saques?: SaqueUncheckedUpdateManyWithoutUsuarioNestedInput
    pagamentos?: PagamentoUncheckedUpdateManyWithoutUsuarioNestedInput
    tokensRecuperacao?: TokenRecuperacaoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type DoacaoUpsertWithWhereUniqueWithoutCriadorInput = {
    where: DoacaoWhereUniqueInput
    update: XOR<DoacaoUpdateWithoutCriadorInput, DoacaoUncheckedUpdateWithoutCriadorInput>
    create: XOR<DoacaoCreateWithoutCriadorInput, DoacaoUncheckedCreateWithoutCriadorInput>
  }

  export type DoacaoUpdateWithWhereUniqueWithoutCriadorInput = {
    where: DoacaoWhereUniqueInput
    data: XOR<DoacaoUpdateWithoutCriadorInput, DoacaoUncheckedUpdateWithoutCriadorInput>
  }

  export type DoacaoUpdateManyWithWhereWithoutCriadorInput = {
    where: DoacaoScalarWhereInput
    data: XOR<DoacaoUpdateManyMutationInput, DoacaoUncheckedUpdateManyWithoutCriadorInput>
  }

  export type UsuarioCreateWithoutCandidaturasInput = {
    id?: string
    nome: string
    email: string
    senha: string
    tipo?: string
    sementes?: number
    nivel?: string
    pontuacao?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
    criador?: CriadorCreateNestedOneWithoutUsuarioInput
    parceiro?: ParceiroCreateNestedOneWithoutUsuarioInput
    sementesHistorico?: SementeCreateNestedManyWithoutUsuarioInput
    doacoesFeitas?: DoacaoCreateNestedManyWithoutDoadorInput
    transacoes?: TransacaoCreateNestedManyWithoutUsuarioInput
    notificacoes?: NotificacaoCreateNestedManyWithoutUsuarioInput
    logsAuditoria?: LogAuditoriaCreateNestedManyWithoutUsuarioInput
    carteira?: CarteiraDigitalCreateNestedOneWithoutUsuarioInput
    dadosBancarios?: DadosBancariosCreateNestedOneWithoutUsuarioInput
    saques?: SaqueCreateNestedManyWithoutUsuarioInput
    pagamentos?: PagamentoCreateNestedManyWithoutUsuarioInput
    tokensRecuperacao?: TokenRecuperacaoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutCandidaturasInput = {
    id?: string
    nome: string
    email: string
    senha: string
    tipo?: string
    sementes?: number
    nivel?: string
    pontuacao?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
    criador?: CriadorUncheckedCreateNestedOneWithoutUsuarioInput
    parceiro?: ParceiroUncheckedCreateNestedOneWithoutUsuarioInput
    sementesHistorico?: SementeUncheckedCreateNestedManyWithoutUsuarioInput
    doacoesFeitas?: DoacaoUncheckedCreateNestedManyWithoutDoadorInput
    transacoes?: TransacaoUncheckedCreateNestedManyWithoutUsuarioInput
    notificacoes?: NotificacaoUncheckedCreateNestedManyWithoutUsuarioInput
    logsAuditoria?: LogAuditoriaUncheckedCreateNestedManyWithoutUsuarioInput
    carteira?: CarteiraDigitalUncheckedCreateNestedOneWithoutUsuarioInput
    dadosBancarios?: DadosBancariosUncheckedCreateNestedOneWithoutUsuarioInput
    saques?: SaqueUncheckedCreateNestedManyWithoutUsuarioInput
    pagamentos?: PagamentoUncheckedCreateNestedManyWithoutUsuarioInput
    tokensRecuperacao?: TokenRecuperacaoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutCandidaturasInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutCandidaturasInput, UsuarioUncheckedCreateWithoutCandidaturasInput>
  }

  export type UsuarioUpsertWithoutCandidaturasInput = {
    update: XOR<UsuarioUpdateWithoutCandidaturasInput, UsuarioUncheckedUpdateWithoutCandidaturasInput>
    create: XOR<UsuarioCreateWithoutCandidaturasInput, UsuarioUncheckedCreateWithoutCandidaturasInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutCandidaturasInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutCandidaturasInput, UsuarioUncheckedUpdateWithoutCandidaturasInput>
  }

  export type UsuarioUpdateWithoutCandidaturasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    nivel?: StringFieldUpdateOperationsInput | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criador?: CriadorUpdateOneWithoutUsuarioNestedInput
    parceiro?: ParceiroUpdateOneWithoutUsuarioNestedInput
    sementesHistorico?: SementeUpdateManyWithoutUsuarioNestedInput
    doacoesFeitas?: DoacaoUpdateManyWithoutDoadorNestedInput
    transacoes?: TransacaoUpdateManyWithoutUsuarioNestedInput
    notificacoes?: NotificacaoUpdateManyWithoutUsuarioNestedInput
    logsAuditoria?: LogAuditoriaUpdateManyWithoutUsuarioNestedInput
    carteira?: CarteiraDigitalUpdateOneWithoutUsuarioNestedInput
    dadosBancarios?: DadosBancariosUpdateOneWithoutUsuarioNestedInput
    saques?: SaqueUpdateManyWithoutUsuarioNestedInput
    pagamentos?: PagamentoUpdateManyWithoutUsuarioNestedInput
    tokensRecuperacao?: TokenRecuperacaoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutCandidaturasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    nivel?: StringFieldUpdateOperationsInput | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criador?: CriadorUncheckedUpdateOneWithoutUsuarioNestedInput
    parceiro?: ParceiroUncheckedUpdateOneWithoutUsuarioNestedInput
    sementesHistorico?: SementeUncheckedUpdateManyWithoutUsuarioNestedInput
    doacoesFeitas?: DoacaoUncheckedUpdateManyWithoutDoadorNestedInput
    transacoes?: TransacaoUncheckedUpdateManyWithoutUsuarioNestedInput
    notificacoes?: NotificacaoUncheckedUpdateManyWithoutUsuarioNestedInput
    logsAuditoria?: LogAuditoriaUncheckedUpdateManyWithoutUsuarioNestedInput
    carteira?: CarteiraDigitalUncheckedUpdateOneWithoutUsuarioNestedInput
    dadosBancarios?: DadosBancariosUncheckedUpdateOneWithoutUsuarioNestedInput
    saques?: SaqueUncheckedUpdateManyWithoutUsuarioNestedInput
    pagamentos?: PagamentoUncheckedUpdateManyWithoutUsuarioNestedInput
    tokensRecuperacao?: TokenRecuperacaoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateWithoutLogsAuditoriaInput = {
    id?: string
    nome: string
    email: string
    senha: string
    tipo?: string
    sementes?: number
    nivel?: string
    pontuacao?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
    criador?: CriadorCreateNestedOneWithoutUsuarioInput
    parceiro?: ParceiroCreateNestedOneWithoutUsuarioInput
    sementesHistorico?: SementeCreateNestedManyWithoutUsuarioInput
    doacoesFeitas?: DoacaoCreateNestedManyWithoutDoadorInput
    transacoes?: TransacaoCreateNestedManyWithoutUsuarioInput
    notificacoes?: NotificacaoCreateNestedManyWithoutUsuarioInput
    candidaturas?: CandidaturaCriadorCreateNestedManyWithoutUsuarioInput
    carteira?: CarteiraDigitalCreateNestedOneWithoutUsuarioInput
    dadosBancarios?: DadosBancariosCreateNestedOneWithoutUsuarioInput
    saques?: SaqueCreateNestedManyWithoutUsuarioInput
    pagamentos?: PagamentoCreateNestedManyWithoutUsuarioInput
    tokensRecuperacao?: TokenRecuperacaoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutLogsAuditoriaInput = {
    id?: string
    nome: string
    email: string
    senha: string
    tipo?: string
    sementes?: number
    nivel?: string
    pontuacao?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
    criador?: CriadorUncheckedCreateNestedOneWithoutUsuarioInput
    parceiro?: ParceiroUncheckedCreateNestedOneWithoutUsuarioInput
    sementesHistorico?: SementeUncheckedCreateNestedManyWithoutUsuarioInput
    doacoesFeitas?: DoacaoUncheckedCreateNestedManyWithoutDoadorInput
    transacoes?: TransacaoUncheckedCreateNestedManyWithoutUsuarioInput
    notificacoes?: NotificacaoUncheckedCreateNestedManyWithoutUsuarioInput
    candidaturas?: CandidaturaCriadorUncheckedCreateNestedManyWithoutUsuarioInput
    carteira?: CarteiraDigitalUncheckedCreateNestedOneWithoutUsuarioInput
    dadosBancarios?: DadosBancariosUncheckedCreateNestedOneWithoutUsuarioInput
    saques?: SaqueUncheckedCreateNestedManyWithoutUsuarioInput
    pagamentos?: PagamentoUncheckedCreateNestedManyWithoutUsuarioInput
    tokensRecuperacao?: TokenRecuperacaoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutLogsAuditoriaInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutLogsAuditoriaInput, UsuarioUncheckedCreateWithoutLogsAuditoriaInput>
  }

  export type UsuarioUpsertWithoutLogsAuditoriaInput = {
    update: XOR<UsuarioUpdateWithoutLogsAuditoriaInput, UsuarioUncheckedUpdateWithoutLogsAuditoriaInput>
    create: XOR<UsuarioCreateWithoutLogsAuditoriaInput, UsuarioUncheckedCreateWithoutLogsAuditoriaInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutLogsAuditoriaInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutLogsAuditoriaInput, UsuarioUncheckedUpdateWithoutLogsAuditoriaInput>
  }

  export type UsuarioUpdateWithoutLogsAuditoriaInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    nivel?: StringFieldUpdateOperationsInput | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criador?: CriadorUpdateOneWithoutUsuarioNestedInput
    parceiro?: ParceiroUpdateOneWithoutUsuarioNestedInput
    sementesHistorico?: SementeUpdateManyWithoutUsuarioNestedInput
    doacoesFeitas?: DoacaoUpdateManyWithoutDoadorNestedInput
    transacoes?: TransacaoUpdateManyWithoutUsuarioNestedInput
    notificacoes?: NotificacaoUpdateManyWithoutUsuarioNestedInput
    candidaturas?: CandidaturaCriadorUpdateManyWithoutUsuarioNestedInput
    carteira?: CarteiraDigitalUpdateOneWithoutUsuarioNestedInput
    dadosBancarios?: DadosBancariosUpdateOneWithoutUsuarioNestedInput
    saques?: SaqueUpdateManyWithoutUsuarioNestedInput
    pagamentos?: PagamentoUpdateManyWithoutUsuarioNestedInput
    tokensRecuperacao?: TokenRecuperacaoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutLogsAuditoriaInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    nivel?: StringFieldUpdateOperationsInput | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criador?: CriadorUncheckedUpdateOneWithoutUsuarioNestedInput
    parceiro?: ParceiroUncheckedUpdateOneWithoutUsuarioNestedInput
    sementesHistorico?: SementeUncheckedUpdateManyWithoutUsuarioNestedInput
    doacoesFeitas?: DoacaoUncheckedUpdateManyWithoutDoadorNestedInput
    transacoes?: TransacaoUncheckedUpdateManyWithoutUsuarioNestedInput
    notificacoes?: NotificacaoUncheckedUpdateManyWithoutUsuarioNestedInput
    candidaturas?: CandidaturaCriadorUncheckedUpdateManyWithoutUsuarioNestedInput
    carteira?: CarteiraDigitalUncheckedUpdateOneWithoutUsuarioNestedInput
    dadosBancarios?: DadosBancariosUncheckedUpdateOneWithoutUsuarioNestedInput
    saques?: SaqueUncheckedUpdateManyWithoutUsuarioNestedInput
    pagamentos?: PagamentoUncheckedUpdateManyWithoutUsuarioNestedInput
    tokensRecuperacao?: TokenRecuperacaoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateWithoutParceiroInput = {
    id?: string
    nome: string
    email: string
    senha: string
    tipo?: string
    sementes?: number
    nivel?: string
    pontuacao?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
    criador?: CriadorCreateNestedOneWithoutUsuarioInput
    sementesHistorico?: SementeCreateNestedManyWithoutUsuarioInput
    doacoesFeitas?: DoacaoCreateNestedManyWithoutDoadorInput
    transacoes?: TransacaoCreateNestedManyWithoutUsuarioInput
    notificacoes?: NotificacaoCreateNestedManyWithoutUsuarioInput
    candidaturas?: CandidaturaCriadorCreateNestedManyWithoutUsuarioInput
    logsAuditoria?: LogAuditoriaCreateNestedManyWithoutUsuarioInput
    carteira?: CarteiraDigitalCreateNestedOneWithoutUsuarioInput
    dadosBancarios?: DadosBancariosCreateNestedOneWithoutUsuarioInput
    saques?: SaqueCreateNestedManyWithoutUsuarioInput
    pagamentos?: PagamentoCreateNestedManyWithoutUsuarioInput
    tokensRecuperacao?: TokenRecuperacaoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutParceiroInput = {
    id?: string
    nome: string
    email: string
    senha: string
    tipo?: string
    sementes?: number
    nivel?: string
    pontuacao?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
    criador?: CriadorUncheckedCreateNestedOneWithoutUsuarioInput
    sementesHistorico?: SementeUncheckedCreateNestedManyWithoutUsuarioInput
    doacoesFeitas?: DoacaoUncheckedCreateNestedManyWithoutDoadorInput
    transacoes?: TransacaoUncheckedCreateNestedManyWithoutUsuarioInput
    notificacoes?: NotificacaoUncheckedCreateNestedManyWithoutUsuarioInput
    candidaturas?: CandidaturaCriadorUncheckedCreateNestedManyWithoutUsuarioInput
    logsAuditoria?: LogAuditoriaUncheckedCreateNestedManyWithoutUsuarioInput
    carteira?: CarteiraDigitalUncheckedCreateNestedOneWithoutUsuarioInput
    dadosBancarios?: DadosBancariosUncheckedCreateNestedOneWithoutUsuarioInput
    saques?: SaqueUncheckedCreateNestedManyWithoutUsuarioInput
    pagamentos?: PagamentoUncheckedCreateNestedManyWithoutUsuarioInput
    tokensRecuperacao?: TokenRecuperacaoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutParceiroInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutParceiroInput, UsuarioUncheckedCreateWithoutParceiroInput>
  }

  export type CodigoCashbackCreateWithoutParceiroInput = {
    id?: string
    codigo: string
    valor: number
    usado?: boolean
    dataGeracao?: Date | string
    dataUso?: Date | string | null
  }

  export type CodigoCashbackUncheckedCreateWithoutParceiroInput = {
    id?: string
    codigo: string
    valor: number
    usado?: boolean
    dataGeracao?: Date | string
    dataUso?: Date | string | null
  }

  export type CodigoCashbackCreateOrConnectWithoutParceiroInput = {
    where: CodigoCashbackWhereUniqueInput
    create: XOR<CodigoCashbackCreateWithoutParceiroInput, CodigoCashbackUncheckedCreateWithoutParceiroInput>
  }

  export type CodigoCashbackCreateManyParceiroInputEnvelope = {
    data: CodigoCashbackCreateManyParceiroInput | CodigoCashbackCreateManyParceiroInput[]
  }

  export type UsuarioUpsertWithoutParceiroInput = {
    update: XOR<UsuarioUpdateWithoutParceiroInput, UsuarioUncheckedUpdateWithoutParceiroInput>
    create: XOR<UsuarioCreateWithoutParceiroInput, UsuarioUncheckedCreateWithoutParceiroInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutParceiroInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutParceiroInput, UsuarioUncheckedUpdateWithoutParceiroInput>
  }

  export type UsuarioUpdateWithoutParceiroInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    nivel?: StringFieldUpdateOperationsInput | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criador?: CriadorUpdateOneWithoutUsuarioNestedInput
    sementesHistorico?: SementeUpdateManyWithoutUsuarioNestedInput
    doacoesFeitas?: DoacaoUpdateManyWithoutDoadorNestedInput
    transacoes?: TransacaoUpdateManyWithoutUsuarioNestedInput
    notificacoes?: NotificacaoUpdateManyWithoutUsuarioNestedInput
    candidaturas?: CandidaturaCriadorUpdateManyWithoutUsuarioNestedInput
    logsAuditoria?: LogAuditoriaUpdateManyWithoutUsuarioNestedInput
    carteira?: CarteiraDigitalUpdateOneWithoutUsuarioNestedInput
    dadosBancarios?: DadosBancariosUpdateOneWithoutUsuarioNestedInput
    saques?: SaqueUpdateManyWithoutUsuarioNestedInput
    pagamentos?: PagamentoUpdateManyWithoutUsuarioNestedInput
    tokensRecuperacao?: TokenRecuperacaoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutParceiroInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    nivel?: StringFieldUpdateOperationsInput | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criador?: CriadorUncheckedUpdateOneWithoutUsuarioNestedInput
    sementesHistorico?: SementeUncheckedUpdateManyWithoutUsuarioNestedInput
    doacoesFeitas?: DoacaoUncheckedUpdateManyWithoutDoadorNestedInput
    transacoes?: TransacaoUncheckedUpdateManyWithoutUsuarioNestedInput
    notificacoes?: NotificacaoUncheckedUpdateManyWithoutUsuarioNestedInput
    candidaturas?: CandidaturaCriadorUncheckedUpdateManyWithoutUsuarioNestedInput
    logsAuditoria?: LogAuditoriaUncheckedUpdateManyWithoutUsuarioNestedInput
    carteira?: CarteiraDigitalUncheckedUpdateOneWithoutUsuarioNestedInput
    dadosBancarios?: DadosBancariosUncheckedUpdateOneWithoutUsuarioNestedInput
    saques?: SaqueUncheckedUpdateManyWithoutUsuarioNestedInput
    pagamentos?: PagamentoUncheckedUpdateManyWithoutUsuarioNestedInput
    tokensRecuperacao?: TokenRecuperacaoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type CodigoCashbackUpsertWithWhereUniqueWithoutParceiroInput = {
    where: CodigoCashbackWhereUniqueInput
    update: XOR<CodigoCashbackUpdateWithoutParceiroInput, CodigoCashbackUncheckedUpdateWithoutParceiroInput>
    create: XOR<CodigoCashbackCreateWithoutParceiroInput, CodigoCashbackUncheckedCreateWithoutParceiroInput>
  }

  export type CodigoCashbackUpdateWithWhereUniqueWithoutParceiroInput = {
    where: CodigoCashbackWhereUniqueInput
    data: XOR<CodigoCashbackUpdateWithoutParceiroInput, CodigoCashbackUncheckedUpdateWithoutParceiroInput>
  }

  export type CodigoCashbackUpdateManyWithWhereWithoutParceiroInput = {
    where: CodigoCashbackScalarWhereInput
    data: XOR<CodigoCashbackUpdateManyMutationInput, CodigoCashbackUncheckedUpdateManyWithoutParceiroInput>
  }

  export type CodigoCashbackScalarWhereInput = {
    AND?: CodigoCashbackScalarWhereInput | CodigoCashbackScalarWhereInput[]
    OR?: CodigoCashbackScalarWhereInput[]
    NOT?: CodigoCashbackScalarWhereInput | CodigoCashbackScalarWhereInput[]
    id?: StringFilter<"CodigoCashback"> | string
    parceiroId?: StringFilter<"CodigoCashback"> | string
    codigo?: StringFilter<"CodigoCashback"> | string
    valor?: FloatFilter<"CodigoCashback"> | number
    usado?: BoolFilter<"CodigoCashback"> | boolean
    dataGeracao?: DateTimeFilter<"CodigoCashback"> | Date | string
    dataUso?: DateTimeNullableFilter<"CodigoCashback"> | Date | string | null
  }

  export type UsuarioCreateWithoutSementesHistoricoInput = {
    id?: string
    nome: string
    email: string
    senha: string
    tipo?: string
    sementes?: number
    nivel?: string
    pontuacao?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
    criador?: CriadorCreateNestedOneWithoutUsuarioInput
    parceiro?: ParceiroCreateNestedOneWithoutUsuarioInput
    doacoesFeitas?: DoacaoCreateNestedManyWithoutDoadorInput
    transacoes?: TransacaoCreateNestedManyWithoutUsuarioInput
    notificacoes?: NotificacaoCreateNestedManyWithoutUsuarioInput
    candidaturas?: CandidaturaCriadorCreateNestedManyWithoutUsuarioInput
    logsAuditoria?: LogAuditoriaCreateNestedManyWithoutUsuarioInput
    carteira?: CarteiraDigitalCreateNestedOneWithoutUsuarioInput
    dadosBancarios?: DadosBancariosCreateNestedOneWithoutUsuarioInput
    saques?: SaqueCreateNestedManyWithoutUsuarioInput
    pagamentos?: PagamentoCreateNestedManyWithoutUsuarioInput
    tokensRecuperacao?: TokenRecuperacaoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutSementesHistoricoInput = {
    id?: string
    nome: string
    email: string
    senha: string
    tipo?: string
    sementes?: number
    nivel?: string
    pontuacao?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
    criador?: CriadorUncheckedCreateNestedOneWithoutUsuarioInput
    parceiro?: ParceiroUncheckedCreateNestedOneWithoutUsuarioInput
    doacoesFeitas?: DoacaoUncheckedCreateNestedManyWithoutDoadorInput
    transacoes?: TransacaoUncheckedCreateNestedManyWithoutUsuarioInput
    notificacoes?: NotificacaoUncheckedCreateNestedManyWithoutUsuarioInput
    candidaturas?: CandidaturaCriadorUncheckedCreateNestedManyWithoutUsuarioInput
    logsAuditoria?: LogAuditoriaUncheckedCreateNestedManyWithoutUsuarioInput
    carteira?: CarteiraDigitalUncheckedCreateNestedOneWithoutUsuarioInput
    dadosBancarios?: DadosBancariosUncheckedCreateNestedOneWithoutUsuarioInput
    saques?: SaqueUncheckedCreateNestedManyWithoutUsuarioInput
    pagamentos?: PagamentoUncheckedCreateNestedManyWithoutUsuarioInput
    tokensRecuperacao?: TokenRecuperacaoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutSementesHistoricoInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutSementesHistoricoInput, UsuarioUncheckedCreateWithoutSementesHistoricoInput>
  }

  export type UsuarioUpsertWithoutSementesHistoricoInput = {
    update: XOR<UsuarioUpdateWithoutSementesHistoricoInput, UsuarioUncheckedUpdateWithoutSementesHistoricoInput>
    create: XOR<UsuarioCreateWithoutSementesHistoricoInput, UsuarioUncheckedCreateWithoutSementesHistoricoInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutSementesHistoricoInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutSementesHistoricoInput, UsuarioUncheckedUpdateWithoutSementesHistoricoInput>
  }

  export type UsuarioUpdateWithoutSementesHistoricoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    nivel?: StringFieldUpdateOperationsInput | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criador?: CriadorUpdateOneWithoutUsuarioNestedInput
    parceiro?: ParceiroUpdateOneWithoutUsuarioNestedInput
    doacoesFeitas?: DoacaoUpdateManyWithoutDoadorNestedInput
    transacoes?: TransacaoUpdateManyWithoutUsuarioNestedInput
    notificacoes?: NotificacaoUpdateManyWithoutUsuarioNestedInput
    candidaturas?: CandidaturaCriadorUpdateManyWithoutUsuarioNestedInput
    logsAuditoria?: LogAuditoriaUpdateManyWithoutUsuarioNestedInput
    carteira?: CarteiraDigitalUpdateOneWithoutUsuarioNestedInput
    dadosBancarios?: DadosBancariosUpdateOneWithoutUsuarioNestedInput
    saques?: SaqueUpdateManyWithoutUsuarioNestedInput
    pagamentos?: PagamentoUpdateManyWithoutUsuarioNestedInput
    tokensRecuperacao?: TokenRecuperacaoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutSementesHistoricoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    nivel?: StringFieldUpdateOperationsInput | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criador?: CriadorUncheckedUpdateOneWithoutUsuarioNestedInput
    parceiro?: ParceiroUncheckedUpdateOneWithoutUsuarioNestedInput
    doacoesFeitas?: DoacaoUncheckedUpdateManyWithoutDoadorNestedInput
    transacoes?: TransacaoUncheckedUpdateManyWithoutUsuarioNestedInput
    notificacoes?: NotificacaoUncheckedUpdateManyWithoutUsuarioNestedInput
    candidaturas?: CandidaturaCriadorUncheckedUpdateManyWithoutUsuarioNestedInput
    logsAuditoria?: LogAuditoriaUncheckedUpdateManyWithoutUsuarioNestedInput
    carteira?: CarteiraDigitalUncheckedUpdateOneWithoutUsuarioNestedInput
    dadosBancarios?: DadosBancariosUncheckedUpdateOneWithoutUsuarioNestedInput
    saques?: SaqueUncheckedUpdateManyWithoutUsuarioNestedInput
    pagamentos?: PagamentoUncheckedUpdateManyWithoutUsuarioNestedInput
    tokensRecuperacao?: TokenRecuperacaoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateWithoutDoacoesFeitasInput = {
    id?: string
    nome: string
    email: string
    senha: string
    tipo?: string
    sementes?: number
    nivel?: string
    pontuacao?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
    criador?: CriadorCreateNestedOneWithoutUsuarioInput
    parceiro?: ParceiroCreateNestedOneWithoutUsuarioInput
    sementesHistorico?: SementeCreateNestedManyWithoutUsuarioInput
    transacoes?: TransacaoCreateNestedManyWithoutUsuarioInput
    notificacoes?: NotificacaoCreateNestedManyWithoutUsuarioInput
    candidaturas?: CandidaturaCriadorCreateNestedManyWithoutUsuarioInput
    logsAuditoria?: LogAuditoriaCreateNestedManyWithoutUsuarioInput
    carteira?: CarteiraDigitalCreateNestedOneWithoutUsuarioInput
    dadosBancarios?: DadosBancariosCreateNestedOneWithoutUsuarioInput
    saques?: SaqueCreateNestedManyWithoutUsuarioInput
    pagamentos?: PagamentoCreateNestedManyWithoutUsuarioInput
    tokensRecuperacao?: TokenRecuperacaoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutDoacoesFeitasInput = {
    id?: string
    nome: string
    email: string
    senha: string
    tipo?: string
    sementes?: number
    nivel?: string
    pontuacao?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
    criador?: CriadorUncheckedCreateNestedOneWithoutUsuarioInput
    parceiro?: ParceiroUncheckedCreateNestedOneWithoutUsuarioInput
    sementesHistorico?: SementeUncheckedCreateNestedManyWithoutUsuarioInput
    transacoes?: TransacaoUncheckedCreateNestedManyWithoutUsuarioInput
    notificacoes?: NotificacaoUncheckedCreateNestedManyWithoutUsuarioInput
    candidaturas?: CandidaturaCriadorUncheckedCreateNestedManyWithoutUsuarioInput
    logsAuditoria?: LogAuditoriaUncheckedCreateNestedManyWithoutUsuarioInput
    carteira?: CarteiraDigitalUncheckedCreateNestedOneWithoutUsuarioInput
    dadosBancarios?: DadosBancariosUncheckedCreateNestedOneWithoutUsuarioInput
    saques?: SaqueUncheckedCreateNestedManyWithoutUsuarioInput
    pagamentos?: PagamentoUncheckedCreateNestedManyWithoutUsuarioInput
    tokensRecuperacao?: TokenRecuperacaoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutDoacoesFeitasInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutDoacoesFeitasInput, UsuarioUncheckedCreateWithoutDoacoesFeitasInput>
  }

  export type CriadorCreateWithoutDoacoesRecebidasInput = {
    id?: string
    nome: string
    bio: string
    categoria: string
    redesSociais: string
    portfolio: string
    nivel?: string
    sementes?: number
    apoiadores?: number
    doacoes?: number
    dataCriacao?: Date | string
    usuario: UsuarioCreateNestedOneWithoutCriadorInput
  }

  export type CriadorUncheckedCreateWithoutDoacoesRecebidasInput = {
    id?: string
    usuarioId: string
    nome: string
    bio: string
    categoria: string
    redesSociais: string
    portfolio: string
    nivel?: string
    sementes?: number
    apoiadores?: number
    doacoes?: number
    dataCriacao?: Date | string
  }

  export type CriadorCreateOrConnectWithoutDoacoesRecebidasInput = {
    where: CriadorWhereUniqueInput
    create: XOR<CriadorCreateWithoutDoacoesRecebidasInput, CriadorUncheckedCreateWithoutDoacoesRecebidasInput>
  }

  export type UsuarioUpsertWithoutDoacoesFeitasInput = {
    update: XOR<UsuarioUpdateWithoutDoacoesFeitasInput, UsuarioUncheckedUpdateWithoutDoacoesFeitasInput>
    create: XOR<UsuarioCreateWithoutDoacoesFeitasInput, UsuarioUncheckedCreateWithoutDoacoesFeitasInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutDoacoesFeitasInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutDoacoesFeitasInput, UsuarioUncheckedUpdateWithoutDoacoesFeitasInput>
  }

  export type UsuarioUpdateWithoutDoacoesFeitasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    nivel?: StringFieldUpdateOperationsInput | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criador?: CriadorUpdateOneWithoutUsuarioNestedInput
    parceiro?: ParceiroUpdateOneWithoutUsuarioNestedInput
    sementesHistorico?: SementeUpdateManyWithoutUsuarioNestedInput
    transacoes?: TransacaoUpdateManyWithoutUsuarioNestedInput
    notificacoes?: NotificacaoUpdateManyWithoutUsuarioNestedInput
    candidaturas?: CandidaturaCriadorUpdateManyWithoutUsuarioNestedInput
    logsAuditoria?: LogAuditoriaUpdateManyWithoutUsuarioNestedInput
    carteira?: CarteiraDigitalUpdateOneWithoutUsuarioNestedInput
    dadosBancarios?: DadosBancariosUpdateOneWithoutUsuarioNestedInput
    saques?: SaqueUpdateManyWithoutUsuarioNestedInput
    pagamentos?: PagamentoUpdateManyWithoutUsuarioNestedInput
    tokensRecuperacao?: TokenRecuperacaoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutDoacoesFeitasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    nivel?: StringFieldUpdateOperationsInput | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criador?: CriadorUncheckedUpdateOneWithoutUsuarioNestedInput
    parceiro?: ParceiroUncheckedUpdateOneWithoutUsuarioNestedInput
    sementesHistorico?: SementeUncheckedUpdateManyWithoutUsuarioNestedInput
    transacoes?: TransacaoUncheckedUpdateManyWithoutUsuarioNestedInput
    notificacoes?: NotificacaoUncheckedUpdateManyWithoutUsuarioNestedInput
    candidaturas?: CandidaturaCriadorUncheckedUpdateManyWithoutUsuarioNestedInput
    logsAuditoria?: LogAuditoriaUncheckedUpdateManyWithoutUsuarioNestedInput
    carteira?: CarteiraDigitalUncheckedUpdateOneWithoutUsuarioNestedInput
    dadosBancarios?: DadosBancariosUncheckedUpdateOneWithoutUsuarioNestedInput
    saques?: SaqueUncheckedUpdateManyWithoutUsuarioNestedInput
    pagamentos?: PagamentoUncheckedUpdateManyWithoutUsuarioNestedInput
    tokensRecuperacao?: TokenRecuperacaoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type CriadorUpsertWithoutDoacoesRecebidasInput = {
    update: XOR<CriadorUpdateWithoutDoacoesRecebidasInput, CriadorUncheckedUpdateWithoutDoacoesRecebidasInput>
    create: XOR<CriadorCreateWithoutDoacoesRecebidasInput, CriadorUncheckedCreateWithoutDoacoesRecebidasInput>
    where?: CriadorWhereInput
  }

  export type CriadorUpdateToOneWithWhereWithoutDoacoesRecebidasInput = {
    where?: CriadorWhereInput
    data: XOR<CriadorUpdateWithoutDoacoesRecebidasInput, CriadorUncheckedUpdateWithoutDoacoesRecebidasInput>
  }

  export type CriadorUpdateWithoutDoacoesRecebidasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    redesSociais?: StringFieldUpdateOperationsInput | string
    portfolio?: StringFieldUpdateOperationsInput | string
    nivel?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    apoiadores?: IntFieldUpdateOperationsInput | number
    doacoes?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UsuarioUpdateOneRequiredWithoutCriadorNestedInput
  }

  export type CriadorUncheckedUpdateWithoutDoacoesRecebidasInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    redesSociais?: StringFieldUpdateOperationsInput | string
    portfolio?: StringFieldUpdateOperationsInput | string
    nivel?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    apoiadores?: IntFieldUpdateOperationsInput | number
    doacoes?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsuarioCreateWithoutTransacoesInput = {
    id?: string
    nome: string
    email: string
    senha: string
    tipo?: string
    sementes?: number
    nivel?: string
    pontuacao?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
    criador?: CriadorCreateNestedOneWithoutUsuarioInput
    parceiro?: ParceiroCreateNestedOneWithoutUsuarioInput
    sementesHistorico?: SementeCreateNestedManyWithoutUsuarioInput
    doacoesFeitas?: DoacaoCreateNestedManyWithoutDoadorInput
    notificacoes?: NotificacaoCreateNestedManyWithoutUsuarioInput
    candidaturas?: CandidaturaCriadorCreateNestedManyWithoutUsuarioInput
    logsAuditoria?: LogAuditoriaCreateNestedManyWithoutUsuarioInput
    carteira?: CarteiraDigitalCreateNestedOneWithoutUsuarioInput
    dadosBancarios?: DadosBancariosCreateNestedOneWithoutUsuarioInput
    saques?: SaqueCreateNestedManyWithoutUsuarioInput
    pagamentos?: PagamentoCreateNestedManyWithoutUsuarioInput
    tokensRecuperacao?: TokenRecuperacaoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutTransacoesInput = {
    id?: string
    nome: string
    email: string
    senha: string
    tipo?: string
    sementes?: number
    nivel?: string
    pontuacao?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
    criador?: CriadorUncheckedCreateNestedOneWithoutUsuarioInput
    parceiro?: ParceiroUncheckedCreateNestedOneWithoutUsuarioInput
    sementesHistorico?: SementeUncheckedCreateNestedManyWithoutUsuarioInput
    doacoesFeitas?: DoacaoUncheckedCreateNestedManyWithoutDoadorInput
    notificacoes?: NotificacaoUncheckedCreateNestedManyWithoutUsuarioInput
    candidaturas?: CandidaturaCriadorUncheckedCreateNestedManyWithoutUsuarioInput
    logsAuditoria?: LogAuditoriaUncheckedCreateNestedManyWithoutUsuarioInput
    carteira?: CarteiraDigitalUncheckedCreateNestedOneWithoutUsuarioInput
    dadosBancarios?: DadosBancariosUncheckedCreateNestedOneWithoutUsuarioInput
    saques?: SaqueUncheckedCreateNestedManyWithoutUsuarioInput
    pagamentos?: PagamentoUncheckedCreateNestedManyWithoutUsuarioInput
    tokensRecuperacao?: TokenRecuperacaoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutTransacoesInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutTransacoesInput, UsuarioUncheckedCreateWithoutTransacoesInput>
  }

  export type UsuarioUpsertWithoutTransacoesInput = {
    update: XOR<UsuarioUpdateWithoutTransacoesInput, UsuarioUncheckedUpdateWithoutTransacoesInput>
    create: XOR<UsuarioCreateWithoutTransacoesInput, UsuarioUncheckedCreateWithoutTransacoesInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutTransacoesInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutTransacoesInput, UsuarioUncheckedUpdateWithoutTransacoesInput>
  }

  export type UsuarioUpdateWithoutTransacoesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    nivel?: StringFieldUpdateOperationsInput | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criador?: CriadorUpdateOneWithoutUsuarioNestedInput
    parceiro?: ParceiroUpdateOneWithoutUsuarioNestedInput
    sementesHistorico?: SementeUpdateManyWithoutUsuarioNestedInput
    doacoesFeitas?: DoacaoUpdateManyWithoutDoadorNestedInput
    notificacoes?: NotificacaoUpdateManyWithoutUsuarioNestedInput
    candidaturas?: CandidaturaCriadorUpdateManyWithoutUsuarioNestedInput
    logsAuditoria?: LogAuditoriaUpdateManyWithoutUsuarioNestedInput
    carteira?: CarteiraDigitalUpdateOneWithoutUsuarioNestedInput
    dadosBancarios?: DadosBancariosUpdateOneWithoutUsuarioNestedInput
    saques?: SaqueUpdateManyWithoutUsuarioNestedInput
    pagamentos?: PagamentoUpdateManyWithoutUsuarioNestedInput
    tokensRecuperacao?: TokenRecuperacaoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutTransacoesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    nivel?: StringFieldUpdateOperationsInput | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criador?: CriadorUncheckedUpdateOneWithoutUsuarioNestedInput
    parceiro?: ParceiroUncheckedUpdateOneWithoutUsuarioNestedInput
    sementesHistorico?: SementeUncheckedUpdateManyWithoutUsuarioNestedInput
    doacoesFeitas?: DoacaoUncheckedUpdateManyWithoutDoadorNestedInput
    notificacoes?: NotificacaoUncheckedUpdateManyWithoutUsuarioNestedInput
    candidaturas?: CandidaturaCriadorUncheckedUpdateManyWithoutUsuarioNestedInput
    logsAuditoria?: LogAuditoriaUncheckedUpdateManyWithoutUsuarioNestedInput
    carteira?: CarteiraDigitalUncheckedUpdateOneWithoutUsuarioNestedInput
    dadosBancarios?: DadosBancariosUncheckedUpdateOneWithoutUsuarioNestedInput
    saques?: SaqueUncheckedUpdateManyWithoutUsuarioNestedInput
    pagamentos?: PagamentoUncheckedUpdateManyWithoutUsuarioNestedInput
    tokensRecuperacao?: TokenRecuperacaoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type ParceiroCreateWithoutCodigosCashbackInput = {
    id?: string
    nomeCidade: string
    comissaoMensal: number
    totalVendas?: number
    codigosGerados?: number
    usuario: UsuarioCreateNestedOneWithoutParceiroInput
  }

  export type ParceiroUncheckedCreateWithoutCodigosCashbackInput = {
    id?: string
    usuarioId: string
    nomeCidade: string
    comissaoMensal: number
    totalVendas?: number
    codigosGerados?: number
  }

  export type ParceiroCreateOrConnectWithoutCodigosCashbackInput = {
    where: ParceiroWhereUniqueInput
    create: XOR<ParceiroCreateWithoutCodigosCashbackInput, ParceiroUncheckedCreateWithoutCodigosCashbackInput>
  }

  export type ParceiroUpsertWithoutCodigosCashbackInput = {
    update: XOR<ParceiroUpdateWithoutCodigosCashbackInput, ParceiroUncheckedUpdateWithoutCodigosCashbackInput>
    create: XOR<ParceiroCreateWithoutCodigosCashbackInput, ParceiroUncheckedCreateWithoutCodigosCashbackInput>
    where?: ParceiroWhereInput
  }

  export type ParceiroUpdateToOneWithWhereWithoutCodigosCashbackInput = {
    where?: ParceiroWhereInput
    data: XOR<ParceiroUpdateWithoutCodigosCashbackInput, ParceiroUncheckedUpdateWithoutCodigosCashbackInput>
  }

  export type ParceiroUpdateWithoutCodigosCashbackInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomeCidade?: StringFieldUpdateOperationsInput | string
    comissaoMensal?: FloatFieldUpdateOperationsInput | number
    totalVendas?: FloatFieldUpdateOperationsInput | number
    codigosGerados?: IntFieldUpdateOperationsInput | number
    usuario?: UsuarioUpdateOneRequiredWithoutParceiroNestedInput
  }

  export type ParceiroUncheckedUpdateWithoutCodigosCashbackInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    nomeCidade?: StringFieldUpdateOperationsInput | string
    comissaoMensal?: FloatFieldUpdateOperationsInput | number
    totalVendas?: FloatFieldUpdateOperationsInput | number
    codigosGerados?: IntFieldUpdateOperationsInput | number
  }

  export type UsuarioCreateWithoutNotificacoesInput = {
    id?: string
    nome: string
    email: string
    senha: string
    tipo?: string
    sementes?: number
    nivel?: string
    pontuacao?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
    criador?: CriadorCreateNestedOneWithoutUsuarioInput
    parceiro?: ParceiroCreateNestedOneWithoutUsuarioInput
    sementesHistorico?: SementeCreateNestedManyWithoutUsuarioInput
    doacoesFeitas?: DoacaoCreateNestedManyWithoutDoadorInput
    transacoes?: TransacaoCreateNestedManyWithoutUsuarioInput
    candidaturas?: CandidaturaCriadorCreateNestedManyWithoutUsuarioInput
    logsAuditoria?: LogAuditoriaCreateNestedManyWithoutUsuarioInput
    carteira?: CarteiraDigitalCreateNestedOneWithoutUsuarioInput
    dadosBancarios?: DadosBancariosCreateNestedOneWithoutUsuarioInput
    saques?: SaqueCreateNestedManyWithoutUsuarioInput
    pagamentos?: PagamentoCreateNestedManyWithoutUsuarioInput
    tokensRecuperacao?: TokenRecuperacaoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutNotificacoesInput = {
    id?: string
    nome: string
    email: string
    senha: string
    tipo?: string
    sementes?: number
    nivel?: string
    pontuacao?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
    criador?: CriadorUncheckedCreateNestedOneWithoutUsuarioInput
    parceiro?: ParceiroUncheckedCreateNestedOneWithoutUsuarioInput
    sementesHistorico?: SementeUncheckedCreateNestedManyWithoutUsuarioInput
    doacoesFeitas?: DoacaoUncheckedCreateNestedManyWithoutDoadorInput
    transacoes?: TransacaoUncheckedCreateNestedManyWithoutUsuarioInput
    candidaturas?: CandidaturaCriadorUncheckedCreateNestedManyWithoutUsuarioInput
    logsAuditoria?: LogAuditoriaUncheckedCreateNestedManyWithoutUsuarioInput
    carteira?: CarteiraDigitalUncheckedCreateNestedOneWithoutUsuarioInput
    dadosBancarios?: DadosBancariosUncheckedCreateNestedOneWithoutUsuarioInput
    saques?: SaqueUncheckedCreateNestedManyWithoutUsuarioInput
    pagamentos?: PagamentoUncheckedCreateNestedManyWithoutUsuarioInput
    tokensRecuperacao?: TokenRecuperacaoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutNotificacoesInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutNotificacoesInput, UsuarioUncheckedCreateWithoutNotificacoesInput>
  }

  export type UsuarioUpsertWithoutNotificacoesInput = {
    update: XOR<UsuarioUpdateWithoutNotificacoesInput, UsuarioUncheckedUpdateWithoutNotificacoesInput>
    create: XOR<UsuarioCreateWithoutNotificacoesInput, UsuarioUncheckedCreateWithoutNotificacoesInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutNotificacoesInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutNotificacoesInput, UsuarioUncheckedUpdateWithoutNotificacoesInput>
  }

  export type UsuarioUpdateWithoutNotificacoesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    nivel?: StringFieldUpdateOperationsInput | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criador?: CriadorUpdateOneWithoutUsuarioNestedInput
    parceiro?: ParceiroUpdateOneWithoutUsuarioNestedInput
    sementesHistorico?: SementeUpdateManyWithoutUsuarioNestedInput
    doacoesFeitas?: DoacaoUpdateManyWithoutDoadorNestedInput
    transacoes?: TransacaoUpdateManyWithoutUsuarioNestedInput
    candidaturas?: CandidaturaCriadorUpdateManyWithoutUsuarioNestedInput
    logsAuditoria?: LogAuditoriaUpdateManyWithoutUsuarioNestedInput
    carteira?: CarteiraDigitalUpdateOneWithoutUsuarioNestedInput
    dadosBancarios?: DadosBancariosUpdateOneWithoutUsuarioNestedInput
    saques?: SaqueUpdateManyWithoutUsuarioNestedInput
    pagamentos?: PagamentoUpdateManyWithoutUsuarioNestedInput
    tokensRecuperacao?: TokenRecuperacaoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutNotificacoesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    nivel?: StringFieldUpdateOperationsInput | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criador?: CriadorUncheckedUpdateOneWithoutUsuarioNestedInput
    parceiro?: ParceiroUncheckedUpdateOneWithoutUsuarioNestedInput
    sementesHistorico?: SementeUncheckedUpdateManyWithoutUsuarioNestedInput
    doacoesFeitas?: DoacaoUncheckedUpdateManyWithoutDoadorNestedInput
    transacoes?: TransacaoUncheckedUpdateManyWithoutUsuarioNestedInput
    candidaturas?: CandidaturaCriadorUncheckedUpdateManyWithoutUsuarioNestedInput
    logsAuditoria?: LogAuditoriaUncheckedUpdateManyWithoutUsuarioNestedInput
    carteira?: CarteiraDigitalUncheckedUpdateOneWithoutUsuarioNestedInput
    dadosBancarios?: DadosBancariosUncheckedUpdateOneWithoutUsuarioNestedInput
    saques?: SaqueUncheckedUpdateManyWithoutUsuarioNestedInput
    pagamentos?: PagamentoUncheckedUpdateManyWithoutUsuarioNestedInput
    tokensRecuperacao?: TokenRecuperacaoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateWithoutTokensRecuperacaoInput = {
    id?: string
    nome: string
    email: string
    senha: string
    tipo?: string
    sementes?: number
    nivel?: string
    pontuacao?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
    criador?: CriadorCreateNestedOneWithoutUsuarioInput
    parceiro?: ParceiroCreateNestedOneWithoutUsuarioInput
    sementesHistorico?: SementeCreateNestedManyWithoutUsuarioInput
    doacoesFeitas?: DoacaoCreateNestedManyWithoutDoadorInput
    transacoes?: TransacaoCreateNestedManyWithoutUsuarioInput
    notificacoes?: NotificacaoCreateNestedManyWithoutUsuarioInput
    candidaturas?: CandidaturaCriadorCreateNestedManyWithoutUsuarioInput
    logsAuditoria?: LogAuditoriaCreateNestedManyWithoutUsuarioInput
    carteira?: CarteiraDigitalCreateNestedOneWithoutUsuarioInput
    dadosBancarios?: DadosBancariosCreateNestedOneWithoutUsuarioInput
    saques?: SaqueCreateNestedManyWithoutUsuarioInput
    pagamentos?: PagamentoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutTokensRecuperacaoInput = {
    id?: string
    nome: string
    email: string
    senha: string
    tipo?: string
    sementes?: number
    nivel?: string
    pontuacao?: number
    dataCriacao?: Date | string
    dataAtualizacao?: Date | string
    criador?: CriadorUncheckedCreateNestedOneWithoutUsuarioInput
    parceiro?: ParceiroUncheckedCreateNestedOneWithoutUsuarioInput
    sementesHistorico?: SementeUncheckedCreateNestedManyWithoutUsuarioInput
    doacoesFeitas?: DoacaoUncheckedCreateNestedManyWithoutDoadorInput
    transacoes?: TransacaoUncheckedCreateNestedManyWithoutUsuarioInput
    notificacoes?: NotificacaoUncheckedCreateNestedManyWithoutUsuarioInput
    candidaturas?: CandidaturaCriadorUncheckedCreateNestedManyWithoutUsuarioInput
    logsAuditoria?: LogAuditoriaUncheckedCreateNestedManyWithoutUsuarioInput
    carteira?: CarteiraDigitalUncheckedCreateNestedOneWithoutUsuarioInput
    dadosBancarios?: DadosBancariosUncheckedCreateNestedOneWithoutUsuarioInput
    saques?: SaqueUncheckedCreateNestedManyWithoutUsuarioInput
    pagamentos?: PagamentoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutTokensRecuperacaoInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutTokensRecuperacaoInput, UsuarioUncheckedCreateWithoutTokensRecuperacaoInput>
  }

  export type UsuarioUpsertWithoutTokensRecuperacaoInput = {
    update: XOR<UsuarioUpdateWithoutTokensRecuperacaoInput, UsuarioUncheckedUpdateWithoutTokensRecuperacaoInput>
    create: XOR<UsuarioCreateWithoutTokensRecuperacaoInput, UsuarioUncheckedCreateWithoutTokensRecuperacaoInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutTokensRecuperacaoInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutTokensRecuperacaoInput, UsuarioUncheckedUpdateWithoutTokensRecuperacaoInput>
  }

  export type UsuarioUpdateWithoutTokensRecuperacaoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    nivel?: StringFieldUpdateOperationsInput | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criador?: CriadorUpdateOneWithoutUsuarioNestedInput
    parceiro?: ParceiroUpdateOneWithoutUsuarioNestedInput
    sementesHistorico?: SementeUpdateManyWithoutUsuarioNestedInput
    doacoesFeitas?: DoacaoUpdateManyWithoutDoadorNestedInput
    transacoes?: TransacaoUpdateManyWithoutUsuarioNestedInput
    notificacoes?: NotificacaoUpdateManyWithoutUsuarioNestedInput
    candidaturas?: CandidaturaCriadorUpdateManyWithoutUsuarioNestedInput
    logsAuditoria?: LogAuditoriaUpdateManyWithoutUsuarioNestedInput
    carteira?: CarteiraDigitalUpdateOneWithoutUsuarioNestedInput
    dadosBancarios?: DadosBancariosUpdateOneWithoutUsuarioNestedInput
    saques?: SaqueUpdateManyWithoutUsuarioNestedInput
    pagamentos?: PagamentoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutTokensRecuperacaoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    sementes?: IntFieldUpdateOperationsInput | number
    nivel?: StringFieldUpdateOperationsInput | string
    pontuacao?: IntFieldUpdateOperationsInput | number
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    criador?: CriadorUncheckedUpdateOneWithoutUsuarioNestedInput
    parceiro?: ParceiroUncheckedUpdateOneWithoutUsuarioNestedInput
    sementesHistorico?: SementeUncheckedUpdateManyWithoutUsuarioNestedInput
    doacoesFeitas?: DoacaoUncheckedUpdateManyWithoutDoadorNestedInput
    transacoes?: TransacaoUncheckedUpdateManyWithoutUsuarioNestedInput
    notificacoes?: NotificacaoUncheckedUpdateManyWithoutUsuarioNestedInput
    candidaturas?: CandidaturaCriadorUncheckedUpdateManyWithoutUsuarioNestedInput
    logsAuditoria?: LogAuditoriaUncheckedUpdateManyWithoutUsuarioNestedInput
    carteira?: CarteiraDigitalUncheckedUpdateOneWithoutUsuarioNestedInput
    dadosBancarios?: DadosBancariosUncheckedUpdateOneWithoutUsuarioNestedInput
    saques?: SaqueUncheckedUpdateManyWithoutUsuarioNestedInput
    pagamentos?: PagamentoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type SementeCreateManyUsuarioInput = {
    id?: string
    quantidade: number
    tipo: string
    data?: Date | string
    descricao: string
  }

  export type DoacaoCreateManyDoadorInput = {
    id?: string
    criadorId: string
    quantidade: number
    data?: Date | string
    mensagem?: string | null
  }

  export type TransacaoCreateManyUsuarioInput = {
    id?: string
    tipo: string
    valor: number
    codigoParceiro?: string | null
    status?: string
    data?: Date | string
  }

  export type NotificacaoCreateManyUsuarioInput = {
    id?: string
    tipo: string
    titulo: string
    mensagem: string
    lida?: boolean
    data?: Date | string
  }

  export type CandidaturaCriadorCreateManyUsuarioInput = {
    id?: string
    nome: string
    email: string
    bio: string
    categoria: string
    redesSociais: string
    portfolio: string
    experiencia: string
    motivacao: string
    metas: string
    disponibilidade: string
    status?: string
    dataCandidatura?: Date | string
    dataRevisao?: Date | string | null
    observacoes?: string | null
  }

  export type LogAuditoriaCreateManyUsuarioInput = {
    id?: string
    acao: string
    detalhes: string
    ip?: string | null
    userAgent?: string | null
    timestamp?: Date | string
    nivel?: string
  }

  export type SaqueCreateManyUsuarioInput = {
    id?: string
    valor: number
    taxa?: number
    valorLiquido: number
    dadosBancarios: string
    status?: string
    motivoRejeicao?: string | null
    dataSolicitacao?: Date | string
    dataProcessamento?: Date | string | null
    dataConclusao?: Date | string | null
    comprovante?: string | null
  }

  export type PagamentoCreateManyUsuarioInput = {
    id?: string
    tipo: string
    valor: number
    sementesGeradas: number
    gateway: string
    gatewayId?: string | null
    status?: string
    dadosPagamento: string
    dataPagamento?: Date | string
    dataProcessamento?: Date | string | null
  }

  export type TokenRecuperacaoCreateManyUsuarioInput = {
    id?: string
    token: string
    usado?: boolean
    expiraEm: Date | string
    dataCriacao?: Date | string
  }

  export type SementeUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type SementeUncheckedUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type SementeUncheckedUpdateManyWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type DoacaoUpdateWithoutDoadorInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    mensagem?: NullableStringFieldUpdateOperationsInput | string | null
    criador?: CriadorUpdateOneRequiredWithoutDoacoesRecebidasNestedInput
  }

  export type DoacaoUncheckedUpdateWithoutDoadorInput = {
    id?: StringFieldUpdateOperationsInput | string
    criadorId?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    mensagem?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DoacaoUncheckedUpdateManyWithoutDoadorInput = {
    id?: StringFieldUpdateOperationsInput | string
    criadorId?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    mensagem?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TransacaoUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    codigoParceiro?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransacaoUncheckedUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    codigoParceiro?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransacaoUncheckedUpdateManyWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    codigoParceiro?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificacaoUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    mensagem?: StringFieldUpdateOperationsInput | string
    lida?: BoolFieldUpdateOperationsInput | boolean
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificacaoUncheckedUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    mensagem?: StringFieldUpdateOperationsInput | string
    lida?: BoolFieldUpdateOperationsInput | boolean
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificacaoUncheckedUpdateManyWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    mensagem?: StringFieldUpdateOperationsInput | string
    lida?: BoolFieldUpdateOperationsInput | boolean
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidaturaCriadorUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    redesSociais?: StringFieldUpdateOperationsInput | string
    portfolio?: StringFieldUpdateOperationsInput | string
    experiencia?: StringFieldUpdateOperationsInput | string
    motivacao?: StringFieldUpdateOperationsInput | string
    metas?: StringFieldUpdateOperationsInput | string
    disponibilidade?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dataCandidatura?: DateTimeFieldUpdateOperationsInput | Date | string
    dataRevisao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CandidaturaCriadorUncheckedUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    redesSociais?: StringFieldUpdateOperationsInput | string
    portfolio?: StringFieldUpdateOperationsInput | string
    experiencia?: StringFieldUpdateOperationsInput | string
    motivacao?: StringFieldUpdateOperationsInput | string
    metas?: StringFieldUpdateOperationsInput | string
    disponibilidade?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dataCandidatura?: DateTimeFieldUpdateOperationsInput | Date | string
    dataRevisao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CandidaturaCriadorUncheckedUpdateManyWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    redesSociais?: StringFieldUpdateOperationsInput | string
    portfolio?: StringFieldUpdateOperationsInput | string
    experiencia?: StringFieldUpdateOperationsInput | string
    motivacao?: StringFieldUpdateOperationsInput | string
    metas?: StringFieldUpdateOperationsInput | string
    disponibilidade?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dataCandidatura?: DateTimeFieldUpdateOperationsInput | Date | string
    dataRevisao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LogAuditoriaUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    acao?: StringFieldUpdateOperationsInput | string
    detalhes?: StringFieldUpdateOperationsInput | string
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    nivel?: StringFieldUpdateOperationsInput | string
  }

  export type LogAuditoriaUncheckedUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    acao?: StringFieldUpdateOperationsInput | string
    detalhes?: StringFieldUpdateOperationsInput | string
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    nivel?: StringFieldUpdateOperationsInput | string
  }

  export type LogAuditoriaUncheckedUpdateManyWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    acao?: StringFieldUpdateOperationsInput | string
    detalhes?: StringFieldUpdateOperationsInput | string
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    nivel?: StringFieldUpdateOperationsInput | string
  }

  export type SaqueUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    taxa?: FloatFieldUpdateOperationsInput | number
    valorLiquido?: FloatFieldUpdateOperationsInput | number
    dadosBancarios?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    motivoRejeicao?: NullableStringFieldUpdateOperationsInput | string | null
    dataSolicitacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataProcessamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataConclusao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comprovante?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SaqueUncheckedUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    taxa?: FloatFieldUpdateOperationsInput | number
    valorLiquido?: FloatFieldUpdateOperationsInput | number
    dadosBancarios?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    motivoRejeicao?: NullableStringFieldUpdateOperationsInput | string | null
    dataSolicitacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataProcessamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataConclusao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comprovante?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SaqueUncheckedUpdateManyWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    taxa?: FloatFieldUpdateOperationsInput | number
    valorLiquido?: FloatFieldUpdateOperationsInput | number
    dadosBancarios?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    motivoRejeicao?: NullableStringFieldUpdateOperationsInput | string | null
    dataSolicitacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataProcessamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataConclusao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comprovante?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PagamentoUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    sementesGeradas?: IntFieldUpdateOperationsInput | number
    gateway?: StringFieldUpdateOperationsInput | string
    gatewayId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    dadosPagamento?: StringFieldUpdateOperationsInput | string
    dataPagamento?: DateTimeFieldUpdateOperationsInput | Date | string
    dataProcessamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PagamentoUncheckedUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    sementesGeradas?: IntFieldUpdateOperationsInput | number
    gateway?: StringFieldUpdateOperationsInput | string
    gatewayId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    dadosPagamento?: StringFieldUpdateOperationsInput | string
    dataPagamento?: DateTimeFieldUpdateOperationsInput | Date | string
    dataProcessamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PagamentoUncheckedUpdateManyWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    sementesGeradas?: IntFieldUpdateOperationsInput | number
    gateway?: StringFieldUpdateOperationsInput | string
    gatewayId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    dadosPagamento?: StringFieldUpdateOperationsInput | string
    dataPagamento?: DateTimeFieldUpdateOperationsInput | Date | string
    dataProcessamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TokenRecuperacaoUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    usado?: BoolFieldUpdateOperationsInput | boolean
    expiraEm?: DateTimeFieldUpdateOperationsInput | Date | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenRecuperacaoUncheckedUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    usado?: BoolFieldUpdateOperationsInput | boolean
    expiraEm?: DateTimeFieldUpdateOperationsInput | Date | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenRecuperacaoUncheckedUpdateManyWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    usado?: BoolFieldUpdateOperationsInput | boolean
    expiraEm?: DateTimeFieldUpdateOperationsInput | Date | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovimentacaoCarteiraCreateManyCarteiraInput = {
    id?: string
    tipo: string
    valor: number
    saldoAnterior: number
    saldoPosterior: number
    descricao: string
    referencia?: string | null
    status?: string
    data?: Date | string
  }

  export type MovimentacaoCarteiraUpdateWithoutCarteiraInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    saldoAnterior?: FloatFieldUpdateOperationsInput | number
    saldoPosterior?: FloatFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    referencia?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovimentacaoCarteiraUncheckedUpdateWithoutCarteiraInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    saldoAnterior?: FloatFieldUpdateOperationsInput | number
    saldoPosterior?: FloatFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    referencia?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovimentacaoCarteiraUncheckedUpdateManyWithoutCarteiraInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    saldoAnterior?: FloatFieldUpdateOperationsInput | number
    saldoPosterior?: FloatFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    referencia?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoacaoCreateManyCriadorInput = {
    id?: string
    doadorId: string
    quantidade: number
    data?: Date | string
    mensagem?: string | null
  }

  export type DoacaoUpdateWithoutCriadorInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    mensagem?: NullableStringFieldUpdateOperationsInput | string | null
    doador?: UsuarioUpdateOneRequiredWithoutDoacoesFeitasNestedInput
  }

  export type DoacaoUncheckedUpdateWithoutCriadorInput = {
    id?: StringFieldUpdateOperationsInput | string
    doadorId?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    mensagem?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DoacaoUncheckedUpdateManyWithoutCriadorInput = {
    id?: StringFieldUpdateOperationsInput | string
    doadorId?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    mensagem?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CodigoCashbackCreateManyParceiroInput = {
    id?: string
    codigo: string
    valor: number
    usado?: boolean
    dataGeracao?: Date | string
    dataUso?: Date | string | null
  }

  export type CodigoCashbackUpdateWithoutParceiroInput = {
    id?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    usado?: BoolFieldUpdateOperationsInput | boolean
    dataGeracao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataUso?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CodigoCashbackUncheckedUpdateWithoutParceiroInput = {
    id?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    usado?: BoolFieldUpdateOperationsInput | boolean
    dataGeracao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataUso?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CodigoCashbackUncheckedUpdateManyWithoutParceiroInput = {
    id?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    usado?: BoolFieldUpdateOperationsInput | boolean
    dataGeracao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataUso?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsuarioCountOutputTypeDefaultArgs instead
     */
    export type UsuarioCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CarteiraDigitalCountOutputTypeDefaultArgs instead
     */
    export type CarteiraDigitalCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CarteiraDigitalCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CriadorCountOutputTypeDefaultArgs instead
     */
    export type CriadorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CriadorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ParceiroCountOutputTypeDefaultArgs instead
     */
    export type ParceiroCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ParceiroCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsuarioDefaultArgs instead
     */
    export type UsuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CarteiraDigitalDefaultArgs instead
     */
    export type CarteiraDigitalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CarteiraDigitalDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MovimentacaoCarteiraDefaultArgs instead
     */
    export type MovimentacaoCarteiraArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MovimentacaoCarteiraDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DadosBancariosDefaultArgs instead
     */
    export type DadosBancariosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DadosBancariosDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SaqueDefaultArgs instead
     */
    export type SaqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SaqueDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PagamentoDefaultArgs instead
     */
    export type PagamentoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PagamentoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CriadorDefaultArgs instead
     */
    export type CriadorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CriadorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CandidaturaCriadorDefaultArgs instead
     */
    export type CandidaturaCriadorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CandidaturaCriadorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LogAuditoriaDefaultArgs instead
     */
    export type LogAuditoriaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LogAuditoriaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ParceiroDefaultArgs instead
     */
    export type ParceiroArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ParceiroDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SementeDefaultArgs instead
     */
    export type SementeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SementeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DoacaoDefaultArgs instead
     */
    export type DoacaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DoacaoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TransacaoDefaultArgs instead
     */
    export type TransacaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TransacaoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CodigoCashbackDefaultArgs instead
     */
    export type CodigoCashbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CodigoCashbackDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificacaoDefaultArgs instead
     */
    export type NotificacaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificacaoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TokenRecuperacaoDefaultArgs instead
     */
    export type TokenRecuperacaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TokenRecuperacaoDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}