
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UsuarioScalarFieldEnum = {
  id: 'id',
  nome: 'nome',
  email: 'email',
  senha: 'senha',
  tipo: 'tipo',
  sementes: 'sementes',
  nivel: 'nivel',
  pontuacao: 'pontuacao',
  dataCriacao: 'dataCriacao',
  dataAtualizacao: 'dataAtualizacao'
};

exports.Prisma.CarteiraDigitalScalarFieldEnum = {
  id: 'id',
  usuarioId: 'usuarioId',
  saldo: 'saldo',
  saldoPendente: 'saldoPendente',
  totalRecebido: 'totalRecebido',
  totalSacado: 'totalSacado',
  dataCriacao: 'dataCriacao',
  dataAtualizacao: 'dataAtualizacao'
};

exports.Prisma.MovimentacaoCarteiraScalarFieldEnum = {
  id: 'id',
  carteiraId: 'carteiraId',
  tipo: 'tipo',
  valor: 'valor',
  saldoAnterior: 'saldoAnterior',
  saldoPosterior: 'saldoPosterior',
  descricao: 'descricao',
  referencia: 'referencia',
  status: 'status',
  data: 'data'
};

exports.Prisma.DadosBancariosScalarFieldEnum = {
  id: 'id',
  usuarioId: 'usuarioId',
  banco: 'banco',
  agencia: 'agencia',
  conta: 'conta',
  tipoConta: 'tipoConta',
  cpfCnpj: 'cpfCnpj',
  nomeTitular: 'nomeTitular',
  validado: 'validado',
  dataValidacao: 'dataValidacao',
  dataCriacao: 'dataCriacao',
  dataAtualizacao: 'dataAtualizacao'
};

exports.Prisma.SaqueScalarFieldEnum = {
  id: 'id',
  usuarioId: 'usuarioId',
  valor: 'valor',
  taxa: 'taxa',
  valorLiquido: 'valorLiquido',
  dadosBancarios: 'dadosBancarios',
  status: 'status',
  motivoRejeicao: 'motivoRejeicao',
  dataSolicitacao: 'dataSolicitacao',
  dataProcessamento: 'dataProcessamento',
  dataConclusao: 'dataConclusao',
  comprovante: 'comprovante'
};

exports.Prisma.PagamentoScalarFieldEnum = {
  id: 'id',
  usuarioId: 'usuarioId',
  tipo: 'tipo',
  valor: 'valor',
  sementesGeradas: 'sementesGeradas',
  gateway: 'gateway',
  gatewayId: 'gatewayId',
  status: 'status',
  dadosPagamento: 'dadosPagamento',
  dataPagamento: 'dataPagamento',
  dataProcessamento: 'dataProcessamento'
};

exports.Prisma.CriadorScalarFieldEnum = {
  id: 'id',
  usuarioId: 'usuarioId',
  nome: 'nome',
  bio: 'bio',
  categoria: 'categoria',
  redesSociais: 'redesSociais',
  portfolio: 'portfolio',
  nivel: 'nivel',
  sementes: 'sementes',
  apoiadores: 'apoiadores',
  doacoes: 'doacoes',
  dataCriacao: 'dataCriacao'
};

exports.Prisma.CandidaturaCriadorScalarFieldEnum = {
  id: 'id',
  usuarioId: 'usuarioId',
  nome: 'nome',
  email: 'email',
  bio: 'bio',
  categoria: 'categoria',
  redesSociais: 'redesSociais',
  portfolio: 'portfolio',
  experiencia: 'experiencia',
  motivacao: 'motivacao',
  metas: 'metas',
  disponibilidade: 'disponibilidade',
  status: 'status',
  dataCandidatura: 'dataCandidatura',
  dataRevisao: 'dataRevisao',
  observacoes: 'observacoes'
};

exports.Prisma.LogAuditoriaScalarFieldEnum = {
  id: 'id',
  usuarioId: 'usuarioId',
  acao: 'acao',
  detalhes: 'detalhes',
  ip: 'ip',
  userAgent: 'userAgent',
  timestamp: 'timestamp',
  nivel: 'nivel'
};

exports.Prisma.ParceiroScalarFieldEnum = {
  id: 'id',
  usuarioId: 'usuarioId',
  nomeCidade: 'nomeCidade',
  comissaoMensal: 'comissaoMensal',
  totalVendas: 'totalVendas',
  codigosGerados: 'codigosGerados'
};

exports.Prisma.SementeScalarFieldEnum = {
  id: 'id',
  usuarioId: 'usuarioId',
  quantidade: 'quantidade',
  tipo: 'tipo',
  data: 'data',
  descricao: 'descricao'
};

exports.Prisma.DoacaoScalarFieldEnum = {
  id: 'id',
  doadorId: 'doadorId',
  criadorId: 'criadorId',
  quantidade: 'quantidade',
  data: 'data',
  mensagem: 'mensagem'
};

exports.Prisma.TransacaoScalarFieldEnum = {
  id: 'id',
  usuarioId: 'usuarioId',
  tipo: 'tipo',
  valor: 'valor',
  codigoParceiro: 'codigoParceiro',
  status: 'status',
  data: 'data'
};

exports.Prisma.CodigoCashbackScalarFieldEnum = {
  id: 'id',
  parceiroId: 'parceiroId',
  codigo: 'codigo',
  valor: 'valor',
  usado: 'usado',
  dataGeracao: 'dataGeracao',
  dataUso: 'dataUso'
};

exports.Prisma.NotificacaoScalarFieldEnum = {
  id: 'id',
  usuarioId: 'usuarioId',
  tipo: 'tipo',
  titulo: 'titulo',
  mensagem: 'mensagem',
  lida: 'lida',
  data: 'data'
};

exports.Prisma.TokenRecuperacaoScalarFieldEnum = {
  id: 'id',
  usuarioId: 'usuarioId',
  token: 'token',
  usado: 'usado',
  expiraEm: 'expiraEm',
  dataCriacao: 'dataCriacao'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Usuario: 'Usuario',
  CarteiraDigital: 'CarteiraDigital',
  MovimentacaoCarteira: 'MovimentacaoCarteira',
  DadosBancarios: 'DadosBancarios',
  Saque: 'Saque',
  Pagamento: 'Pagamento',
  Criador: 'Criador',
  CandidaturaCriador: 'CandidaturaCriador',
  LogAuditoria: 'LogAuditoria',
  Parceiro: 'Parceiro',
  Semente: 'Semente',
  Doacao: 'Doacao',
  Transacao: 'Transacao',
  CodigoCashback: 'CodigoCashback',
  Notificacao: 'Notificacao',
  TokenRecuperacao: 'TokenRecuperacao'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
