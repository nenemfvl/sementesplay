// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id             String   @id @default(cuid())
  nome           String
  email          String   @unique
  senha          String
  tipo           String   @default("comum") // comum, criador, parceiro
  sementes       Int      @default(0)
  nivel          String   @default("comum") // comum, parceiro, supremo
  pontuacao      Int      @default(0)
  dataCriacao    DateTime @default(now())
  dataAtualizacao DateTime @updatedAt

  // Relacionamentos
  criador        Criador?
  parceiro       Parceiro?
  sementesHistorico Semente[]
  doacoesFeitas  Doacao[] @relation("Doador")
  transacoes     Transacao[]
  notificacoes   Notificacao[]
  candidaturas   CandidaturaCriador[]
  candidaturasParceiro CandidaturaParceiro[]
  logsAuditoria  LogAuditoria[]
  carteira       CarteiraDigital?
  dadosBancarios DadosBancarios?
  saques         Saque[]
  pagamentos     Pagamento[]
  tokensRecuperacao TokenRecuperacao[]
  missaoUsuarios MissaoUsuario[]
  conquistas     ConquistaUsuario[]
  comentarios    Comentario[]

  @@map("usuarios")
}

model CarteiraDigital {
  id              String   @id @default(cuid())
  usuarioId       String   @unique
  saldo           Float    @default(0)
  saldoPendente   Float    @default(0)
  totalRecebido   Float    @default(0)
  totalSacado     Float    @default(0)
  dataCriacao     DateTime @default(now())
  dataAtualizacao DateTime @updatedAt

  // Relacionamentos
  usuario         Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  movimentacoes   MovimentacaoCarteira[]

  @@map("carteiras_digitais")
}

model MovimentacaoCarteira {
  id              String   @id @default(cuid())
  carteiraId      String
  tipo            String   // credito, debito, saque, pagamento
  valor           Float
  saldoAnterior   Float
  saldoPosterior  Float
  descricao       String
  referencia      String?  // ID da transação relacionada
  status          String   @default("processado") // processado, pendente, cancelado
  data            DateTime @default(now())

  // Relacionamentos
  carteira        CarteiraDigital @relation(fields: [carteiraId], references: [id], onDelete: Cascade)

  @@map("movimentacoes_carteira")
}

model DadosBancarios {
  id              String   @id @default(cuid())
  usuarioId       String   @unique
  banco           String
  agencia         String
  conta           String
  tipoConta       String   // corrente, poupanca
  cpfCnpj         String
  nomeTitular     String
  validado        Boolean  @default(false)
  dataValidacao   DateTime?
  dataCriacao     DateTime @default(now())
  dataAtualizacao DateTime @updatedAt

  // Relacionamentos
  usuario         Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("dados_bancarios")
}

model Saque {
  id              String   @id @default(cuid())
  usuarioId       String
  valor           Float
  taxa            Float    @default(0)
  valorLiquido    Float
  dadosBancarios  String   // JSON com dados bancários
  status          String   @default("pendente") // pendente, processando, aprovado, rejeitado, concluido
  motivoRejeicao  String?
  dataSolicitacao DateTime @default(now())
  dataProcessamento DateTime?
  dataConclusao   DateTime?
  comprovante     String?  // URL do comprovante

  // Relacionamentos
  usuario         Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("saques")
}

model Pagamento {
  id              String   @id @default(cuid())
  usuarioId       String
  tipo            String   // pix, cartao_credito, cartao_debito
  valor           Float
  sementesGeradas Int
  gateway         String   // mercadopago, pagseguro, etc
  gatewayId       String?  // ID da transação no gateway
  status          String   @default("pendente") // pendente, aprovado, rejeitado, cancelado
  dadosPagamento  String   // JSON com dados do pagamento
  dataPagamento   DateTime @default(now())
  dataProcessamento DateTime?

  // Relacionamentos
  usuario         Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("pagamentos")
}

model Criador {
  id            String   @id @default(cuid())
  usuarioId     String   @unique
  nome          String
  bio           String
  categoria     String
  redesSociais  String   // JSON como string
  portfolio     String   // JSON como string
  nivel         String   @default("comum")
  sementes      Int      @default(0)
  apoiadores    Int      @default(0)
  doacoes       Int      @default(0)
  dataCriacao   DateTime @default(now())

  // Relacionamentos
  usuario       Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  doacoesRecebidas Doacao[] @relation("Criador")
  conteudos     Conteudo[]

  @@map("criadores")
}

model CandidaturaCriador {
  id              String    @id @default(cuid())
  usuarioId       String
  nome            String
  email           String
  bio             String
  categoria       String
  redesSociais    String    // JSON como string
  portfolio       String    // JSON como string
  experiencia     String
  motivacao       String
  metas           String
  disponibilidade String
  status          String    @default("pendente") // pendente, aprovada, rejeitada
  dataCandidatura DateTime  @default(now())
  dataRevisao     DateTime?
  observacoes     String?

  // Relacionamentos
  usuario         Usuario   @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("candidaturas_criador")
}

model CandidaturaParceiro {
  id              String    @id @default(cuid())
  usuarioId       String
  nome            String
  email           String
  telefone        String
  nomeCidade      String
  siteCidade      String?
  descricao       String
  experiencia     String
  expectativa     String
  status          String    @default("pendente") // pendente, aprovada, rejeitada
  dataCandidatura DateTime  @default(now())
  dataRevisao     DateTime?
  observacoes     String?

  // Relacionamentos
  usuario         Usuario   @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("candidaturas_parceiro")
}

model LogAuditoria {
  id         String   @id @default(cuid())
  usuarioId  String
  acao       String
  detalhes   String
  ip         String?
  userAgent  String?
  timestamp  DateTime @default(now())
  nivel      String   @default("info") // info, warning, error, success

  // Relacionamentos
  usuario    Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("logs_auditoria")
}

model Parceiro {
  id              String   @id @default(cuid())
  usuarioId       String   @unique
  nomeCidade      String
  comissaoMensal  Float
  totalVendas     Float    @default(0)
  codigosGerados  Int      @default(0)

  // Relacionamentos
  usuario         Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  codigosCashback CodigoCashback[]

  @@map("parceiros")
}

model Semente {
  id         String   @id @default(cuid())
  usuarioId  String
  quantidade Int
  tipo       String   // gerada, doada, resgatada
  data       DateTime @default(now())
  descricao  String

  // Relacionamentos
  usuario    Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("sementes")
}

model Doacao {
  id         String   @id @default(cuid())
  doadorId   String
  criadorId  String
  quantidade Int
  data       DateTime @default(now())
  mensagem   String?

  // Relacionamentos
  doador     Usuario  @relation("Doador", fields: [doadorId], references: [id], onDelete: Cascade)
  criador    Criador  @relation("Criador", fields: [criadorId], references: [id], onDelete: Cascade)

  @@map("doacoes")
}

model Transacao {
  id             String   @id @default(cuid())
  usuarioId      String
  tipo           String
  valor          Float
  codigoParceiro String?
  status         String   @default("pendente") // pendente, aprovada, rejeitada, cancelada
  data           DateTime @default(now())

  // Relacionamentos
  usuario        Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("transacoes")
}

model CodigoCashback {
  id            String    @id @default(cuid())
  parceiroId    String
  codigo        String    @unique
  valor         Float
  usado         Boolean   @default(false)
  dataGeracao   DateTime  @default(now())
  dataUso       DateTime?

  // Relacionamentos
  parceiro      Parceiro  @relation(fields: [parceiroId], references: [id], onDelete: Cascade)

  @@map("codigos_cashback")
}

model Notificacao {
  id        String   @id @default(cuid())
  usuarioId String
  tipo      String   // doacao, ranking, cashback, sistema, candidatura_aprovada, candidatura_rejeitada, pagamento, saque
  titulo    String
  mensagem  String
  lida      Boolean  @default(false)
  data      DateTime @default(now())

  // Relacionamentos
  usuario   Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("notificacoes")
}

model TokenRecuperacao {
  id        String   @id @default(cuid())
  usuarioId String
  token     String   @unique
  usado     Boolean  @default(false)
  expiraEm  DateTime
  dataCriacao DateTime @default(now())

  // Relacionamentos
  usuario   Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("tokens_recuperacao")
}

model Conteudo {
  id          String   @id @default(cuid())
  criadorId   String
  titulo      String
  url         String
  tipo        String   // video, live, post, short, etc.
  categoria   String
  descricao   String?
  preview     String?  // url da imagem de preview
  fixado      Boolean  @default(false)
  dataPublicacao DateTime @default(now())
  plataforma  String   // youtube, twitch, instagram, tiktok, etc.
  visualizacoes Int    @default(0)
  curtidas    Int      @default(0)
  compartilhamentos Int @default(0)

  criador     Criador  @relation(fields: [criadorId], references: [id], onDelete: Cascade)
  comentarios Comentario[]

  @@map("conteudos")
}

model Comentario {
  id          String   @id @default(cuid())
  conteudoId  String
  usuarioId   String
  texto       String
  data        DateTime @default(now())
  respostaAId String?

  conteudo    Conteudo @relation(fields: [conteudoId], references: [id], onDelete: Cascade)
  usuario     Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  respostas   Comentario[] @relation("RespostaComentario")
  respostaA   Comentario?  @relation("RespostaComentario", fields: [respostaAId], references: [id])

  @@map("comentarios")
}

model Missao {
  id          String   @id @default(cuid())
  titulo      String
  descricao   String
  tipo        String   // diaria, semanal, especial
  recompensa  Int      // sementes, pontos, etc.
  ativa       Boolean  @default(true)
  dataInicio  DateTime @default(now())
  dataFim     DateTime?
  criadorOnly Boolean  @default(false)

  usuarios    MissaoUsuario[]

  @@map("missoes")
}

model MissaoUsuario {
  id        String   @id @default(cuid())
  missaoId  String
  usuarioId String
  progresso Int      @default(0)
  concluida Boolean  @default(false)
  dataInicio DateTime @default(now())
  dataConclusao DateTime?

  missao    Missao   @relation(fields: [missaoId], references: [id], onDelete: Cascade)
  usuario   Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@unique([missaoId, usuarioId])
  @@map("missoes_usuarios")
}

model Conquista {
  id          String   @id @default(cuid())
  titulo      String
  descricao   String
  icone       String   // url do ícone
  criterio    String   // ex: "10 doações", "100 seguidores"
  ativa       Boolean  @default(true)

  usuarios    ConquistaUsuario[]

  @@map("conquistas")
}

model ConquistaUsuario {
  id            String   @id @default(cuid())
  conquistaId   String
  usuarioId     String
  dataConquista DateTime @default(now())

  conquista     Conquista @relation(fields: [conquistaId], references: [id], onDelete: Cascade)
  usuario       Usuario   @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@unique([conquistaId, usuarioId])
  @@map("conquistas_usuarios")
} 