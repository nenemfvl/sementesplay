const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function verificarMissaoDoacao() {
  try {
    console.log('üîç Verificando miss√£o de doa√ß√£o...')
    
    // Buscar miss√£o "Doador Di√°rio"
    const missao = await prisma.missao.findFirst({
      where: {
        titulo: 'Doador Di√°rio'
      }
    })
    
    if (!missao) {
      console.log('‚ùå Miss√£o "Doador Di√°rio" n√£o encontrada')
      return
    }
    
    console.log('‚úÖ Miss√£o encontrada:')
    console.log(`   ID: ${missao.id}`)
    console.log(`   T√≠tulo: ${missao.titulo}`)
    console.log(`   Tipo: ${missao.tipo}`)
    console.log(`   Objetivo: ${missao.objetivo}`)
    console.log(`   Recompensa: ${missao.recompensa} XP`)
    console.log(`   Ativa: ${missao.ativa}`)
    
    // Buscar usu√°rios
    const usuarios = await prisma.usuario.findMany({
      take: 3
    })
    
    console.log(`\nüë• Verificando progresso de ${usuarios.length} usu√°rios:`)
    
    for (const usuario of usuarios) {
      console.log(`\nüë§ Usu√°rio: ${usuario.nome} (${usuario.id})`)
      
      // Verificar progresso na miss√£o
      const missaoUsuario = await prisma.missaoUsuario.findFirst({
        where: {
          missaoId: missao.id,
          usuarioId: usuario.id
        }
      })
      
      if (missaoUsuario) {
        console.log(`   Progresso: ${missaoUsuario.progresso}/${missao.objetivo}`)
        console.log(`   Conclu√≠da: ${missaoUsuario.concluida}`)
        console.log(`   Reivindicada: ${missaoUsuario.reivindicada}`)
      } else {
        console.log(`   ‚ùå Nenhum progresso encontrado`)
      }
      
      // Verificar doa√ß√µes do usu√°rio
      const doacoes = await prisma.doacao.findMany({
        where: {
          doadorId: usuario.id
        }
      })
      
      console.log(`   üìä Total de doa√ß√µes: ${doacoes.length}`)
      
      if (doacoes.length > 0) {
        console.log(`   üìÖ √öltima doa√ß√£o: ${doacoes[0].data}`)
        console.log(`   üí∞ Quantidade: ${doacoes[0].quantidade}`)
      }
    }
    
    // Simular uma doa√ß√£o para testar
    console.log('\nüß™ Simulando doa√ß√£o para testar...')
    const usuarioTeste = usuarios[0]
    
    if (usuarioTeste) {
      console.log(`Testando com usu√°rio: ${usuarioTeste.nome}`)
      
      // Buscar um criador para doar
      const criador = await prisma.criador.findFirst()
      
      if (criador) {
        console.log(`Doando para criador: ${criador.id}`)
        
        // Simular a fun√ß√£o de atualizar miss√µes
        const missoes = await prisma.missao.findMany({
          where: {
            ativa: true,
            tipo: 'doacao'
          }
        })
        
        console.log(`Encontradas ${missoes.length} miss√µes do tipo 'doacao'`)
        
        for (const missao of missoes) {
          console.log(`\nüéØ Processando miss√£o: ${missao.titulo}`)
          
          // Verificar se o usu√°rio j√° tem progresso nesta miss√£o
          let missaoUsuario = await prisma.missaoUsuario.findFirst({
            where: {
              missaoId: missao.id,
              usuarioId: usuarioTeste.id
            }
          })
          
          if (!missaoUsuario) {
            console.log('   Criando novo progresso...')
            missaoUsuario = await prisma.missaoUsuario.create({
              data: {
                missaoId: missao.id,
                usuarioId: usuarioTeste.id,
                progresso: 0,
                concluida: false
              }
            })
          }
          
          console.log(`   Progresso atual: ${missaoUsuario.progresso}/${missao.objetivo}`)
          
          // Atualizar progresso
          const novoProgresso = missaoUsuario.progresso + 1
          const concluida = novoProgresso >= missao.objetivo
          
          console.log(`   Novo progresso: ${novoProgresso}/${missao.objetivo}`)
          console.log(`   Conclu√≠da: ${concluida}`)
          
          // Atualizar miss√£o
          await prisma.missaoUsuario.update({
            where: { id: missaoUsuario.id },
            data: {
              progresso: novoProgresso,
              concluida: concluida,
              dataConclusao: concluida && !missaoUsuario.concluida ? new Date() : missaoUsuario.dataConclusao
            }
          })
          
          console.log(`   ‚úÖ Miss√£o atualizada!`)
          
          if (concluida) {
            console.log(`   üéâ Miss√£o completada!`)
          }
        }
      } else {
        console.log('‚ùå Nenhum criador encontrado para teste')
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erro:', error)
  } finally {
    await prisma.$disconnect()
  }
}

verificarMissaoDoacao() 