const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function verificarQuemPausou() {
  try {
    console.log('üîç Investigando quem pausou o sistema de ciclos...\n')

    // 1. Verificar configura√ß√£o atual
    console.log('1Ô∏è‚É£ Verificando configura√ß√£o atual...')
    const config = await prisma.configuracaoCiclos.findFirst()
    
    if (!config) {
      console.log('   ‚ùå Nenhuma configura√ß√£o encontrada')
      return
    }

    console.log(`   ‚úÖ Ciclo atual: #${config.numeroCiclo}`)
    console.log(`   ‚úÖ Season atual: S${config.numeroSeason}`)
    console.log(`   ‚è∏Ô∏è  Pausado: ${config.pausado ? 'SIM' : 'N√ÉO'}`)
    console.log(`   üìÖ Data cria√ß√£o: ${config.dataCriacao}`)
    console.log(`   üìÖ Data √∫ltima atualiza√ß√£o: ${config.dataAtualizacao}`)
    console.log(`   üìÖ In√≠cio do ciclo: ${config.dataInicioCiclo}`)
    console.log(`   üìÖ In√≠cio da season: ${config.dataInicioSeason}`)

    // 2. Buscar logs de auditoria relacionados a pausar/despausar
    console.log('\n2Ô∏è‚É£ Buscando logs de auditoria...')
    const logsPausar = await prisma.logAuditoria.findMany({
      where: {
        OR: [
          { acao: { contains: 'PAUSAR' } },
          { acao: { contains: 'CICLO' } },
          { detalhes: { contains: 'pausar' } },
          { detalhes: { contains: 'ciclo' } }
        ]
      },
      orderBy: {
        timestamp: 'desc'
      },
      take: 10,
      include: {
        usuario: {
          select: {
            nome: true,
            email: true
          }
        }
      }
    })

    if (logsPausar.length > 0) {
      console.log(`   üìä Encontrados ${logsPausar.length} logs relacionados:`)
      logsPausar.forEach((log, index) => {
        console.log(`   ${index + 1}. [${log.timestamp}] ${log.acao}`)
        console.log(`      üë§ Usu√°rio: ${log.usuario?.nome || 'Sistema'} (${log.usuario?.email || 'N/A'})`)
        console.log(`      üìù Detalhes: ${log.detalhes}`)
        console.log(`      üè∑Ô∏è  N√≠vel: ${log.nivel}`)
        console.log('')
      })
    } else {
      console.log('   ‚ùå Nenhum log espec√≠fico de pausar encontrado')
    }

    // 3. Verificar se foi pausado via script
    console.log('3Ô∏è‚É£ Verificando se foi pausado via script...')
    const dataAtualizacao = new Date(config.dataAtualizacao)
    const agora = new Date()
    const diferencaHoras = Math.abs(agora - dataAtualizacao) / (1000 * 60 * 60)
    
    console.log(`   üìÖ √öltima atualiza√ß√£o: ${dataAtualizacao.toLocaleString('pt-BR')}`)
    console.log(`   ‚è∞ H√° ${diferencaHoras.toFixed(1)} horas`)
    
    if (diferencaHoras < 24) {
      console.log('   ‚ö†Ô∏è  Atualizado recentemente (√∫ltimas 24h)')
    } else if (diferencaHoras < 168) {
      console.log('   ‚ö†Ô∏è  Atualizado na √∫ltima semana')
    } else {
      console.log('   ‚ÑπÔ∏è  Atualizado h√° mais de uma semana')
    }

    // 4. Verificar se h√° logs de sistema
    console.log('\n4Ô∏è‚É£ Verificando logs do sistema...')
    const logsSistema = await prisma.logAuditoria.findMany({
      where: {
        usuarioId: 'system'
      },
      orderBy: {
        timestamp: 'desc'
      },
      take: 5
    })

    if (logsSistema.length > 0) {
      console.log(`   üìä √öltimos logs do sistema:`)
      logsSistema.forEach((log, index) => {
        console.log(`   ${index + 1}. [${log.timestamp}] ${log.acao}`)
        console.log(`      üìù Detalhes: ${log.detalhes}`)
        console.log('')
      })
    }

    // 5. Conclus√£o
    console.log('5Ô∏è‚É£ Conclus√£o:')
    if (config.pausado) {
      console.log('   ‚è∏Ô∏è  Sistema est√° PAUSADO')
      console.log(`   üìÖ Pausado desde: ${config.dataAtualizacao.toLocaleString('pt-BR')}`)
      
      if (logsPausar.length === 0) {
        console.log('   ü§î N√£o h√° logs espec√≠ficos de pausar - pode ter sido feito manualmente no banco')
        console.log('   üí° Poss√≠veis causas:')
        console.log('      - Execu√ß√£o direta do script pausar-ciclos.js')
        console.log('      - Altera√ß√£o manual no banco de dados')
        console.log('      - Reset autom√°tico que pausou o sistema')
      }
    } else {
      console.log('   ‚ñ∂Ô∏è  Sistema est√° ATIVO')
    }

  } catch (error) {
    console.error('‚ùå Erro na investiga√ß√£o:', error)
  } finally {
    await prisma.$disconnect()
  }
}

verificarQuemPausou()
