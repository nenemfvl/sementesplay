// COMENTADO: Script de desenvolvimento - desabilitado para otimiza√ß√£o
// const { PrismaClient } = require('@prisma/client')

// const prisma = new PrismaClient()

// async function verificarSementes() {
  console.log('üîç Verificando contabiliza√ß√£o de sementes...')

  try {
    // 1. Total de sementes na tabela usuarios
    const totalSementesUsuarios = await prisma.usuario.aggregate({
      _sum: {
        sementes: true
      }
    })

    // 2. Total de sementes na tabela criadores
    const totalSementesCriadores = await prisma.criador.aggregate({
      _sum: {
        sementes: true
      }
    })

    // 3. Hist√≥rico de sementes por tipo
    const historicoPorTipo = await prisma.semente.groupBy({
      by: ['tipo'],
      _sum: {
        quantidade: true
      }
    })

    // 4. Total de doa√ß√µes
    const totalDoacoes = await prisma.doacao.aggregate({
      _sum: {
        quantidade: true
      }
    })

    // 5. Total de pagamentos (sementes geradas)
    const totalPagamentos = await prisma.pagamento.aggregate({
      _sum: {
        sementesGeradas: true
      }
    })

    // 6. Total de saques (sementes convertidas)
    const totalSaques = await prisma.saque.aggregate({
      _sum: {
        valor: true
      }
    })

    console.log('\nüìä RESUMO DA CONTABILIZA√á√ÉO:')
    console.log('='.repeat(50))
    console.log(`üí∞ Sementes em usu√°rios: ${totalSementesUsuarios._sum.sementes || 0}`)
    console.log(`üé≠ Sementes em criadores: ${totalSementesCriadores._sum.sementes || 0}`)
    console.log(`üìà Total geral: ${(totalSementesUsuarios._sum.sementes || 0) + (totalSementesCriadores._sum.sementes || 0)}`)
    
    console.log('\nüìã HIST√ìRICO POR TIPO:')
    historicoPorTipo.forEach(item => {
      console.log(`   ${item.tipo}: ${item._sum.quantidade || 0}`)
    })

    console.log('\nüîÑ MOVIMENTA√á√ïES:')
    console.log(`   Doa√ß√µes totais: ${totalDoacoes._sum.quantidade || 0}`)
    console.log(`   Sementes geradas por pagamentos: ${totalPagamentos._sum.sementesGeradas || 0}`)
    console.log(`   Valor total de saques: ${totalSaques._sum.valor || 0}`)

    // 7. Verificar se h√° inconsist√™ncias
    const totalGeradas = historicoPorTipo.find(h => h.tipo === 'gerada')?._sum.quantidade || 0
    const totalDoadas = historicoPorTipo.find(h => h.tipo === 'doacao')?._sum.quantidade || 0
    const totalRecebidas = historicoPorTipo.find(h => h.tipo === 'recebida')?._sum.quantidade || 0
    const totalResgatadas = historicoPorTipo.find(h => h.tipo === 'resgatada')?._sum.quantidade || 0
    const totalSaquesHist = historicoPorTipo.find(h => h.tipo === 'saque')?._sum.quantidade || 0

    const totalEntrada = totalGeradas + totalRecebidas + totalResgatadas
    const totalSaida = Math.abs(totalDoadas) + Math.abs(totalSaquesHist)
    const saldoCalculado = totalEntrada - totalSaida
    const saldoReal = (totalSementesUsuarios._sum.sementes || 0) + (totalSementesCriadores._sum.sementes || 0)

    console.log('\n‚öñÔ∏è  VERIFICA√á√ÉO DE SALDO:')
    console.log(`   Total entrada: ${totalEntrada}`)
    console.log(`   Total sa√≠da: ${totalSaida}`)
    console.log(`   Saldo calculado: ${saldoCalculado}`)
    console.log(`   Saldo real: ${saldoReal}`)
    console.log(`   Diferen√ßa: ${saldoReal - saldoCalculado}`)

    if (saldoReal !== saldoCalculado) {
      console.log('\n‚ö†Ô∏è  ATEN√á√ÉO: H√° inconsist√™ncia na contabiliza√ß√£o!')
    } else {
      console.log('\n‚úÖ Contabiliza√ß√£o est√° correta!')
    }

//   } catch (error) {
//     console.error('‚ùå Erro ao verificar sementes:', error)
//   } finally {
//     await prisma.$disconnect()
//   }
// }

// // Executar se chamado diretamente
// if (require.main === module) {
//   verificarSementes()
//     .then(() => {
//       console.log('\n‚úÖ Verifica√ß√£o conclu√≠da!')
//       process.exit(0)
//     })
//     .catch((error) => {
//       console.error('‚ùå Erro ao executar verifica√ß√£o:', error)
//       process.exit(1)
//     })
// }

// module.exports = { verificarSementes } 