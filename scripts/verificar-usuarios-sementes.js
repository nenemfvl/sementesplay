const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function verificarUsuariosSementes() {
  console.log('üîç Verificando usu√°rios com sementes...')

  try {
    // Buscar usu√°rios com sementes
    const usuariosComSementes = await prisma.usuario.findMany({
      where: {
        sementes: {
          gt: 0
        }
      },
      select: {
        id: true,
        nome: true,
        email: true,
        sementes: true,
        dataCriacao: true,
        nivel: true,
        criador: {
          select: {
            id: true,
            nome: true
          }
        }
      },
      orderBy: {
        sementes: 'desc'
      }
    })

    console.log(`\nüìä Usu√°rios com sementes: ${usuariosComSementes.length}`)
    console.log('='.repeat(80))

    for (const usuario of usuariosComSementes) {
      console.log(`\nüë§ ${usuario.nome} (${usuario.email})`)
      console.log(`   ID: ${usuario.id}`)
      console.log(`   Sementes: ${usuario.sementes}`)
      console.log(`   N√≠vel: ${usuario.nivel}`)
      console.log(`   Data cria√ß√£o: ${usuario.dataCriacao.toLocaleDateString('pt-BR')}`)
      
      if (usuario.criador) {
        console.log(`   Criador: ${usuario.criador.nome} (ID: ${usuario.criador.id})`)
      }

      // Verificar hist√≥rico de sementes deste usu√°rio
      const historico = await prisma.semente.findMany({
        where: {
          usuarioId: usuario.id
        },
        orderBy: {
          data: 'desc'
        }
      })

      if (historico.length > 0) {
        console.log(`   üìã Hist√≥rico (${historico.length} registros):`)
        historico.forEach(reg => {
          console.log(`      ${reg.data.toLocaleDateString('pt-BR')} - ${reg.tipo}: ${reg.quantidade} (${reg.descricao})`)
        })
      } else {
        console.log(`   ‚ö†Ô∏è  SEM HIST√ìRICO DE SEMENTES!`)
      }

      // Verificar doa√ß√µes feitas
      const doacoesFeitas = await prisma.doacao.findMany({
        where: {
          doadorId: usuario.id
        }
      })

      if (doacoesFeitas.length > 0) {
        console.log(`   üíù Doa√ß√µes feitas: ${doacoesFeitas.length}`)
        doacoesFeitas.forEach(doacao => {
          console.log(`      ${doacao.data.toLocaleDateString('pt-BR')} - ${doacao.quantidade} sementes para criador ${doacao.criadorId}`)
        })
      }

      // Verificar pagamentos
      const pagamentos = await prisma.pagamento.findMany({
        where: {
          usuarioId: usuario.id
        }
      })

      if (pagamentos.length > 0) {
        console.log(`   üí≥ Pagamentos: ${pagamentos.length}`)
        pagamentos.forEach(pag => {
          console.log(`      ${pag.dataPagamento.toLocaleDateString('pt-BR')} - R$ ${pag.valor} = ${pag.sementesGeradas} sementes`)
        })
      }

      console.log('   ' + '-'.repeat(60))
    }

    console.log('\nüéØ CONCLUS√ÉO:')
    if (usuariosComSementes.length === 0) {
      console.log('   Nenhum usu√°rio tem sementes.')
    } else {
      console.log(`   ${usuariosComSementes.length} usu√°rio(s) com sementes sem hist√≥rico adequado.`)
      console.log('   Recomenda-se investigar a origem dessas sementes.')
    }

  } catch (error) {
    console.error('‚ùå Erro ao verificar usu√°rios:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  verificarUsuariosSementes()
    .then(() => {
      console.log('\n‚úÖ Verifica√ß√£o conclu√≠da!')
      process.exit(0)
    })
    .catch((error) => {
      console.error('‚ùå Erro ao executar verifica√ß√£o:', error)
      process.exit(1)
    })
}

module.exports = { verificarUsuariosSementes } 