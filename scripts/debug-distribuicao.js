const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function debugDistribuicao() {
  try {
    console.log('üîç DEBUG DA DISTRIBUI√á√ÉO DO FUNDO\n')

    // 1. Verificar fundo
    const fundo = await prisma.fundoSementes.findFirst({
      where: { distribuido: true },
      orderBy: { dataInicio: 'desc' }
    })

    if (!fundo) {
      console.log('‚ùå Nenhum fundo distribu√≠do encontrado')
      return
    }

    console.log('1Ô∏è‚É£ FUNDO ANALISADO:')
    console.log(`   ‚Ä¢ ID: ${fundo.id}`)
    console.log(`   ‚Ä¢ Valor total: R$ ${fundo.valorTotal.toFixed(2)}`)
    console.log(`   ‚Ä¢ Data in√≠cio: ${fundo.dataInicio.toLocaleString()}`)
    console.log(`   ‚Ä¢ Data fim: ${fundo.dataFim.toLocaleString()}`)
    console.log(`   ‚Ä¢ Distribu√≠do: ${fundo.distribuido}`)

    // 2. Verificar criadores
    console.log('\n2Ô∏è‚É£ CRIADORES ATIVOS:')
    const criadores = await prisma.criador.findMany({
      include: {
        _count: {
          select: { conteudos: true }
        },
        usuario: {
          select: {
            id: true,
            nome: true
          }
        }
      },
      where: {
        conteudos: {
          some: { removido: false }
        }
      }
    })

    console.log(`üìä Criadores ativos: ${criadores.length}`)
    criadores.forEach(criador => {
      console.log(`   ‚Ä¢ ${criador.usuario.nome}: ${criador._count.conteudos} conte√∫dos`)
    })

    // 3. Verificar compras no per√≠odo
    console.log('\n3Ô∏è‚É£ COMPRAS NO PER√çODO DO FUNDO:')
    const compras = await prisma.compraParceiro.findMany({
      where: {
        dataCompra: {
          gte: fundo.dataInicio,
          lte: fundo.dataFim
        },
        status: 'cashback_liberado'
      },
      include: {
        usuario: {
          select: {
            id: true,
            nome: true
          }
        }
      }
    })

    console.log(`üìä Compras no per√≠odo: ${compras.length}`)
    compras.forEach(compra => {
      console.log(`   ‚Ä¢ ${compra.usuario.nome}: R$ ${compra.valorCompra.toFixed(2)} - ${compra.dataCompra.toLocaleString()}`)
    })

    // 4. Verificar todas as compras
    console.log('\n4Ô∏è‚É£ TODAS AS COMPRAS:')
    const todasCompras = await prisma.compraParceiro.findMany({
      include: {
        usuario: {
          select: {
            id: true,
            nome: true
          }
        }
      },
      orderBy: {
        dataCompra: 'desc'
      }
    })

    console.log(`üìä Total de compras: ${todasCompras.length}`)
    todasCompras.forEach(compra => {
      console.log(`   ‚Ä¢ ${compra.usuario.nome}: R$ ${compra.valorCompra.toFixed(2)} - ${compra.status} - ${compra.dataCompra.toLocaleString()}`)
    })

    // 5. Verificar distribui√ß√µes
    console.log('\n5Ô∏è‚É£ DISTRIBUI√á√ïES REALIZADAS:')
    const distribuicoes = await prisma.distribuicaoFundo.findMany({
      where: {
        fundoId: fundo.id
      },
      include: {
        usuario: {
          select: {
            nome: true
          }
        },
        criador: {
          include: {
            usuario: {
              select: {
                nome: true
              }
            }
          }
        }
      }
    })

    console.log(`üìä Total de distribui√ß√µes: ${distribuicoes.length}`)
    let totalDistribuido = 0
    distribuicoes.forEach(dist => {
      totalDistribuido += dist.valor
      if (dist.tipo === 'criador') {
        console.log(`   ‚Ä¢ Criador: ${dist.criador.usuario.nome} - R$ ${dist.valor.toFixed(2)}`)
      } else {
        console.log(`   ‚Ä¢ Usu√°rio: ${dist.usuario.nome} - R$ ${dist.valor.toFixed(2)}`)
      }
    })

    console.log(`üìä Total distribu√≠do: R$ ${totalDistribuido.toFixed(2)}`)
    console.log(`üìä Valor do fundo: R$ ${fundo.valorTotal.toFixed(2)}`)
    console.log(`üìä Diferen√ßa: R$ ${(fundo.valorTotal - totalDistribuido).toFixed(2)}`)

    // 6. An√°lise do problema
    console.log('\n6Ô∏è‚É£ AN√ÅLISE DO PROBLEMA:')
    
    const valorCriadores = fundo.valorTotal * 0.5
    const valorUsuarios = fundo.valorTotal * 0.5
    
    console.log(`üí∞ Distribui√ß√£o esperada:`)
    console.log(`   ‚Ä¢ Criadores (50%): R$ ${valorCriadores.toFixed(2)}`)
    console.log(`   ‚Ä¢ Usu√°rios (50%): R$ ${valorUsuarios.toFixed(2)}`)

    if (compras.length === 0) {
      console.log('‚ùå PROBLEMA IDENTIFICADO: Nenhuma compra no per√≠odo do fundo!')
      console.log('üí° A distribui√ß√£o para usu√°rios s√≥ acontece se houver compras com status "cashback_liberado" no per√≠odo.')
    } else {
      console.log('‚úÖ Compras encontradas no per√≠odo')
    }

    // 7. Sugest√µes
    console.log('\n7Ô∏è‚É£ SUGEST√ïES:')
    if (compras.length === 0) {
      console.log('üîß Para corrigir:')
      console.log('   1. Verificar se as compras t√™m status "cashback_liberado"')
      console.log('   2. Verificar se as datas das compras est√£o dentro do per√≠odo do fundo')
      console.log('   3. Ou ajustar as datas do fundo para incluir as compras existentes')
    }

    console.log('\nüéâ DEBUG CONCLU√çDO!')

  } catch (error) {
    console.error('‚ùå Erro durante o debug:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// Executar o debug
debugDistribuicao()
