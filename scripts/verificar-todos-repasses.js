const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function verificarTodosRepasses() {
  console.log('üîç Verificando todos os repasses...')

  try {
    // Buscar todos os repasses
    const todosRepasses = await prisma.repasseParceiro.findMany({
      include: {
        compra: {
          include: {
            usuario: true,
            parceiro: true
          }
        }
      },
      orderBy: {
        dataRepasse: 'desc'
      }
    })

    console.log(`\nüìä Total de repasses: ${todosRepasses.length}`)

    let totalValorRepasses = 0
    let totalSementesDistribuidas = 0
    let totalFundoAcumulado = 0

    for (const repasse of todosRepasses) {
      console.log(`\nüîç Repasse ID: ${repasse.id}`)
      console.log(`   Status: ${repasse.status}`)
      console.log(`   Valor: R$ ${repasse.valor}`)
      console.log(`   Usu√°rio: ${repasse.compra.usuario.nome}`)
      console.log(`   Parceiro: ${repasse.compra.parceiro.nome}`)
      console.log(`   Data: ${repasse.dataRepasse.toLocaleString()}`)

      // Calcular distribui√ß√£o esperada
      const pctUsuario = Math.round(repasse.valor * 0.05)    // 5% para jogador
      const pctFundo = repasse.valor * 0.025                 // 2,5% para fundo

      console.log(`   üìä Distribui√ß√£o esperada:`)
      console.log(`      ‚Ä¢ Usu√°rio: ${pctUsuario} sementes (5%)`)
      console.log(`      ‚Ä¢ Fundo: R$ ${pctFundo.toFixed(2)} (2,5%)`)

      if (repasse.status === 'confirmado') {
        totalValorRepasses += repasse.valor
        totalSementesDistribuidas += pctUsuario
        totalFundoAcumulado += pctFundo

        // Verificar se o usu√°rio recebeu as sementes
        const usuario = await prisma.usuario.findUnique({
          where: { id: repasse.compra.usuarioId }
        })

        console.log(`   üí∞ Sementes atuais do usu√°rio: ${usuario.sementes}`)

        // Verificar hist√≥rico de sementes
        const historicoSementes = await prisma.semente.findMany({
          where: {
            usuarioId: repasse.compra.usuarioId,
            descricao: {
              contains: `Cashback compra parceiro ${repasse.compraId}`
            }
          }
        })

        if (historicoSementes.length > 0) {
          console.log(`   ‚úÖ Hist√≥rico encontrado: ${historicoSementes[0].quantidade} sementes`)
        } else {
          console.log(`   ‚ùå Hist√≥rico N√ÉO encontrado!`)
        }
      } else {
        console.log(`   ‚è∏Ô∏è  Repasse n√£o confirmado`)
      }
    }

    console.log(`\nüìà RESUMO GERAL:`)
    console.log(`   Total de repasses confirmados: ${todosRepasses.filter(r => r.status === 'confirmado').length}`)
    console.log(`   Valor total dos repasses: R$ ${totalValorRepasses.toFixed(2)}`)
    console.log(`   Total de sementes distribu√≠das: ${totalSementesDistribuidas}`)
    console.log(`   Total acumulado no fundo: R$ ${totalFundoAcumulado.toFixed(2)}`)

    // Verificar fundo atual
    const fundoAtual = await prisma.fundoSementes.findFirst({
      where: { distribuido: false }
    })

    console.log(`\nüí∞ Fundo de sementes atual:`)
    if (fundoAtual) {
      console.log(`   Valor total: R$ ${fundoAtual.valorTotal.toFixed(2)}`)
      console.log(`   Diferen√ßa esperada vs real: R$ ${(totalFundoAcumulado - fundoAtual.valorTotal).toFixed(2)}`)
    } else {
      console.log(`   Nenhum fundo pendente`)
    }

    // Verificar total de sementes em circula√ß√£o
    const totalSementes = await prisma.usuario.aggregate({
      _sum: {
        sementes: true
      }
    })

    console.log(`\nüå± Total de sementes em circula√ß√£o: ${totalSementes._sum.sementes || 0}`)
    console.log(`   Diferen√ßa esperada vs real: ${totalSementesDistribuidas - (totalSementes._sum.sementes || 0)}`)

  } catch (error) {
    console.error('‚ùå Erro durante verifica√ß√£o:', error)
  } finally {
    await prisma.$disconnect()
  }
}

verificarTodosRepasses() 