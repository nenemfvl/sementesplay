// COMENTADO: Script de desenvolvimento - desabilitado para otimiza√ß√£o
// const { PrismaClient } = require('@prisma/client')

// const prisma = new PrismaClient()

// async function testarCiclos() {
  try {
    console.log('üß™ Testando sistema de ciclos...\n')

    // 1. Verificar configura√ß√£o atual
    console.log('1Ô∏è‚É£ Verificando configura√ß√£o atual...')
    let config = await prisma.configuracaoCiclos.findFirst()
    
    if (!config) {
      console.log('   ‚ùå Nenhuma configura√ß√£o encontrada')
      return
    }

    console.log(`   ‚úÖ Ciclo atual: #${config.numeroCiclo}`)
    console.log(`   ‚úÖ Season atual: S${config.numeroSeason}`)
    console.log(`   üìÖ In√≠cio do ciclo: ${config.dataInicioCiclo}`)
    console.log(`   üìÖ In√≠cio da season: ${config.dataInicioSeason}`)

    // 2. Calcular dias restantes
    console.log('\n2Ô∏è‚É£ Calculando dias restantes...')
    const agora = new Date()
    
    const dataFimCiclo = new Date(config.dataInicioCiclo)
    dataFimCiclo.setDate(dataFimCiclo.getDate() + 15)
    
    const dataFimSeason = new Date(config.dataInicioSeason)
    dataFimSeason.setMonth(dataFimSeason.getMonth() + 3)
    
    const diasRestantesCiclo = Math.max(0, Math.ceil((dataFimCiclo.getTime() - agora.getTime()) / (1000 * 60 * 60 * 24)))
    const diasRestantesSeason = Math.max(0, Math.ceil((dataFimSeason.getTime() - agora.getTime()) / (1000 * 60 * 60 * 24)))
    
    console.log(`   üìä Dias restantes para o ciclo: ${diasRestantesCiclo}`)
    console.log(`   üìä Dias restantes para a season: ${diasRestantesSeason}`)

    // 3. Testar API
    console.log('\n3Ô∏è‚É£ Testando API...')
    const response = await fetch('http://localhost:3000/api/ranking/ciclos')
    const data = await response.json()
    
    console.log(`   ‚úÖ API retornou: ${JSON.stringify(data, null, 2)}`)

    // 4. Simular reset do ciclo (para teste)
    console.log('\n4Ô∏è‚É£ Simulando reset do ciclo (para teste)...')
    
    // Modificar a data de in√≠cio para simular um ciclo antigo
    const dataAntiga = new Date()
    dataAntiga.setDate(dataAntiga.getDate() - 16) // 16 dias atr√°s
    
    await prisma.configuracaoCiclos.update({
      where: { id: config.id },
      data: {
        dataInicioCiclo: dataAntiga
      }
    })
    
    console.log('   üîÑ Data do ciclo modificada para simular reset')

    // 5. Testar API novamente (deve fazer reset autom√°tico)
    console.log('\n5Ô∏è‚É£ Testando API ap√≥s simula√ß√£o...')
    const response2 = await fetch('http://localhost:3000/api/ranking/ciclos')
    const data2 = await response2.json()
    
    console.log(`   ‚úÖ API ap√≥s simula√ß√£o: ${JSON.stringify(data2, null, 2)}`)

    // 6. Restaurar configura√ß√£o original
    console.log('\n6Ô∏è‚É£ Restaurando configura√ß√£o original...')
    await prisma.configuracaoCiclos.update({
      where: { id: config.id },
      data: {
        dataInicioCiclo: config.dataInicioCiclo
      }
    })
    
    console.log('   ‚úÖ Configura√ß√£o restaurada')

    console.log('\nüéâ Teste conclu√≠do com sucesso!')
    
//   } catch (error) {
//     console.error('‚ùå Erro no teste:', error)
//   } finally {
//     await prisma.$disconnect()
//   }
// }

// // Executar teste
// testarCiclos() 