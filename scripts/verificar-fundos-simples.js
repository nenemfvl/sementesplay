const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function verificarFundos() {
  console.log('üîç Verificando fundos de sementes...')

  try {
    // Buscar fundo pendente
    const fundoPendente = await prisma.fundoSementes.findFirst({
      where: { distribuido: false }
    })

    if (fundoPendente) {
      console.log(`\nüìä Fundo pendente encontrado:`)
      console.log(`   ID: ${fundoPendente.id}`)
      console.log(`   Valor: R$ ${fundoPendente.valorTotal.toFixed(2)}`)
      console.log(`   Data in√≠cio: ${fundoPendente.dataInicio.toLocaleString()}`)
      console.log(`   Data fim: ${fundoPendente.dataFim.toLocaleString()}`)
      console.log(`   Distribu√≠do: ${fundoPendente.distribuido ? 'Sim' : 'N√£o'}`)
    } else {
      console.log('\n‚úÖ Nenhum fundo pendente de distribui√ß√£o')
    }

    // Buscar todos os fundos
    const todosFundos = await prisma.fundoSementes.findMany({
      orderBy: { dataInicio: 'desc' }
    })

    console.log(`\nüìä Total de fundos: ${todosFundos.length}`)
    
    for (const fundo of todosFundos) {
      console.log(`\nüîç Fundo: R$ ${fundo.valorTotal.toFixed(2)} - ${fundo.distribuido ? '‚úÖ Distribu√≠do' : '‚è≥ Pendente'}`)
    }

    // Verificar distribui√ß√µes
    const distribuicoes = await prisma.distribuicaoFundo.findMany({
      include: {
        fundo: true
      },
      orderBy: { data: 'desc' },
      take: 10
    })

    console.log(`\nüìã √öltimas distribui√ß√µes:`)
    distribuicoes.forEach(d => {
      console.log(`   ‚Ä¢ ${d.valor.toFixed(2)} sementes - ${d.tipo} - ${d.data.toLocaleString()}`)
    })

  } catch (error) {
    console.error('‚ùå Erro durante verifica√ß√£o:', error)
  } finally {
    await prisma.$disconnect()
  }
}

verificarFundos()
