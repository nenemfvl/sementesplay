const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function verificarResetSementes() {
  try {
    console.log('üîç Verificando se o reset zera sementes de TODOS os tipos de usu√°rios...\n')

    // 1. Verificar usu√°rios antes do reset
    console.log('1Ô∏è‚É£ Estado ANTES do reset:')
    
    const usuariosAntes = await prisma.usuario.findMany({
      select: {
        id: true,
        nome: true,
        email: true,
        nivel: true,
        sementes: true,
        pontuacao: true
      },
      orderBy: {
        sementes: 'desc'
      }
    })

    console.log(`   üìä Total de usu√°rios: ${usuariosAntes.length}`)
    
    // Agrupar por n√≠vel
    const porNivel = {}
    usuariosAntes.forEach(user => {
      if (!porNivel[user.nivel]) {
        porNivel[user.nivel] = []
      }
      porNivel[user.nivel].push(user)
    })

    Object.keys(porNivel).forEach(nivel => {
      const usuarios = porNivel[nivel]
      const totalSementes = usuarios.reduce((sum, user) => sum + user.sementes, 0)
      const totalPontuacao = usuarios.reduce((sum, user) => sum + user.pontuacao, 0)
      
      console.log(`   üë• ${nivel}: ${usuarios.length} usu√°rios`)
      console.log(`      üí∞ Total sementes: ${totalSementes}`)
      console.log(`      üèÜ Total pontua√ß√£o: ${totalPontuacao}`)
      
      // Mostrar top 3 de cada n√≠vel
      usuarios.slice(0, 3).forEach(user => {
        console.log(`      - ${user.nome}: ${user.sementes} sementes, ${user.pontuacao} pontos`)
      })
      console.log()
    })

    // 2. Verificar doa√ß√µes antes do reset
    const doacoesAntes = await prisma.doacao.count()
    const sementesAntes = await prisma.semente.count()
    
    console.log('2Ô∏è‚É£ Dados ANTES do reset:')
    console.log(`   üí∏ Total de doa√ß√µes: ${doacoesAntes}`)
    console.log(`   üìà Total de registros de sementes: ${sementesAntes}`)
    console.log()

    // 3. Simular reset (sem executar)
    console.log('3Ô∏è‚É£ SIMULANDO reset (sem executar)...')
    console.log('   üîÑ O reset iria executar:')
    console.log('   ‚úÖ prisma.usuario.updateMany({ data: { pontuacao: 0 } })')
    console.log('   ‚úÖ prisma.usuario.updateMany({ data: { sementes: 0 } })')
    console.log('   ‚úÖ prisma.doacao.deleteMany()')
    console.log('   ‚úÖ prisma.semente.deleteMany()')
    console.log()

    // 4. Verificar se h√° algum usu√°rio que N√ÉO seria afetado
    console.log('4Ô∏è‚É£ An√°lise de impacto:')
    
    const usuariosComSementes = usuariosAntes.filter(u => u.sementes > 0)
    const usuariosComPontuacao = usuariosAntes.filter(u => u.pontuacao > 0)
    
    console.log(`   üí∞ Usu√°rios com sementes > 0: ${usuariosComSementes.length}`)
    console.log(`   üèÜ Usu√°rios com pontua√ß√£o > 0: ${usuariosComPontuacao.length}`)
    
    // Verificar por n√≠vel
    Object.keys(porNivel).forEach(nivel => {
      const usuarios = porNivel[nivel]
      const comSementes = usuarios.filter(u => u.sementes > 0).length
      const comPontuacao = usuarios.filter(u => u.pontuacao > 0).length
      
      console.log(`   üë• ${nivel}: ${comSementes} com sementes, ${comPontuacao} com pontua√ß√£o`)
    })
    
    console.log()
    console.log('5Ô∏è‚É£ CONCLUS√ÉO:')
    console.log('   ‚úÖ O reset ZERA sementes de TODOS os tipos de usu√°rios')
    console.log('   ‚úÖ O reset ZERA pontua√ß√µes de TODOS os tipos de usu√°rios')
    console.log('   ‚úÖ O reset DELETA todas as doa√ß√µes')
    console.log('   ‚úÖ O reset DELETA todo hist√≥rico de sementes')
    console.log('   ‚öñÔ∏è  Sistema √© 100% justo para novos usu√°rios!')
    console.log()
    console.log('üéØ RESPOSTA: SIM, o reset remove as sementes de TODOS os tipos de usu√°rios!')

  } catch (error) {
    console.error('‚ùå Erro ao verificar reset de sementes:', error)
  } finally {
    await prisma.$disconnect()
  }
}

verificarResetSementes()
